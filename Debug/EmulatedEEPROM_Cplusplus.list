
EmulatedEEPROM_Cplusplus.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003904  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000178  08003a98  08003a98  00013a98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    000000c8  08003c10  08003c10  00013c10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          00000150  08003cd8  08003cd8  00013cd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .init_array   00000004  08003e28  08003e28  00013e28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .fini_array   00000004  08003e2c  08003e2c  00013e2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .data         00000078  20000000  08003e30  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          00000060  20000078  08003ea8  00020078  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  200000d8  08003ea8  000200d8  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 11 .debug_info   0000a20c  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00001ba2  00000000  00000000  0002a2b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000488  00000000  00000000  0002be58  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000598  00000000  00000000  0002c2e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00002994  00000000  00000000  0002c878  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000027d3  00000000  00000000  0002f20c  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  000319df  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00001858  00000000  00000000  00031a5c  2**2
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_loc    00001234  00000000  00000000  000332b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .stab         0000003c  00000000  00000000  000344e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .stabstr      00000076  00000000  00000000  00034524  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000078 	.word	0x20000078
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08003a80 	.word	0x08003a80

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	2000007c 	.word	0x2000007c
 80001d0:	08003a80 	.word	0x08003a80

080001d4 <strcmp>:
 80001d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001dc:	2a01      	cmp	r2, #1
 80001de:	bf28      	it	cs
 80001e0:	429a      	cmpcs	r2, r3
 80001e2:	d0f7      	beq.n	80001d4 <strcmp>
 80001e4:	1ad0      	subs	r0, r2, r3
 80001e6:	4770      	bx	lr

080001e8 <__aeabi_uldivmod>:
 80001e8:	b953      	cbnz	r3, 8000200 <__aeabi_uldivmod+0x18>
 80001ea:	b94a      	cbnz	r2, 8000200 <__aeabi_uldivmod+0x18>
 80001ec:	2900      	cmp	r1, #0
 80001ee:	bf08      	it	eq
 80001f0:	2800      	cmpeq	r0, #0
 80001f2:	bf1c      	itt	ne
 80001f4:	f04f 31ff 	movne.w	r1, #4294967295
 80001f8:	f04f 30ff 	movne.w	r0, #4294967295
 80001fc:	f001 b8f6 	b.w	80013ec <__aeabi_idiv0>
 8000200:	f1ad 0c08 	sub.w	ip, sp, #8
 8000204:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000208:	f000 f806 	bl	8000218 <__udivmoddi4>
 800020c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000210:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000214:	b004      	add	sp, #16
 8000216:	4770      	bx	lr

08000218 <__udivmoddi4>:
 8000218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800021c:	468c      	mov	ip, r1
 800021e:	460d      	mov	r5, r1
 8000220:	4604      	mov	r4, r0
 8000222:	9e08      	ldr	r6, [sp, #32]
 8000224:	2b00      	cmp	r3, #0
 8000226:	d151      	bne.n	80002cc <__udivmoddi4+0xb4>
 8000228:	428a      	cmp	r2, r1
 800022a:	4617      	mov	r7, r2
 800022c:	d96d      	bls.n	800030a <__udivmoddi4+0xf2>
 800022e:	fab2 fe82 	clz	lr, r2
 8000232:	f1be 0f00 	cmp.w	lr, #0
 8000236:	d00b      	beq.n	8000250 <__udivmoddi4+0x38>
 8000238:	f1ce 0c20 	rsb	ip, lr, #32
 800023c:	fa01 f50e 	lsl.w	r5, r1, lr
 8000240:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000244:	fa02 f70e 	lsl.w	r7, r2, lr
 8000248:	ea4c 0c05 	orr.w	ip, ip, r5
 800024c:	fa00 f40e 	lsl.w	r4, r0, lr
 8000250:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000254:	0c25      	lsrs	r5, r4, #16
 8000256:	fbbc f8fa 	udiv	r8, ip, sl
 800025a:	fa1f f987 	uxth.w	r9, r7
 800025e:	fb0a cc18 	mls	ip, sl, r8, ip
 8000262:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000266:	fb08 f309 	mul.w	r3, r8, r9
 800026a:	42ab      	cmp	r3, r5
 800026c:	d90a      	bls.n	8000284 <__udivmoddi4+0x6c>
 800026e:	19ed      	adds	r5, r5, r7
 8000270:	f108 32ff 	add.w	r2, r8, #4294967295
 8000274:	f080 8123 	bcs.w	80004be <__udivmoddi4+0x2a6>
 8000278:	42ab      	cmp	r3, r5
 800027a:	f240 8120 	bls.w	80004be <__udivmoddi4+0x2a6>
 800027e:	f1a8 0802 	sub.w	r8, r8, #2
 8000282:	443d      	add	r5, r7
 8000284:	1aed      	subs	r5, r5, r3
 8000286:	b2a4      	uxth	r4, r4
 8000288:	fbb5 f0fa 	udiv	r0, r5, sl
 800028c:	fb0a 5510 	mls	r5, sl, r0, r5
 8000290:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000294:	fb00 f909 	mul.w	r9, r0, r9
 8000298:	45a1      	cmp	r9, r4
 800029a:	d909      	bls.n	80002b0 <__udivmoddi4+0x98>
 800029c:	19e4      	adds	r4, r4, r7
 800029e:	f100 33ff 	add.w	r3, r0, #4294967295
 80002a2:	f080 810a 	bcs.w	80004ba <__udivmoddi4+0x2a2>
 80002a6:	45a1      	cmp	r9, r4
 80002a8:	f240 8107 	bls.w	80004ba <__udivmoddi4+0x2a2>
 80002ac:	3802      	subs	r0, #2
 80002ae:	443c      	add	r4, r7
 80002b0:	eba4 0409 	sub.w	r4, r4, r9
 80002b4:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002b8:	2100      	movs	r1, #0
 80002ba:	2e00      	cmp	r6, #0
 80002bc:	d061      	beq.n	8000382 <__udivmoddi4+0x16a>
 80002be:	fa24 f40e 	lsr.w	r4, r4, lr
 80002c2:	2300      	movs	r3, #0
 80002c4:	6034      	str	r4, [r6, #0]
 80002c6:	6073      	str	r3, [r6, #4]
 80002c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d907      	bls.n	80002e0 <__udivmoddi4+0xc8>
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d054      	beq.n	800037e <__udivmoddi4+0x166>
 80002d4:	2100      	movs	r1, #0
 80002d6:	e886 0021 	stmia.w	r6, {r0, r5}
 80002da:	4608      	mov	r0, r1
 80002dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e0:	fab3 f183 	clz	r1, r3
 80002e4:	2900      	cmp	r1, #0
 80002e6:	f040 808e 	bne.w	8000406 <__udivmoddi4+0x1ee>
 80002ea:	42ab      	cmp	r3, r5
 80002ec:	d302      	bcc.n	80002f4 <__udivmoddi4+0xdc>
 80002ee:	4282      	cmp	r2, r0
 80002f0:	f200 80fa 	bhi.w	80004e8 <__udivmoddi4+0x2d0>
 80002f4:	1a84      	subs	r4, r0, r2
 80002f6:	eb65 0503 	sbc.w	r5, r5, r3
 80002fa:	2001      	movs	r0, #1
 80002fc:	46ac      	mov	ip, r5
 80002fe:	2e00      	cmp	r6, #0
 8000300:	d03f      	beq.n	8000382 <__udivmoddi4+0x16a>
 8000302:	e886 1010 	stmia.w	r6, {r4, ip}
 8000306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030a:	b912      	cbnz	r2, 8000312 <__udivmoddi4+0xfa>
 800030c:	2701      	movs	r7, #1
 800030e:	fbb7 f7f2 	udiv	r7, r7, r2
 8000312:	fab7 fe87 	clz	lr, r7
 8000316:	f1be 0f00 	cmp.w	lr, #0
 800031a:	d134      	bne.n	8000386 <__udivmoddi4+0x16e>
 800031c:	1beb      	subs	r3, r5, r7
 800031e:	0c3a      	lsrs	r2, r7, #16
 8000320:	fa1f fc87 	uxth.w	ip, r7
 8000324:	2101      	movs	r1, #1
 8000326:	fbb3 f8f2 	udiv	r8, r3, r2
 800032a:	0c25      	lsrs	r5, r4, #16
 800032c:	fb02 3318 	mls	r3, r2, r8, r3
 8000330:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000334:	fb0c f308 	mul.w	r3, ip, r8
 8000338:	42ab      	cmp	r3, r5
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x134>
 800033c:	19ed      	adds	r5, r5, r7
 800033e:	f108 30ff 	add.w	r0, r8, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x132>
 8000344:	42ab      	cmp	r3, r5
 8000346:	f200 80d1 	bhi.w	80004ec <__udivmoddi4+0x2d4>
 800034a:	4680      	mov	r8, r0
 800034c:	1aed      	subs	r5, r5, r3
 800034e:	b2a3      	uxth	r3, r4
 8000350:	fbb5 f0f2 	udiv	r0, r5, r2
 8000354:	fb02 5510 	mls	r5, r2, r0, r5
 8000358:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 800035c:	fb0c fc00 	mul.w	ip, ip, r0
 8000360:	45a4      	cmp	ip, r4
 8000362:	d907      	bls.n	8000374 <__udivmoddi4+0x15c>
 8000364:	19e4      	adds	r4, r4, r7
 8000366:	f100 33ff 	add.w	r3, r0, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x15a>
 800036c:	45a4      	cmp	ip, r4
 800036e:	f200 80b8 	bhi.w	80004e2 <__udivmoddi4+0x2ca>
 8000372:	4618      	mov	r0, r3
 8000374:	eba4 040c 	sub.w	r4, r4, ip
 8000378:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800037c:	e79d      	b.n	80002ba <__udivmoddi4+0xa2>
 800037e:	4631      	mov	r1, r6
 8000380:	4630      	mov	r0, r6
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	f1ce 0420 	rsb	r4, lr, #32
 800038a:	fa05 f30e 	lsl.w	r3, r5, lr
 800038e:	fa07 f70e 	lsl.w	r7, r7, lr
 8000392:	fa20 f804 	lsr.w	r8, r0, r4
 8000396:	0c3a      	lsrs	r2, r7, #16
 8000398:	fa25 f404 	lsr.w	r4, r5, r4
 800039c:	ea48 0803 	orr.w	r8, r8, r3
 80003a0:	fbb4 f1f2 	udiv	r1, r4, r2
 80003a4:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80003a8:	fb02 4411 	mls	r4, r2, r1, r4
 80003ac:	fa1f fc87 	uxth.w	ip, r7
 80003b0:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80003b4:	fb01 f30c 	mul.w	r3, r1, ip
 80003b8:	42ab      	cmp	r3, r5
 80003ba:	fa00 f40e 	lsl.w	r4, r0, lr
 80003be:	d909      	bls.n	80003d4 <__udivmoddi4+0x1bc>
 80003c0:	19ed      	adds	r5, r5, r7
 80003c2:	f101 30ff 	add.w	r0, r1, #4294967295
 80003c6:	f080 808a 	bcs.w	80004de <__udivmoddi4+0x2c6>
 80003ca:	42ab      	cmp	r3, r5
 80003cc:	f240 8087 	bls.w	80004de <__udivmoddi4+0x2c6>
 80003d0:	3902      	subs	r1, #2
 80003d2:	443d      	add	r5, r7
 80003d4:	1aeb      	subs	r3, r5, r3
 80003d6:	fa1f f588 	uxth.w	r5, r8
 80003da:	fbb3 f0f2 	udiv	r0, r3, r2
 80003de:	fb02 3310 	mls	r3, r2, r0, r3
 80003e2:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003e6:	fb00 f30c 	mul.w	r3, r0, ip
 80003ea:	42ab      	cmp	r3, r5
 80003ec:	d907      	bls.n	80003fe <__udivmoddi4+0x1e6>
 80003ee:	19ed      	adds	r5, r5, r7
 80003f0:	f100 38ff 	add.w	r8, r0, #4294967295
 80003f4:	d26f      	bcs.n	80004d6 <__udivmoddi4+0x2be>
 80003f6:	42ab      	cmp	r3, r5
 80003f8:	d96d      	bls.n	80004d6 <__udivmoddi4+0x2be>
 80003fa:	3802      	subs	r0, #2
 80003fc:	443d      	add	r5, r7
 80003fe:	1aeb      	subs	r3, r5, r3
 8000400:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000404:	e78f      	b.n	8000326 <__udivmoddi4+0x10e>
 8000406:	f1c1 0720 	rsb	r7, r1, #32
 800040a:	fa22 f807 	lsr.w	r8, r2, r7
 800040e:	408b      	lsls	r3, r1
 8000410:	fa05 f401 	lsl.w	r4, r5, r1
 8000414:	ea48 0303 	orr.w	r3, r8, r3
 8000418:	fa20 fe07 	lsr.w	lr, r0, r7
 800041c:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000420:	40fd      	lsrs	r5, r7
 8000422:	ea4e 0e04 	orr.w	lr, lr, r4
 8000426:	fbb5 f9fc 	udiv	r9, r5, ip
 800042a:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800042e:	fb0c 5519 	mls	r5, ip, r9, r5
 8000432:	fa1f f883 	uxth.w	r8, r3
 8000436:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 800043a:	fb09 f408 	mul.w	r4, r9, r8
 800043e:	42ac      	cmp	r4, r5
 8000440:	fa02 f201 	lsl.w	r2, r2, r1
 8000444:	fa00 fa01 	lsl.w	sl, r0, r1
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x244>
 800044a:	18ed      	adds	r5, r5, r3
 800044c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000450:	d243      	bcs.n	80004da <__udivmoddi4+0x2c2>
 8000452:	42ac      	cmp	r4, r5
 8000454:	d941      	bls.n	80004da <__udivmoddi4+0x2c2>
 8000456:	f1a9 0902 	sub.w	r9, r9, #2
 800045a:	441d      	add	r5, r3
 800045c:	1b2d      	subs	r5, r5, r4
 800045e:	fa1f fe8e 	uxth.w	lr, lr
 8000462:	fbb5 f0fc 	udiv	r0, r5, ip
 8000466:	fb0c 5510 	mls	r5, ip, r0, r5
 800046a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800046e:	fb00 f808 	mul.w	r8, r0, r8
 8000472:	45a0      	cmp	r8, r4
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x26e>
 8000476:	18e4      	adds	r4, r4, r3
 8000478:	f100 35ff 	add.w	r5, r0, #4294967295
 800047c:	d229      	bcs.n	80004d2 <__udivmoddi4+0x2ba>
 800047e:	45a0      	cmp	r8, r4
 8000480:	d927      	bls.n	80004d2 <__udivmoddi4+0x2ba>
 8000482:	3802      	subs	r0, #2
 8000484:	441c      	add	r4, r3
 8000486:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048a:	eba4 0408 	sub.w	r4, r4, r8
 800048e:	fba0 8902 	umull	r8, r9, r0, r2
 8000492:	454c      	cmp	r4, r9
 8000494:	46c6      	mov	lr, r8
 8000496:	464d      	mov	r5, r9
 8000498:	d315      	bcc.n	80004c6 <__udivmoddi4+0x2ae>
 800049a:	d012      	beq.n	80004c2 <__udivmoddi4+0x2aa>
 800049c:	b156      	cbz	r6, 80004b4 <__udivmoddi4+0x29c>
 800049e:	ebba 030e 	subs.w	r3, sl, lr
 80004a2:	eb64 0405 	sbc.w	r4, r4, r5
 80004a6:	fa04 f707 	lsl.w	r7, r4, r7
 80004aa:	40cb      	lsrs	r3, r1
 80004ac:	431f      	orrs	r7, r3
 80004ae:	40cc      	lsrs	r4, r1
 80004b0:	6037      	str	r7, [r6, #0]
 80004b2:	6074      	str	r4, [r6, #4]
 80004b4:	2100      	movs	r1, #0
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	4618      	mov	r0, r3
 80004bc:	e6f8      	b.n	80002b0 <__udivmoddi4+0x98>
 80004be:	4690      	mov	r8, r2
 80004c0:	e6e0      	b.n	8000284 <__udivmoddi4+0x6c>
 80004c2:	45c2      	cmp	sl, r8
 80004c4:	d2ea      	bcs.n	800049c <__udivmoddi4+0x284>
 80004c6:	ebb8 0e02 	subs.w	lr, r8, r2
 80004ca:	eb69 0503 	sbc.w	r5, r9, r3
 80004ce:	3801      	subs	r0, #1
 80004d0:	e7e4      	b.n	800049c <__udivmoddi4+0x284>
 80004d2:	4628      	mov	r0, r5
 80004d4:	e7d7      	b.n	8000486 <__udivmoddi4+0x26e>
 80004d6:	4640      	mov	r0, r8
 80004d8:	e791      	b.n	80003fe <__udivmoddi4+0x1e6>
 80004da:	4681      	mov	r9, r0
 80004dc:	e7be      	b.n	800045c <__udivmoddi4+0x244>
 80004de:	4601      	mov	r1, r0
 80004e0:	e778      	b.n	80003d4 <__udivmoddi4+0x1bc>
 80004e2:	3802      	subs	r0, #2
 80004e4:	443c      	add	r4, r7
 80004e6:	e745      	b.n	8000374 <__udivmoddi4+0x15c>
 80004e8:	4608      	mov	r0, r1
 80004ea:	e708      	b.n	80002fe <__udivmoddi4+0xe6>
 80004ec:	f1a8 0802 	sub.w	r8, r8, #2
 80004f0:	443d      	add	r5, r7
 80004f2:	e72b      	b.n	800034c <__udivmoddi4+0x134>

080004f4 <selfrel_offset31>:
 80004f4:	6803      	ldr	r3, [r0, #0]
 80004f6:	005a      	lsls	r2, r3, #1
 80004f8:	bf4c      	ite	mi
 80004fa:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 80004fe:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
 8000502:	4418      	add	r0, r3
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <search_EIT_table>:
 8000508:	b361      	cbz	r1, 8000564 <search_EIT_table+0x5c>
 800050a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800050e:	f101 3aff 	add.w	sl, r1, #4294967295
 8000512:	4690      	mov	r8, r2
 8000514:	4606      	mov	r6, r0
 8000516:	46d1      	mov	r9, sl
 8000518:	2700      	movs	r7, #0
 800051a:	eb07 0409 	add.w	r4, r7, r9
 800051e:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
 8000522:	1064      	asrs	r4, r4, #1
 8000524:	00e5      	lsls	r5, r4, #3
 8000526:	1971      	adds	r1, r6, r5
 8000528:	4608      	mov	r0, r1
 800052a:	f7ff ffe3 	bl	80004f4 <selfrel_offset31>
 800052e:	45a2      	cmp	sl, r4
 8000530:	4683      	mov	fp, r0
 8000532:	f105 0008 	add.w	r0, r5, #8
 8000536:	4430      	add	r0, r6
 8000538:	d009      	beq.n	800054e <search_EIT_table+0x46>
 800053a:	f7ff ffdb 	bl	80004f4 <selfrel_offset31>
 800053e:	45c3      	cmp	fp, r8
 8000540:	f100 30ff 	add.w	r0, r0, #4294967295
 8000544:	d805      	bhi.n	8000552 <search_EIT_table+0x4a>
 8000546:	4540      	cmp	r0, r8
 8000548:	d209      	bcs.n	800055e <search_EIT_table+0x56>
 800054a:	1c67      	adds	r7, r4, #1
 800054c:	e7e5      	b.n	800051a <search_EIT_table+0x12>
 800054e:	45c3      	cmp	fp, r8
 8000550:	d905      	bls.n	800055e <search_EIT_table+0x56>
 8000552:	42a7      	cmp	r7, r4
 8000554:	d002      	beq.n	800055c <search_EIT_table+0x54>
 8000556:	f104 39ff 	add.w	r9, r4, #4294967295
 800055a:	e7de      	b.n	800051a <search_EIT_table+0x12>
 800055c:	2100      	movs	r1, #0
 800055e:	4608      	mov	r0, r1
 8000560:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000564:	4608      	mov	r0, r1
 8000566:	4770      	bx	lr

08000568 <__gnu_unwind_get_pr_addr>:
 8000568:	2801      	cmp	r0, #1
 800056a:	d007      	beq.n	800057c <__gnu_unwind_get_pr_addr+0x14>
 800056c:	2802      	cmp	r0, #2
 800056e:	d007      	beq.n	8000580 <__gnu_unwind_get_pr_addr+0x18>
 8000570:	4b04      	ldr	r3, [pc, #16]	; (8000584 <__gnu_unwind_get_pr_addr+0x1c>)
 8000572:	2800      	cmp	r0, #0
 8000574:	bf0c      	ite	eq
 8000576:	4618      	moveq	r0, r3
 8000578:	2000      	movne	r0, #0
 800057a:	4770      	bx	lr
 800057c:	4802      	ldr	r0, [pc, #8]	; (8000588 <__gnu_unwind_get_pr_addr+0x20>)
 800057e:	4770      	bx	lr
 8000580:	4802      	ldr	r0, [pc, #8]	; (800058c <__gnu_unwind_get_pr_addr+0x24>)
 8000582:	4770      	bx	lr
 8000584:	08000c6d 	.word	0x08000c6d
 8000588:	08000c71 	.word	0x08000c71
 800058c:	08000c75 	.word	0x08000c75

08000590 <get_eit_entry>:
 8000590:	b530      	push	{r4, r5, lr}
 8000592:	4b24      	ldr	r3, [pc, #144]	; (8000624 <get_eit_entry+0x94>)
 8000594:	b083      	sub	sp, #12
 8000596:	4604      	mov	r4, r0
 8000598:	1e8d      	subs	r5, r1, #2
 800059a:	b37b      	cbz	r3, 80005fc <get_eit_entry+0x6c>
 800059c:	a901      	add	r1, sp, #4
 800059e:	4628      	mov	r0, r5
 80005a0:	f3af 8000 	nop.w
 80005a4:	b320      	cbz	r0, 80005f0 <get_eit_entry+0x60>
 80005a6:	9901      	ldr	r1, [sp, #4]
 80005a8:	462a      	mov	r2, r5
 80005aa:	f7ff ffad 	bl	8000508 <search_EIT_table>
 80005ae:	4601      	mov	r1, r0
 80005b0:	b1f0      	cbz	r0, 80005f0 <get_eit_entry+0x60>
 80005b2:	f7ff ff9f 	bl	80004f4 <selfrel_offset31>
 80005b6:	684b      	ldr	r3, [r1, #4]
 80005b8:	64a0      	str	r0, [r4, #72]	; 0x48
 80005ba:	2b01      	cmp	r3, #1
 80005bc:	d012      	beq.n	80005e4 <get_eit_entry+0x54>
 80005be:	2b00      	cmp	r3, #0
 80005c0:	f101 0004 	add.w	r0, r1, #4
 80005c4:	db20      	blt.n	8000608 <get_eit_entry+0x78>
 80005c6:	f7ff ff95 	bl	80004f4 <selfrel_offset31>
 80005ca:	2300      	movs	r3, #0
 80005cc:	64e0      	str	r0, [r4, #76]	; 0x4c
 80005ce:	6523      	str	r3, [r4, #80]	; 0x50
 80005d0:	6803      	ldr	r3, [r0, #0]
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	db1c      	blt.n	8000610 <get_eit_entry+0x80>
 80005d6:	f7ff ff8d 	bl	80004f4 <selfrel_offset31>
 80005da:	2300      	movs	r3, #0
 80005dc:	6120      	str	r0, [r4, #16]
 80005de:	4618      	mov	r0, r3
 80005e0:	b003      	add	sp, #12
 80005e2:	bd30      	pop	{r4, r5, pc}
 80005e4:	2300      	movs	r3, #0
 80005e6:	6123      	str	r3, [r4, #16]
 80005e8:	2305      	movs	r3, #5
 80005ea:	4618      	mov	r0, r3
 80005ec:	b003      	add	sp, #12
 80005ee:	bd30      	pop	{r4, r5, pc}
 80005f0:	2300      	movs	r3, #0
 80005f2:	6123      	str	r3, [r4, #16]
 80005f4:	2309      	movs	r3, #9
 80005f6:	4618      	mov	r0, r3
 80005f8:	b003      	add	sp, #12
 80005fa:	bd30      	pop	{r4, r5, pc}
 80005fc:	490a      	ldr	r1, [pc, #40]	; (8000628 <get_eit_entry+0x98>)
 80005fe:	480b      	ldr	r0, [pc, #44]	; (800062c <get_eit_entry+0x9c>)
 8000600:	1a09      	subs	r1, r1, r0
 8000602:	10c9      	asrs	r1, r1, #3
 8000604:	9101      	str	r1, [sp, #4]
 8000606:	e7cf      	b.n	80005a8 <get_eit_entry+0x18>
 8000608:	2301      	movs	r3, #1
 800060a:	64e0      	str	r0, [r4, #76]	; 0x4c
 800060c:	6523      	str	r3, [r4, #80]	; 0x50
 800060e:	e7df      	b.n	80005d0 <get_eit_entry+0x40>
 8000610:	f3c3 6003 	ubfx	r0, r3, #24, #4
 8000614:	f7ff ffa8 	bl	8000568 <__gnu_unwind_get_pr_addr>
 8000618:	2800      	cmp	r0, #0
 800061a:	6120      	str	r0, [r4, #16]
 800061c:	bf14      	ite	ne
 800061e:	2300      	movne	r3, #0
 8000620:	2309      	moveq	r3, #9
 8000622:	e7dc      	b.n	80005de <get_eit_entry+0x4e>
 8000624:	00000000 	.word	0x00000000
 8000628:	08003e28 	.word	0x08003e28
 800062c:	08003cd8 	.word	0x08003cd8

08000630 <restore_non_core_regs>:
 8000630:	6803      	ldr	r3, [r0, #0]
 8000632:	07da      	lsls	r2, r3, #31
 8000634:	b510      	push	{r4, lr}
 8000636:	4604      	mov	r4, r0
 8000638:	d406      	bmi.n	8000648 <restore_non_core_regs+0x18>
 800063a:	079b      	lsls	r3, r3, #30
 800063c:	f100 0048 	add.w	r0, r0, #72	; 0x48
 8000640:	d509      	bpl.n	8000656 <restore_non_core_regs+0x26>
 8000642:	f000 fc51 	bl	8000ee8 <__gnu_Unwind_Restore_VFP_D>
 8000646:	6823      	ldr	r3, [r4, #0]
 8000648:	0759      	lsls	r1, r3, #29
 800064a:	d509      	bpl.n	8000660 <restore_non_core_regs+0x30>
 800064c:	071a      	lsls	r2, r3, #28
 800064e:	d50e      	bpl.n	800066e <restore_non_core_regs+0x3e>
 8000650:	06db      	lsls	r3, r3, #27
 8000652:	d513      	bpl.n	800067c <restore_non_core_regs+0x4c>
 8000654:	bd10      	pop	{r4, pc}
 8000656:	f000 fc3f 	bl	8000ed8 <__gnu_Unwind_Restore_VFP>
 800065a:	6823      	ldr	r3, [r4, #0]
 800065c:	0759      	lsls	r1, r3, #29
 800065e:	d4f5      	bmi.n	800064c <restore_non_core_regs+0x1c>
 8000660:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8000664:	f000 fc48 	bl	8000ef8 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8000668:	6823      	ldr	r3, [r4, #0]
 800066a:	071a      	lsls	r2, r3, #28
 800066c:	d4f0      	bmi.n	8000650 <restore_non_core_regs+0x20>
 800066e:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 8000672:	f000 fc49 	bl	8000f08 <__gnu_Unwind_Restore_WMMXD>
 8000676:	6823      	ldr	r3, [r4, #0]
 8000678:	06db      	lsls	r3, r3, #27
 800067a:	d4eb      	bmi.n	8000654 <restore_non_core_regs+0x24>
 800067c:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 8000680:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000684:	f000 bc84 	b.w	8000f90 <__gnu_Unwind_Restore_WMMXC>

08000688 <_Unwind_decode_typeinfo_ptr.isra.0>:
 8000688:	6803      	ldr	r3, [r0, #0]
 800068a:	b103      	cbz	r3, 800068e <_Unwind_decode_typeinfo_ptr.isra.0+0x6>
 800068c:	4403      	add	r3, r0
 800068e:	4618      	mov	r0, r3
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop

08000694 <__gnu_unwind_24bit.isra.1>:
 8000694:	2009      	movs	r0, #9
 8000696:	4770      	bx	lr

08000698 <_Unwind_DebugHook>:
 8000698:	4770      	bx	lr
 800069a:	bf00      	nop

0800069c <unwind_phase2>:
 800069c:	b570      	push	{r4, r5, r6, lr}
 800069e:	4604      	mov	r4, r0
 80006a0:	460d      	mov	r5, r1
 80006a2:	e008      	b.n	80006b6 <unwind_phase2+0x1a>
 80006a4:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 80006a6:	6163      	str	r3, [r4, #20]
 80006a8:	462a      	mov	r2, r5
 80006aa:	6923      	ldr	r3, [r4, #16]
 80006ac:	4621      	mov	r1, r4
 80006ae:	2001      	movs	r0, #1
 80006b0:	4798      	blx	r3
 80006b2:	2808      	cmp	r0, #8
 80006b4:	d108      	bne.n	80006c8 <unwind_phase2+0x2c>
 80006b6:	6c29      	ldr	r1, [r5, #64]	; 0x40
 80006b8:	4620      	mov	r0, r4
 80006ba:	f7ff ff69 	bl	8000590 <get_eit_entry>
 80006be:	4606      	mov	r6, r0
 80006c0:	2800      	cmp	r0, #0
 80006c2:	d0ef      	beq.n	80006a4 <unwind_phase2+0x8>
 80006c4:	f003 f86a 	bl	800379c <abort>
 80006c8:	2807      	cmp	r0, #7
 80006ca:	d1fb      	bne.n	80006c4 <unwind_phase2+0x28>
 80006cc:	4630      	mov	r0, r6
 80006ce:	6c29      	ldr	r1, [r5, #64]	; 0x40
 80006d0:	f7ff ffe2 	bl	8000698 <_Unwind_DebugHook>
 80006d4:	1d28      	adds	r0, r5, #4
 80006d6:	f000 fbf3 	bl	8000ec0 <__restore_core_regs>
 80006da:	bf00      	nop

080006dc <unwind_phase2_forced>:
 80006dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80006e0:	1d0c      	adds	r4, r1, #4
 80006e2:	4605      	mov	r5, r0
 80006e4:	4692      	mov	sl, r2
 80006e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80006e8:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
 80006ec:	ae03      	add	r6, sp, #12
 80006ee:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80006f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80006f2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80006f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80006f6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80006f8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80006fc:	ac02      	add	r4, sp, #8
 80006fe:	f8d5 800c 	ldr.w	r8, [r5, #12]
 8000702:	f8d5 9018 	ldr.w	r9, [r5, #24]
 8000706:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 800070a:	2300      	movs	r3, #0
 800070c:	4628      	mov	r0, r5
 800070e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8000710:	6023      	str	r3, [r4, #0]
 8000712:	f7ff ff3d 	bl	8000590 <get_eit_entry>
 8000716:	f1ba 0f00 	cmp.w	sl, #0
 800071a:	4607      	mov	r7, r0
 800071c:	bf14      	ite	ne
 800071e:	260a      	movne	r6, #10
 8000720:	2609      	moveq	r6, #9
 8000722:	b17f      	cbz	r7, 8000744 <unwind_phase2_forced+0x68>
 8000724:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000726:	f046 0110 	orr.w	r1, r6, #16
 800072a:	e88d 0210 	stmia.w	sp, {r4, r9}
 800072e:	462a      	mov	r2, r5
 8000730:	6463      	str	r3, [r4, #68]	; 0x44
 8000732:	2001      	movs	r0, #1
 8000734:	462b      	mov	r3, r5
 8000736:	47c0      	blx	r8
 8000738:	bb78      	cbnz	r0, 800079a <unwind_phase2_forced+0xbe>
 800073a:	4638      	mov	r0, r7
 800073c:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 8000740:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000744:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000746:	616b      	str	r3, [r5, #20]
 8000748:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800074c:	4621      	mov	r1, r4
 800074e:	a87a      	add	r0, sp, #488	; 0x1e8
 8000750:	f003 f96a 	bl	8003a28 <memcpy>
 8000754:	692b      	ldr	r3, [r5, #16]
 8000756:	aa7a      	add	r2, sp, #488	; 0x1e8
 8000758:	4629      	mov	r1, r5
 800075a:	4630      	mov	r0, r6
 800075c:	4798      	blx	r3
 800075e:	9b88      	ldr	r3, [sp, #544]	; 0x220
 8000760:	4682      	mov	sl, r0
 8000762:	e88d 0210 	stmia.w	sp, {r4, r9}
 8000766:	4631      	mov	r1, r6
 8000768:	6463      	str	r3, [r4, #68]	; 0x44
 800076a:	462a      	mov	r2, r5
 800076c:	462b      	mov	r3, r5
 800076e:	2001      	movs	r0, #1
 8000770:	47c0      	blx	r8
 8000772:	b990      	cbnz	r0, 800079a <unwind_phase2_forced+0xbe>
 8000774:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000778:	a97a      	add	r1, sp, #488	; 0x1e8
 800077a:	4620      	mov	r0, r4
 800077c:	f003 f954 	bl	8003a28 <memcpy>
 8000780:	f1ba 0f08 	cmp.w	sl, #8
 8000784:	d106      	bne.n	8000794 <unwind_phase2_forced+0xb8>
 8000786:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8000788:	4628      	mov	r0, r5
 800078a:	f7ff ff01 	bl	8000590 <get_eit_entry>
 800078e:	2609      	movs	r6, #9
 8000790:	4607      	mov	r7, r0
 8000792:	e7c6      	b.n	8000722 <unwind_phase2_forced+0x46>
 8000794:	f1ba 0f07 	cmp.w	sl, #7
 8000798:	d005      	beq.n	80007a6 <unwind_phase2_forced+0xca>
 800079a:	2709      	movs	r7, #9
 800079c:	4638      	mov	r0, r7
 800079e:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 80007a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007a6:	4638      	mov	r0, r7
 80007a8:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80007aa:	f7ff ff75 	bl	8000698 <_Unwind_DebugHook>
 80007ae:	a803      	add	r0, sp, #12
 80007b0:	f000 fb86 	bl	8000ec0 <__restore_core_regs>

080007b4 <_Unwind_GetCFA>:
 80007b4:	6c40      	ldr	r0, [r0, #68]	; 0x44
 80007b6:	4770      	bx	lr

080007b8 <__gnu_Unwind_RaiseException>:
 80007b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007ba:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 80007bc:	640b      	str	r3, [r1, #64]	; 0x40
 80007be:	1d0e      	adds	r6, r1, #4
 80007c0:	460f      	mov	r7, r1
 80007c2:	4604      	mov	r4, r0
 80007c4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80007c6:	b0f9      	sub	sp, #484	; 0x1e4
 80007c8:	ad01      	add	r5, sp, #4
 80007ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80007cc:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80007ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80007d0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80007d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80007d4:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80007d8:	f04f 36ff 	mov.w	r6, #4294967295
 80007dc:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80007e0:	9600      	str	r6, [sp, #0]
 80007e2:	e006      	b.n	80007f2 <__gnu_Unwind_RaiseException+0x3a>
 80007e4:	6923      	ldr	r3, [r4, #16]
 80007e6:	466a      	mov	r2, sp
 80007e8:	4621      	mov	r1, r4
 80007ea:	4798      	blx	r3
 80007ec:	2808      	cmp	r0, #8
 80007ee:	4605      	mov	r5, r0
 80007f0:	d108      	bne.n	8000804 <__gnu_Unwind_RaiseException+0x4c>
 80007f2:	9910      	ldr	r1, [sp, #64]	; 0x40
 80007f4:	4620      	mov	r0, r4
 80007f6:	f7ff fecb 	bl	8000590 <get_eit_entry>
 80007fa:	2800      	cmp	r0, #0
 80007fc:	d0f2      	beq.n	80007e4 <__gnu_Unwind_RaiseException+0x2c>
 80007fe:	2009      	movs	r0, #9
 8000800:	b079      	add	sp, #484	; 0x1e4
 8000802:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000804:	4668      	mov	r0, sp
 8000806:	f7ff ff13 	bl	8000630 <restore_non_core_regs>
 800080a:	2d06      	cmp	r5, #6
 800080c:	d1f7      	bne.n	80007fe <__gnu_Unwind_RaiseException+0x46>
 800080e:	4639      	mov	r1, r7
 8000810:	4620      	mov	r0, r4
 8000812:	f7ff ff43 	bl	800069c <unwind_phase2>
 8000816:	bf00      	nop

08000818 <__gnu_Unwind_ForcedUnwind>:
 8000818:	b430      	push	{r4, r5}
 800081a:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 800081c:	60c1      	str	r1, [r0, #12]
 800081e:	6182      	str	r2, [r0, #24]
 8000820:	4619      	mov	r1, r3
 8000822:	641d      	str	r5, [r3, #64]	; 0x40
 8000824:	2200      	movs	r2, #0
 8000826:	bc30      	pop	{r4, r5}
 8000828:	e758      	b.n	80006dc <unwind_phase2_forced>
 800082a:	bf00      	nop

0800082c <__gnu_Unwind_Resume>:
 800082c:	b570      	push	{r4, r5, r6, lr}
 800082e:	68c6      	ldr	r6, [r0, #12]
 8000830:	6943      	ldr	r3, [r0, #20]
 8000832:	640b      	str	r3, [r1, #64]	; 0x40
 8000834:	b126      	cbz	r6, 8000840 <__gnu_Unwind_Resume+0x14>
 8000836:	2201      	movs	r2, #1
 8000838:	f7ff ff50 	bl	80006dc <unwind_phase2_forced>
 800083c:	f002 ffae 	bl	800379c <abort>
 8000840:	6903      	ldr	r3, [r0, #16]
 8000842:	460a      	mov	r2, r1
 8000844:	4604      	mov	r4, r0
 8000846:	460d      	mov	r5, r1
 8000848:	4601      	mov	r1, r0
 800084a:	2002      	movs	r0, #2
 800084c:	4798      	blx	r3
 800084e:	2807      	cmp	r0, #7
 8000850:	d007      	beq.n	8000862 <__gnu_Unwind_Resume+0x36>
 8000852:	2808      	cmp	r0, #8
 8000854:	d103      	bne.n	800085e <__gnu_Unwind_Resume+0x32>
 8000856:	4629      	mov	r1, r5
 8000858:	4620      	mov	r0, r4
 800085a:	f7ff ff1f 	bl	800069c <unwind_phase2>
 800085e:	f002 ff9d 	bl	800379c <abort>
 8000862:	4630      	mov	r0, r6
 8000864:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8000866:	f7ff ff17 	bl	8000698 <_Unwind_DebugHook>
 800086a:	1d28      	adds	r0, r5, #4
 800086c:	f000 fb28 	bl	8000ec0 <__restore_core_regs>

08000870 <__gnu_Unwind_Resume_or_Rethrow>:
 8000870:	68c2      	ldr	r2, [r0, #12]
 8000872:	b11a      	cbz	r2, 800087c <__gnu_Unwind_Resume_or_Rethrow+0xc>
 8000874:	6bca      	ldr	r2, [r1, #60]	; 0x3c
 8000876:	640a      	str	r2, [r1, #64]	; 0x40
 8000878:	2200      	movs	r2, #0
 800087a:	e72f      	b.n	80006dc <unwind_phase2_forced>
 800087c:	e79c      	b.n	80007b8 <__gnu_Unwind_RaiseException>
 800087e:	bf00      	nop

08000880 <_Unwind_Complete>:
 8000880:	4770      	bx	lr
 8000882:	bf00      	nop

08000884 <_Unwind_DeleteException>:
 8000884:	6883      	ldr	r3, [r0, #8]
 8000886:	b113      	cbz	r3, 800088e <_Unwind_DeleteException+0xa>
 8000888:	4601      	mov	r1, r0
 800088a:	2001      	movs	r0, #1
 800088c:	4718      	bx	r3
 800088e:	4770      	bx	lr

08000890 <_Unwind_VRS_Get>:
 8000890:	b500      	push	{lr}
 8000892:	2904      	cmp	r1, #4
 8000894:	d807      	bhi.n	80008a6 <_Unwind_VRS_Get+0x16>
 8000896:	e8df f001 	tbb	[pc, r1]
 800089a:	0903      	.short	0x0903
 800089c:	0906      	.short	0x0906
 800089e:	09          	.byte	0x09
 800089f:	00          	.byte	0x00
 80008a0:	b90b      	cbnz	r3, 80008a6 <_Unwind_VRS_Get+0x16>
 80008a2:	2a0f      	cmp	r2, #15
 80008a4:	d905      	bls.n	80008b2 <_Unwind_VRS_Get+0x22>
 80008a6:	2002      	movs	r0, #2
 80008a8:	f85d fb04 	ldr.w	pc, [sp], #4
 80008ac:	2001      	movs	r0, #1
 80008ae:	f85d fb04 	ldr.w	pc, [sp], #4
 80008b2:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80008b6:	4618      	mov	r0, r3
 80008b8:	6853      	ldr	r3, [r2, #4]
 80008ba:	9a01      	ldr	r2, [sp, #4]
 80008bc:	6013      	str	r3, [r2, #0]
 80008be:	f85d fb04 	ldr.w	pc, [sp], #4
 80008c2:	bf00      	nop

080008c4 <_Unwind_GetGR>:
 80008c4:	b510      	push	{r4, lr}
 80008c6:	b084      	sub	sp, #16
 80008c8:	2300      	movs	r3, #0
 80008ca:	ac03      	add	r4, sp, #12
 80008cc:	460a      	mov	r2, r1
 80008ce:	9400      	str	r4, [sp, #0]
 80008d0:	4619      	mov	r1, r3
 80008d2:	f7ff ffdd 	bl	8000890 <_Unwind_VRS_Get>
 80008d6:	9803      	ldr	r0, [sp, #12]
 80008d8:	b004      	add	sp, #16
 80008da:	bd10      	pop	{r4, pc}

080008dc <_Unwind_VRS_Set>:
 80008dc:	b500      	push	{lr}
 80008de:	2904      	cmp	r1, #4
 80008e0:	d807      	bhi.n	80008f2 <_Unwind_VRS_Set+0x16>
 80008e2:	e8df f001 	tbb	[pc, r1]
 80008e6:	0903      	.short	0x0903
 80008e8:	0906      	.short	0x0906
 80008ea:	09          	.byte	0x09
 80008eb:	00          	.byte	0x00
 80008ec:	b90b      	cbnz	r3, 80008f2 <_Unwind_VRS_Set+0x16>
 80008ee:	2a0f      	cmp	r2, #15
 80008f0:	d905      	bls.n	80008fe <_Unwind_VRS_Set+0x22>
 80008f2:	2002      	movs	r0, #2
 80008f4:	f85d fb04 	ldr.w	pc, [sp], #4
 80008f8:	2001      	movs	r0, #1
 80008fa:	f85d fb04 	ldr.w	pc, [sp], #4
 80008fe:	9901      	ldr	r1, [sp, #4]
 8000900:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8000904:	6809      	ldr	r1, [r1, #0]
 8000906:	6051      	str	r1, [r2, #4]
 8000908:	4618      	mov	r0, r3
 800090a:	f85d fb04 	ldr.w	pc, [sp], #4
 800090e:	bf00      	nop

08000910 <_Unwind_SetGR>:
 8000910:	b510      	push	{r4, lr}
 8000912:	b084      	sub	sp, #16
 8000914:	ac04      	add	r4, sp, #16
 8000916:	2300      	movs	r3, #0
 8000918:	f844 2d04 	str.w	r2, [r4, #-4]!
 800091c:	460a      	mov	r2, r1
 800091e:	9400      	str	r4, [sp, #0]
 8000920:	4619      	mov	r1, r3
 8000922:	f7ff ffdb 	bl	80008dc <_Unwind_VRS_Set>
 8000926:	b004      	add	sp, #16
 8000928:	bd10      	pop	{r4, pc}
 800092a:	bf00      	nop

0800092c <__gnu_Unwind_Backtrace>:
 800092c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800092e:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8000930:	6413      	str	r3, [r2, #64]	; 0x40
 8000932:	1d15      	adds	r5, r2, #4
 8000934:	4607      	mov	r7, r0
 8000936:	460e      	mov	r6, r1
 8000938:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800093a:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
 800093e:	ac17      	add	r4, sp, #92	; 0x5c
 8000940:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000942:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000944:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000946:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000948:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800094a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800094e:	f04f 35ff 	mov.w	r5, #4294967295
 8000952:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000956:	9516      	str	r5, [sp, #88]	; 0x58
 8000958:	e010      	b.n	800097c <__gnu_Unwind_Backtrace+0x50>
 800095a:	a816      	add	r0, sp, #88	; 0x58
 800095c:	f7ff ffd8 	bl	8000910 <_Unwind_SetGR>
 8000960:	4631      	mov	r1, r6
 8000962:	a816      	add	r0, sp, #88	; 0x58
 8000964:	47b8      	blx	r7
 8000966:	aa16      	add	r2, sp, #88	; 0x58
 8000968:	4669      	mov	r1, sp
 800096a:	b978      	cbnz	r0, 800098c <__gnu_Unwind_Backtrace+0x60>
 800096c:	9b04      	ldr	r3, [sp, #16]
 800096e:	2008      	movs	r0, #8
 8000970:	4798      	blx	r3
 8000972:	2805      	cmp	r0, #5
 8000974:	4604      	mov	r4, r0
 8000976:	d00a      	beq.n	800098e <__gnu_Unwind_Backtrace+0x62>
 8000978:	2809      	cmp	r0, #9
 800097a:	d007      	beq.n	800098c <__gnu_Unwind_Backtrace+0x60>
 800097c:	9926      	ldr	r1, [sp, #152]	; 0x98
 800097e:	4668      	mov	r0, sp
 8000980:	f7ff fe06 	bl	8000590 <get_eit_entry>
 8000984:	466a      	mov	r2, sp
 8000986:	210c      	movs	r1, #12
 8000988:	2800      	cmp	r0, #0
 800098a:	d0e6      	beq.n	800095a <__gnu_Unwind_Backtrace+0x2e>
 800098c:	2409      	movs	r4, #9
 800098e:	a816      	add	r0, sp, #88	; 0x58
 8000990:	f7ff fe4e 	bl	8000630 <restore_non_core_regs>
 8000994:	4620      	mov	r0, r4
 8000996:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
 800099a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800099c <__gnu_unwind_pr_common>:
 800099c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80009a0:	460d      	mov	r5, r1
 80009a2:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 80009a4:	b08b      	sub	sp, #44	; 0x2c
 80009a6:	1d0c      	adds	r4, r1, #4
 80009a8:	6809      	ldr	r1, [r1, #0]
 80009aa:	9107      	str	r1, [sp, #28]
 80009ac:	4691      	mov	r9, r2
 80009ae:	9408      	str	r4, [sp, #32]
 80009b0:	f000 0b03 	and.w	fp, r0, #3
 80009b4:	461e      	mov	r6, r3
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d160      	bne.n	8000a7c <__gnu_unwind_pr_common+0xe0>
 80009ba:	0209      	lsls	r1, r1, #8
 80009bc:	2303      	movs	r3, #3
 80009be:	9107      	str	r1, [sp, #28]
 80009c0:	f88d 6025 	strb.w	r6, [sp, #37]	; 0x25
 80009c4:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 80009c8:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 80009ca:	f1bb 0f02 	cmp.w	fp, #2
 80009ce:	bf08      	it	eq
 80009d0:	6bac      	ldreq	r4, [r5, #56]	; 0x38
 80009d2:	f013 0301 	ands.w	r3, r3, #1
 80009d6:	d140      	bne.n	8000a5a <__gnu_unwind_pr_common+0xbe>
 80009d8:	9301      	str	r3, [sp, #4]
 80009da:	f000 0308 	and.w	r3, r0, #8
 80009de:	9303      	str	r3, [sp, #12]
 80009e0:	f8d4 8000 	ldr.w	r8, [r4]
 80009e4:	f1b8 0f00 	cmp.w	r8, #0
 80009e8:	d039      	beq.n	8000a5e <__gnu_unwind_pr_common+0xc2>
 80009ea:	2e02      	cmp	r6, #2
 80009ec:	d043      	beq.n	8000a76 <__gnu_unwind_pr_common+0xda>
 80009ee:	f8b4 8000 	ldrh.w	r8, [r4]
 80009f2:	8867      	ldrh	r7, [r4, #2]
 80009f4:	3404      	adds	r4, #4
 80009f6:	6cab      	ldr	r3, [r5, #72]	; 0x48
 80009f8:	f027 0a01 	bic.w	sl, r7, #1
 80009fc:	210f      	movs	r1, #15
 80009fe:	4648      	mov	r0, r9
 8000a00:	449a      	add	sl, r3
 8000a02:	f7ff ff5f 	bl	80008c4 <_Unwind_GetGR>
 8000a06:	4582      	cmp	sl, r0
 8000a08:	d833      	bhi.n	8000a72 <__gnu_unwind_pr_common+0xd6>
 8000a0a:	f028 0301 	bic.w	r3, r8, #1
 8000a0e:	449a      	add	sl, r3
 8000a10:	4550      	cmp	r0, sl
 8000a12:	bf2c      	ite	cs
 8000a14:	2000      	movcs	r0, #0
 8000a16:	2001      	movcc	r0, #1
 8000a18:	007f      	lsls	r7, r7, #1
 8000a1a:	f007 0702 	and.w	r7, r7, #2
 8000a1e:	f008 0801 	and.w	r8, r8, #1
 8000a22:	ea47 0708 	orr.w	r7, r7, r8
 8000a26:	2f01      	cmp	r7, #1
 8000a28:	d03e      	beq.n	8000aa8 <__gnu_unwind_pr_common+0x10c>
 8000a2a:	d335      	bcc.n	8000a98 <__gnu_unwind_pr_common+0xfc>
 8000a2c:	2f02      	cmp	r7, #2
 8000a2e:	d11c      	bne.n	8000a6a <__gnu_unwind_pr_common+0xce>
 8000a30:	6823      	ldr	r3, [r4, #0]
 8000a32:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000a36:	9202      	str	r2, [sp, #8]
 8000a38:	f1bb 0f00 	cmp.w	fp, #0
 8000a3c:	d176      	bne.n	8000b2c <__gnu_unwind_pr_common+0x190>
 8000a3e:	b128      	cbz	r0, 8000a4c <__gnu_unwind_pr_common+0xb0>
 8000a40:	9903      	ldr	r1, [sp, #12]
 8000a42:	2900      	cmp	r1, #0
 8000a44:	d07e      	beq.n	8000b44 <__gnu_unwind_pr_common+0x1a8>
 8000a46:	2a00      	cmp	r2, #0
 8000a48:	f000 80a6 	beq.w	8000b98 <__gnu_unwind_pr_common+0x1fc>
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	db77      	blt.n	8000b40 <__gnu_unwind_pr_common+0x1a4>
 8000a50:	9b02      	ldr	r3, [sp, #8]
 8000a52:	3301      	adds	r3, #1
 8000a54:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8000a58:	e7c2      	b.n	80009e0 <__gnu_unwind_pr_common+0x44>
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	9301      	str	r3, [sp, #4]
 8000a5e:	2e02      	cmp	r6, #2
 8000a60:	dd3e      	ble.n	8000ae0 <__gnu_unwind_pr_common+0x144>
 8000a62:	f7ff fe17 	bl	8000694 <__gnu_unwind_24bit.isra.1>
 8000a66:	2800      	cmp	r0, #0
 8000a68:	d040      	beq.n	8000aec <__gnu_unwind_pr_common+0x150>
 8000a6a:	2009      	movs	r0, #9
 8000a6c:	b00b      	add	sp, #44	; 0x2c
 8000a6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000a72:	2000      	movs	r0, #0
 8000a74:	e7d0      	b.n	8000a18 <__gnu_unwind_pr_common+0x7c>
 8000a76:	6867      	ldr	r7, [r4, #4]
 8000a78:	3408      	adds	r4, #8
 8000a7a:	e7bc      	b.n	80009f6 <__gnu_unwind_pr_common+0x5a>
 8000a7c:	2b02      	cmp	r3, #2
 8000a7e:	dca3      	bgt.n	80009c8 <__gnu_unwind_pr_common+0x2c>
 8000a80:	0c0b      	lsrs	r3, r1, #16
 8000a82:	b2da      	uxtb	r2, r3
 8000a84:	0409      	lsls	r1, r1, #16
 8000a86:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
 8000a8a:	2302      	movs	r3, #2
 8000a8c:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 8000a90:	9107      	str	r1, [sp, #28]
 8000a92:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8000a96:	e797      	b.n	80009c8 <__gnu_unwind_pr_common+0x2c>
 8000a98:	f1bb 0f00 	cmp.w	fp, #0
 8000a9c:	d002      	beq.n	8000aa4 <__gnu_unwind_pr_common+0x108>
 8000a9e:	2800      	cmp	r0, #0
 8000aa0:	f040 80bd 	bne.w	8000c1e <__gnu_unwind_pr_common+0x282>
 8000aa4:	3404      	adds	r4, #4
 8000aa6:	e79b      	b.n	80009e0 <__gnu_unwind_pr_common+0x44>
 8000aa8:	f1bb 0f00 	cmp.w	fp, #0
 8000aac:	d125      	bne.n	8000afa <__gnu_unwind_pr_common+0x15e>
 8000aae:	b1a8      	cbz	r0, 8000adc <__gnu_unwind_pr_common+0x140>
 8000ab0:	e894 000c 	ldmia.w	r4, {r2, r3}
 8000ab4:	1c99      	adds	r1, r3, #2
 8000ab6:	ea4f 72d2 	mov.w	r2, r2, lsr #31
 8000aba:	d0d6      	beq.n	8000a6a <__gnu_unwind_pr_common+0xce>
 8000abc:	f105 0158 	add.w	r1, r5, #88	; 0x58
 8000ac0:	3301      	adds	r3, #1
 8000ac2:	9106      	str	r1, [sp, #24]
 8000ac4:	f000 80a3 	beq.w	8000c0e <__gnu_unwind_pr_common+0x272>
 8000ac8:	1d20      	adds	r0, r4, #4
 8000aca:	f7ff fddd 	bl	8000688 <_Unwind_decode_typeinfo_ptr.isra.0>
 8000ace:	ab06      	add	r3, sp, #24
 8000ad0:	4601      	mov	r1, r0
 8000ad2:	4628      	mov	r0, r5
 8000ad4:	f002 f974 	bl	8002dc0 <__cxa_type_match>
 8000ad8:	2800      	cmp	r0, #0
 8000ada:	d177      	bne.n	8000bcc <__gnu_unwind_pr_common+0x230>
 8000adc:	3408      	adds	r4, #8
 8000ade:	e77f      	b.n	80009e0 <__gnu_unwind_pr_common+0x44>
 8000ae0:	a907      	add	r1, sp, #28
 8000ae2:	4648      	mov	r0, r9
 8000ae4:	f000 faee 	bl	80010c4 <__gnu_unwind_execute>
 8000ae8:	2800      	cmp	r0, #0
 8000aea:	d1be      	bne.n	8000a6a <__gnu_unwind_pr_common+0xce>
 8000aec:	9b01      	ldr	r3, [sp, #4]
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d15c      	bne.n	8000bac <__gnu_unwind_pr_common+0x210>
 8000af2:	2008      	movs	r0, #8
 8000af4:	b00b      	add	sp, #44	; 0x2c
 8000af6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000afa:	210d      	movs	r1, #13
 8000afc:	4648      	mov	r0, r9
 8000afe:	6a2f      	ldr	r7, [r5, #32]
 8000b00:	f7ff fee0 	bl	80008c4 <_Unwind_GetGR>
 8000b04:	4287      	cmp	r7, r0
 8000b06:	d1e9      	bne.n	8000adc <__gnu_unwind_pr_common+0x140>
 8000b08:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8000b0a:	429c      	cmp	r4, r3
 8000b0c:	d1e6      	bne.n	8000adc <__gnu_unwind_pr_common+0x140>
 8000b0e:	4620      	mov	r0, r4
 8000b10:	f7ff fcf0 	bl	80004f4 <selfrel_offset31>
 8000b14:	210f      	movs	r1, #15
 8000b16:	4602      	mov	r2, r0
 8000b18:	4648      	mov	r0, r9
 8000b1a:	f7ff fef9 	bl	8000910 <_Unwind_SetGR>
 8000b1e:	4648      	mov	r0, r9
 8000b20:	462a      	mov	r2, r5
 8000b22:	2100      	movs	r1, #0
 8000b24:	f7ff fef4 	bl	8000910 <_Unwind_SetGR>
 8000b28:	2007      	movs	r0, #7
 8000b2a:	e79f      	b.n	8000a6c <__gnu_unwind_pr_common+0xd0>
 8000b2c:	210d      	movs	r1, #13
 8000b2e:	4648      	mov	r0, r9
 8000b30:	6a2f      	ldr	r7, [r5, #32]
 8000b32:	f7ff fec7 	bl	80008c4 <_Unwind_GetGR>
 8000b36:	4287      	cmp	r7, r0
 8000b38:	d058      	beq.n	8000bec <__gnu_unwind_pr_common+0x250>
 8000b3a:	6823      	ldr	r3, [r4, #0]
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	da87      	bge.n	8000a50 <__gnu_unwind_pr_common+0xb4>
 8000b40:	3404      	adds	r4, #4
 8000b42:	e785      	b.n	8000a50 <__gnu_unwind_pr_common+0xb4>
 8000b44:	9b02      	ldr	r3, [sp, #8]
 8000b46:	b33b      	cbz	r3, 8000b98 <__gnu_unwind_pr_common+0x1fc>
 8000b48:	f105 0358 	add.w	r3, r5, #88	; 0x58
 8000b4c:	1d27      	adds	r7, r4, #4
 8000b4e:	f8cd b010 	str.w	fp, [sp, #16]
 8000b52:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8000b56:	f8dd a008 	ldr.w	sl, [sp, #8]
 8000b5a:	9605      	str	r6, [sp, #20]
 8000b5c:	46a3      	mov	fp, r4
 8000b5e:	461c      	mov	r4, r3
 8000b60:	e002      	b.n	8000b68 <__gnu_unwind_pr_common+0x1cc>
 8000b62:	45b2      	cmp	sl, r6
 8000b64:	46b0      	mov	r8, r6
 8000b66:	d016      	beq.n	8000b96 <__gnu_unwind_pr_common+0x1fa>
 8000b68:	4638      	mov	r0, r7
 8000b6a:	9406      	str	r4, [sp, #24]
 8000b6c:	f7ff fd8c 	bl	8000688 <_Unwind_decode_typeinfo_ptr.isra.0>
 8000b70:	ab06      	add	r3, sp, #24
 8000b72:	4601      	mov	r1, r0
 8000b74:	2200      	movs	r2, #0
 8000b76:	4628      	mov	r0, r5
 8000b78:	f002 f922 	bl	8002dc0 <__cxa_type_match>
 8000b7c:	f108 0601 	add.w	r6, r8, #1
 8000b80:	3704      	adds	r7, #4
 8000b82:	2800      	cmp	r0, #0
 8000b84:	d0ed      	beq.n	8000b62 <__gnu_unwind_pr_common+0x1c6>
 8000b86:	9b02      	ldr	r3, [sp, #8]
 8000b88:	9e05      	ldr	r6, [sp, #20]
 8000b8a:	4543      	cmp	r3, r8
 8000b8c:	465c      	mov	r4, fp
 8000b8e:	f8dd b010 	ldr.w	fp, [sp, #16]
 8000b92:	d1d2      	bne.n	8000b3a <__gnu_unwind_pr_common+0x19e>
 8000b94:	e000      	b.n	8000b98 <__gnu_unwind_pr_common+0x1fc>
 8000b96:	465c      	mov	r4, fp
 8000b98:	4648      	mov	r0, r9
 8000b9a:	210d      	movs	r1, #13
 8000b9c:	f7ff fe92 	bl	80008c4 <_Unwind_GetGR>
 8000ba0:	9b06      	ldr	r3, [sp, #24]
 8000ba2:	6228      	str	r0, [r5, #32]
 8000ba4:	62ac      	str	r4, [r5, #40]	; 0x28
 8000ba6:	626b      	str	r3, [r5, #36]	; 0x24
 8000ba8:	2006      	movs	r0, #6
 8000baa:	e75f      	b.n	8000a6c <__gnu_unwind_pr_common+0xd0>
 8000bac:	210f      	movs	r1, #15
 8000bae:	4648      	mov	r0, r9
 8000bb0:	f7ff fe88 	bl	80008c4 <_Unwind_GetGR>
 8000bb4:	210e      	movs	r1, #14
 8000bb6:	4602      	mov	r2, r0
 8000bb8:	4648      	mov	r0, r9
 8000bba:	f7ff fea9 	bl	8000910 <_Unwind_SetGR>
 8000bbe:	4648      	mov	r0, r9
 8000bc0:	4a29      	ldr	r2, [pc, #164]	; (8000c68 <__gnu_unwind_pr_common+0x2cc>)
 8000bc2:	210f      	movs	r1, #15
 8000bc4:	f7ff fea4 	bl	8000910 <_Unwind_SetGR>
 8000bc8:	2007      	movs	r0, #7
 8000bca:	e74f      	b.n	8000a6c <__gnu_unwind_pr_common+0xd0>
 8000bcc:	4607      	mov	r7, r0
 8000bce:	210d      	movs	r1, #13
 8000bd0:	4648      	mov	r0, r9
 8000bd2:	f7ff fe77 	bl	80008c4 <_Unwind_GetGR>
 8000bd6:	2f02      	cmp	r7, #2
 8000bd8:	6228      	str	r0, [r5, #32]
 8000bda:	d11d      	bne.n	8000c18 <__gnu_unwind_pr_common+0x27c>
 8000bdc:	462b      	mov	r3, r5
 8000bde:	9a06      	ldr	r2, [sp, #24]
 8000be0:	f843 2f2c 	str.w	r2, [r3, #44]!
 8000be4:	626b      	str	r3, [r5, #36]	; 0x24
 8000be6:	62ac      	str	r4, [r5, #40]	; 0x28
 8000be8:	2006      	movs	r0, #6
 8000bea:	e73f      	b.n	8000a6c <__gnu_unwind_pr_common+0xd0>
 8000bec:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8000bee:	429c      	cmp	r4, r3
 8000bf0:	d1a3      	bne.n	8000b3a <__gnu_unwind_pr_common+0x19e>
 8000bf2:	2204      	movs	r2, #4
 8000bf4:	2700      	movs	r7, #0
 8000bf6:	18a3      	adds	r3, r4, r2
 8000bf8:	9902      	ldr	r1, [sp, #8]
 8000bfa:	62a9      	str	r1, [r5, #40]	; 0x28
 8000bfc:	62ef      	str	r7, [r5, #44]	; 0x2c
 8000bfe:	632a      	str	r2, [r5, #48]	; 0x30
 8000c00:	636b      	str	r3, [r5, #52]	; 0x34
 8000c02:	6823      	ldr	r3, [r4, #0]
 8000c04:	42bb      	cmp	r3, r7
 8000c06:	db1d      	blt.n	8000c44 <__gnu_unwind_pr_common+0x2a8>
 8000c08:	2301      	movs	r3, #1
 8000c0a:	9301      	str	r3, [sp, #4]
 8000c0c:	e720      	b.n	8000a50 <__gnu_unwind_pr_common+0xb4>
 8000c0e:	4648      	mov	r0, r9
 8000c10:	210d      	movs	r1, #13
 8000c12:	f7ff fe57 	bl	80008c4 <_Unwind_GetGR>
 8000c16:	6228      	str	r0, [r5, #32]
 8000c18:	9b06      	ldr	r3, [sp, #24]
 8000c1a:	626b      	str	r3, [r5, #36]	; 0x24
 8000c1c:	e7e3      	b.n	8000be6 <__gnu_unwind_pr_common+0x24a>
 8000c1e:	4620      	mov	r0, r4
 8000c20:	f7ff fc68 	bl	80004f4 <selfrel_offset31>
 8000c24:	3404      	adds	r4, #4
 8000c26:	4606      	mov	r6, r0
 8000c28:	63ac      	str	r4, [r5, #56]	; 0x38
 8000c2a:	4628      	mov	r0, r5
 8000c2c:	f002 f926 	bl	8002e7c <__cxa_begin_cleanup>
 8000c30:	2800      	cmp	r0, #0
 8000c32:	f43f af1a 	beq.w	8000a6a <__gnu_unwind_pr_common+0xce>
 8000c36:	4648      	mov	r0, r9
 8000c38:	4632      	mov	r2, r6
 8000c3a:	210f      	movs	r1, #15
 8000c3c:	f7ff fe68 	bl	8000910 <_Unwind_SetGR>
 8000c40:	2007      	movs	r0, #7
 8000c42:	e713      	b.n	8000a6c <__gnu_unwind_pr_common+0xd0>
 8000c44:	4608      	mov	r0, r1
 8000c46:	3001      	adds	r0, #1
 8000c48:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8000c4c:	f7ff fc52 	bl	80004f4 <selfrel_offset31>
 8000c50:	210f      	movs	r1, #15
 8000c52:	4602      	mov	r2, r0
 8000c54:	4648      	mov	r0, r9
 8000c56:	f7ff fe5b 	bl	8000910 <_Unwind_SetGR>
 8000c5a:	4648      	mov	r0, r9
 8000c5c:	462a      	mov	r2, r5
 8000c5e:	4639      	mov	r1, r7
 8000c60:	f7ff fe56 	bl	8000910 <_Unwind_SetGR>
 8000c64:	2007      	movs	r0, #7
 8000c66:	e701      	b.n	8000a6c <__gnu_unwind_pr_common+0xd0>
 8000c68:	08003693 	.word	0x08003693

08000c6c <__aeabi_unwind_cpp_pr0>:
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	e695      	b.n	800099c <__gnu_unwind_pr_common>

08000c70 <__aeabi_unwind_cpp_pr1>:
 8000c70:	2301      	movs	r3, #1
 8000c72:	e693      	b.n	800099c <__gnu_unwind_pr_common>

08000c74 <__aeabi_unwind_cpp_pr2>:
 8000c74:	2302      	movs	r3, #2
 8000c76:	e691      	b.n	800099c <__gnu_unwind_pr_common>

08000c78 <_Unwind_VRS_Pop>:
 8000c78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c7a:	4604      	mov	r4, r0
 8000c7c:	b0c5      	sub	sp, #276	; 0x114
 8000c7e:	2904      	cmp	r1, #4
 8000c80:	d80d      	bhi.n	8000c9e <_Unwind_VRS_Pop+0x26>
 8000c82:	e8df f001 	tbb	[pc, r1]
 8000c86:	0353      	.short	0x0353
 8000c88:	310c      	.short	0x310c
 8000c8a:	0f          	.byte	0x0f
 8000c8b:	00          	.byte	0x00
 8000c8c:	2b01      	cmp	r3, #1
 8000c8e:	ea4f 4612 	mov.w	r6, r2, lsr #16
 8000c92:	b295      	uxth	r5, r2
 8000c94:	d162      	bne.n	8000d5c <_Unwind_VRS_Pop+0xe4>
 8000c96:	1972      	adds	r2, r6, r5
 8000c98:	2a10      	cmp	r2, #16
 8000c9a:	f240 809b 	bls.w	8000dd4 <_Unwind_VRS_Pop+0x15c>
 8000c9e:	2002      	movs	r0, #2
 8000ca0:	b045      	add	sp, #276	; 0x114
 8000ca2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d1fa      	bne.n	8000c9e <_Unwind_VRS_Pop+0x26>
 8000ca8:	2a10      	cmp	r2, #16
 8000caa:	d8f8      	bhi.n	8000c9e <_Unwind_VRS_Pop+0x26>
 8000cac:	6823      	ldr	r3, [r4, #0]
 8000cae:	06d8      	lsls	r0, r3, #27
 8000cb0:	f100 80c6 	bmi.w	8000e40 <_Unwind_VRS_Pop+0x1c8>
 8000cb4:	ae22      	add	r6, sp, #136	; 0x88
 8000cb6:	4630      	mov	r0, r6
 8000cb8:	9201      	str	r2, [sp, #4]
 8000cba:	f000 f973 	bl	8000fa4 <__gnu_Unwind_Save_WMMXC>
 8000cbe:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8000cc0:	9a01      	ldr	r2, [sp, #4]
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	2501      	movs	r5, #1
 8000cc6:	fa05 f103 	lsl.w	r1, r5, r3
 8000cca:	4211      	tst	r1, r2
 8000ccc:	d003      	beq.n	8000cd6 <_Unwind_VRS_Pop+0x5e>
 8000cce:	6801      	ldr	r1, [r0, #0]
 8000cd0:	f846 1023 	str.w	r1, [r6, r3, lsl #2]
 8000cd4:	3004      	adds	r0, #4
 8000cd6:	3301      	adds	r3, #1
 8000cd8:	2b04      	cmp	r3, #4
 8000cda:	d1f4      	bne.n	8000cc6 <_Unwind_VRS_Pop+0x4e>
 8000cdc:	63a0      	str	r0, [r4, #56]	; 0x38
 8000cde:	4630      	mov	r0, r6
 8000ce0:	f000 f956 	bl	8000f90 <__gnu_Unwind_Restore_WMMXC>
 8000ce4:	2000      	movs	r0, #0
 8000ce6:	e7db      	b.n	8000ca0 <_Unwind_VRS_Pop+0x28>
 8000ce8:	2b03      	cmp	r3, #3
 8000cea:	d1d8      	bne.n	8000c9e <_Unwind_VRS_Pop+0x26>
 8000cec:	0c15      	lsrs	r5, r2, #16
 8000cee:	b297      	uxth	r7, r2
 8000cf0:	19eb      	adds	r3, r5, r7
 8000cf2:	2b10      	cmp	r3, #16
 8000cf4:	d8d3      	bhi.n	8000c9e <_Unwind_VRS_Pop+0x26>
 8000cf6:	6823      	ldr	r3, [r4, #0]
 8000cf8:	071e      	lsls	r6, r3, #28
 8000cfa:	f100 80b5 	bmi.w	8000e68 <_Unwind_VRS_Pop+0x1f0>
 8000cfe:	ae22      	add	r6, sp, #136	; 0x88
 8000d00:	4630      	mov	r0, r6
 8000d02:	f000 f923 	bl	8000f4c <__gnu_Unwind_Save_WMMXD>
 8000d06:	00ed      	lsls	r5, r5, #3
 8000d08:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000d0a:	b14f      	cbz	r7, 8000d20 <_Unwind_VRS_Pop+0xa8>
 8000d0c:	3d04      	subs	r5, #4
 8000d0e:	1971      	adds	r1, r6, r5
 8000d10:	eb03 00c7 	add.w	r0, r3, r7, lsl #3
 8000d14:	f853 2b04 	ldr.w	r2, [r3], #4
 8000d18:	f841 2f04 	str.w	r2, [r1, #4]!
 8000d1c:	4283      	cmp	r3, r0
 8000d1e:	d1f9      	bne.n	8000d14 <_Unwind_VRS_Pop+0x9c>
 8000d20:	4630      	mov	r0, r6
 8000d22:	63a3      	str	r3, [r4, #56]	; 0x38
 8000d24:	f000 f8f0 	bl	8000f08 <__gnu_Unwind_Restore_WMMXD>
 8000d28:	2000      	movs	r0, #0
 8000d2a:	e7b9      	b.n	8000ca0 <_Unwind_VRS_Pop+0x28>
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d1b6      	bne.n	8000c9e <_Unwind_VRS_Pop+0x26>
 8000d30:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8000d32:	b297      	uxth	r7, r2
 8000d34:	1d20      	adds	r0, r4, #4
 8000d36:	2601      	movs	r6, #1
 8000d38:	fa06 f103 	lsl.w	r1, r6, r3
 8000d3c:	4239      	tst	r1, r7
 8000d3e:	f103 0301 	add.w	r3, r3, #1
 8000d42:	d002      	beq.n	8000d4a <_Unwind_VRS_Pop+0xd2>
 8000d44:	6829      	ldr	r1, [r5, #0]
 8000d46:	6001      	str	r1, [r0, #0]
 8000d48:	3504      	adds	r5, #4
 8000d4a:	2b10      	cmp	r3, #16
 8000d4c:	f100 0004 	add.w	r0, r0, #4
 8000d50:	d1f2      	bne.n	8000d38 <_Unwind_VRS_Pop+0xc0>
 8000d52:	f412 5000 	ands.w	r0, r2, #8192	; 0x2000
 8000d56:	d13b      	bne.n	8000dd0 <_Unwind_VRS_Pop+0x158>
 8000d58:	63a5      	str	r5, [r4, #56]	; 0x38
 8000d5a:	e7a1      	b.n	8000ca0 <_Unwind_VRS_Pop+0x28>
 8000d5c:	2b05      	cmp	r3, #5
 8000d5e:	d19e      	bne.n	8000c9e <_Unwind_VRS_Pop+0x26>
 8000d60:	1977      	adds	r7, r6, r5
 8000d62:	2f20      	cmp	r7, #32
 8000d64:	d89b      	bhi.n	8000c9e <_Unwind_VRS_Pop+0x26>
 8000d66:	2e0f      	cmp	r6, #15
 8000d68:	d966      	bls.n	8000e38 <_Unwind_VRS_Pop+0x1c0>
 8000d6a:	462f      	mov	r7, r5
 8000d6c:	2d00      	cmp	r5, #0
 8000d6e:	d13a      	bne.n	8000de6 <_Unwind_VRS_Pop+0x16e>
 8000d70:	462a      	mov	r2, r5
 8000d72:	2700      	movs	r7, #0
 8000d74:	2a00      	cmp	r2, #0
 8000d76:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8000d78:	dd72      	ble.n	8000e60 <_Unwind_VRS_Pop+0x1e8>
 8000d7a:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 8000d7e:	4601      	mov	r1, r0
 8000d80:	a844      	add	r0, sp, #272	; 0x110
 8000d82:	eb00 00c6 	add.w	r0, r0, r6, lsl #3
 8000d86:	388c      	subs	r0, #140	; 0x8c
 8000d88:	f851 5b04 	ldr.w	r5, [r1], #4
 8000d8c:	f840 5f04 	str.w	r5, [r0, #4]!
 8000d90:	4291      	cmp	r1, r2
 8000d92:	d1f9      	bne.n	8000d88 <_Unwind_VRS_Pop+0x110>
 8000d94:	4608      	mov	r0, r1
 8000d96:	b197      	cbz	r7, 8000dbe <_Unwind_VRS_Pop+0x146>
 8000d98:	2e10      	cmp	r6, #16
 8000d9a:	4632      	mov	r2, r6
 8000d9c:	a944      	add	r1, sp, #272	; 0x110
 8000d9e:	bf38      	it	cc
 8000da0:	2210      	movcc	r2, #16
 8000da2:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8000da6:	f5a2 72c4 	sub.w	r2, r2, #392	; 0x188
 8000daa:	0079      	lsls	r1, r7, #1
 8000dac:	3a04      	subs	r2, #4
 8000dae:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8000db2:	f850 5b04 	ldr.w	r5, [r0], #4
 8000db6:	f842 5f04 	str.w	r5, [r2, #4]!
 8000dba:	4288      	cmp	r0, r1
 8000dbc:	d1f9      	bne.n	8000db2 <_Unwind_VRS_Pop+0x13a>
 8000dbe:	2b01      	cmp	r3, #1
 8000dc0:	d048      	beq.n	8000e54 <_Unwind_VRS_Pop+0x1dc>
 8000dc2:	2e0f      	cmp	r6, #15
 8000dc4:	63a1      	str	r1, [r4, #56]	; 0x38
 8000dc6:	d933      	bls.n	8000e30 <_Unwind_VRS_Pop+0x1b8>
 8000dc8:	b117      	cbz	r7, 8000dd0 <_Unwind_VRS_Pop+0x158>
 8000dca:	a802      	add	r0, sp, #8
 8000dcc:	f000 f894 	bl	8000ef8 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8000dd0:	2000      	movs	r0, #0
 8000dd2:	e765      	b.n	8000ca0 <_Unwind_VRS_Pop+0x28>
 8000dd4:	2e0f      	cmp	r6, #15
 8000dd6:	f63f af62 	bhi.w	8000c9e <_Unwind_VRS_Pop+0x26>
 8000dda:	2700      	movs	r7, #0
 8000ddc:	6822      	ldr	r2, [r4, #0]
 8000dde:	07d1      	lsls	r1, r2, #31
 8000de0:	d417      	bmi.n	8000e12 <_Unwind_VRS_Pop+0x19a>
 8000de2:	2f00      	cmp	r7, #0
 8000de4:	d060      	beq.n	8000ea8 <_Unwind_VRS_Pop+0x230>
 8000de6:	6822      	ldr	r2, [r4, #0]
 8000de8:	0751      	lsls	r1, r2, #29
 8000dea:	d445      	bmi.n	8000e78 <_Unwind_VRS_Pop+0x200>
 8000dec:	2b01      	cmp	r3, #1
 8000dee:	d04d      	beq.n	8000e8c <_Unwind_VRS_Pop+0x214>
 8000df0:	2e0f      	cmp	r6, #15
 8000df2:	d806      	bhi.n	8000e02 <_Unwind_VRS_Pop+0x18a>
 8000df4:	a822      	add	r0, sp, #136	; 0x88
 8000df6:	9301      	str	r3, [sp, #4]
 8000df8:	f000 f87a 	bl	8000ef0 <__gnu_Unwind_Save_VFP_D>
 8000dfc:	9b01      	ldr	r3, [sp, #4]
 8000dfe:	2f00      	cmp	r7, #0
 8000e00:	d0b6      	beq.n	8000d70 <_Unwind_VRS_Pop+0xf8>
 8000e02:	a802      	add	r0, sp, #8
 8000e04:	9301      	str	r3, [sp, #4]
 8000e06:	f000 f87b 	bl	8000f00 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8000e0a:	9b01      	ldr	r3, [sp, #4]
 8000e0c:	f1c6 0210 	rsb	r2, r6, #16
 8000e10:	e7b0      	b.n	8000d74 <_Unwind_VRS_Pop+0xfc>
 8000e12:	f022 0101 	bic.w	r1, r2, #1
 8000e16:	2b05      	cmp	r3, #5
 8000e18:	6021      	str	r1, [r4, #0]
 8000e1a:	9301      	str	r3, [sp, #4]
 8000e1c:	4620      	mov	r0, r4
 8000e1e:	d03b      	beq.n	8000e98 <_Unwind_VRS_Pop+0x220>
 8000e20:	f022 0203 	bic.w	r2, r2, #3
 8000e24:	f840 2b48 	str.w	r2, [r0], #72
 8000e28:	f000 f85a 	bl	8000ee0 <__gnu_Unwind_Save_VFP>
 8000e2c:	9b01      	ldr	r3, [sp, #4]
 8000e2e:	e7d8      	b.n	8000de2 <_Unwind_VRS_Pop+0x16a>
 8000e30:	a822      	add	r0, sp, #136	; 0x88
 8000e32:	f000 f859 	bl	8000ee8 <__gnu_Unwind_Restore_VFP_D>
 8000e36:	e7c7      	b.n	8000dc8 <_Unwind_VRS_Pop+0x150>
 8000e38:	2f10      	cmp	r7, #16
 8000e3a:	d9ce      	bls.n	8000dda <_Unwind_VRS_Pop+0x162>
 8000e3c:	3f10      	subs	r7, #16
 8000e3e:	e7cd      	b.n	8000ddc <_Unwind_VRS_Pop+0x164>
 8000e40:	f023 0310 	bic.w	r3, r3, #16
 8000e44:	6023      	str	r3, [r4, #0]
 8000e46:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 8000e4a:	9201      	str	r2, [sp, #4]
 8000e4c:	f000 f8aa 	bl	8000fa4 <__gnu_Unwind_Save_WMMXC>
 8000e50:	9a01      	ldr	r2, [sp, #4]
 8000e52:	e72f      	b.n	8000cb4 <_Unwind_VRS_Pop+0x3c>
 8000e54:	3104      	adds	r1, #4
 8000e56:	63a1      	str	r1, [r4, #56]	; 0x38
 8000e58:	a822      	add	r0, sp, #136	; 0x88
 8000e5a:	f000 f83d 	bl	8000ed8 <__gnu_Unwind_Restore_VFP>
 8000e5e:	e7b7      	b.n	8000dd0 <_Unwind_VRS_Pop+0x158>
 8000e60:	2f00      	cmp	r7, #0
 8000e62:	d199      	bne.n	8000d98 <_Unwind_VRS_Pop+0x120>
 8000e64:	4601      	mov	r1, r0
 8000e66:	e7aa      	b.n	8000dbe <_Unwind_VRS_Pop+0x146>
 8000e68:	f023 0308 	bic.w	r3, r3, #8
 8000e6c:	6023      	str	r3, [r4, #0]
 8000e6e:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 8000e72:	f000 f86b 	bl	8000f4c <__gnu_Unwind_Save_WMMXD>
 8000e76:	e742      	b.n	8000cfe <_Unwind_VRS_Pop+0x86>
 8000e78:	4620      	mov	r0, r4
 8000e7a:	f022 0204 	bic.w	r2, r2, #4
 8000e7e:	f840 2bd0 	str.w	r2, [r0], #208
 8000e82:	9301      	str	r3, [sp, #4]
 8000e84:	f000 f83c 	bl	8000f00 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8000e88:	9b01      	ldr	r3, [sp, #4]
 8000e8a:	e7af      	b.n	8000dec <_Unwind_VRS_Pop+0x174>
 8000e8c:	a822      	add	r0, sp, #136	; 0x88
 8000e8e:	9301      	str	r3, [sp, #4]
 8000e90:	f000 f826 	bl	8000ee0 <__gnu_Unwind_Save_VFP>
 8000e94:	9b01      	ldr	r3, [sp, #4]
 8000e96:	e7b9      	b.n	8000e0c <_Unwind_VRS_Pop+0x194>
 8000e98:	f041 0102 	orr.w	r1, r1, #2
 8000e9c:	f840 1b48 	str.w	r1, [r0], #72
 8000ea0:	f000 f826 	bl	8000ef0 <__gnu_Unwind_Save_VFP_D>
 8000ea4:	9b01      	ldr	r3, [sp, #4]
 8000ea6:	e79c      	b.n	8000de2 <_Unwind_VRS_Pop+0x16a>
 8000ea8:	2b01      	cmp	r3, #1
 8000eaa:	d003      	beq.n	8000eb4 <_Unwind_VRS_Pop+0x23c>
 8000eac:	2e0f      	cmp	r6, #15
 8000eae:	f63f af5f 	bhi.w	8000d70 <_Unwind_VRS_Pop+0xf8>
 8000eb2:	e79f      	b.n	8000df4 <_Unwind_VRS_Pop+0x17c>
 8000eb4:	a822      	add	r0, sp, #136	; 0x88
 8000eb6:	9301      	str	r3, [sp, #4]
 8000eb8:	f000 f812 	bl	8000ee0 <__gnu_Unwind_Save_VFP>
 8000ebc:	9b01      	ldr	r3, [sp, #4]
 8000ebe:	e757      	b.n	8000d70 <_Unwind_VRS_Pop+0xf8>

08000ec0 <__restore_core_regs>:
 8000ec0:	f100 0134 	add.w	r1, r0, #52	; 0x34
 8000ec4:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
 8000ec8:	469c      	mov	ip, r3
 8000eca:	46a6      	mov	lr, r4
 8000ecc:	f84c 5d04 	str.w	r5, [ip, #-4]!
 8000ed0:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 8000ed4:	46e5      	mov	sp, ip
 8000ed6:	bd00      	pop	{pc}

08000ed8 <__gnu_Unwind_Restore_VFP>:
 8000ed8:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop

08000ee0 <__gnu_Unwind_Save_VFP>:
 8000ee0:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop

08000ee8 <__gnu_Unwind_Restore_VFP_D>:
 8000ee8:	ec90 0b20 	vldmia	r0, {d0-d15}
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop

08000ef0 <__gnu_Unwind_Save_VFP_D>:
 8000ef0:	ec80 0b20 	vstmia	r0, {d0-d15}
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop

08000ef8 <__gnu_Unwind_Restore_VFP_D_16_to_31>:
 8000ef8:	ecd0 0b20 	vldmia	r0, {d16-d31}
 8000efc:	4770      	bx	lr
 8000efe:	bf00      	nop

08000f00 <__gnu_Unwind_Save_VFP_D_16_to_31>:
 8000f00:	ecc0 0b20 	vstmia	r0, {d16-d31}
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop

08000f08 <__gnu_Unwind_Restore_WMMXD>:
 8000f08:	ecf0 0102 	ldfe	f0, [r0], #8
 8000f0c:	ecf0 1102 	ldfe	f1, [r0], #8
 8000f10:	ecf0 2102 	ldfe	f2, [r0], #8
 8000f14:	ecf0 3102 	ldfe	f3, [r0], #8
 8000f18:	ecf0 4102 	ldfe	f4, [r0], #8
 8000f1c:	ecf0 5102 	ldfe	f5, [r0], #8
 8000f20:	ecf0 6102 	ldfe	f6, [r0], #8
 8000f24:	ecf0 7102 	ldfe	f7, [r0], #8
 8000f28:	ecf0 8102 	ldfp	f0, [r0], #8
 8000f2c:	ecf0 9102 	ldfp	f1, [r0], #8
 8000f30:	ecf0 a102 	ldfp	f2, [r0], #8
 8000f34:	ecf0 b102 	ldfp	f3, [r0], #8
 8000f38:	ecf0 c102 	ldfp	f4, [r0], #8
 8000f3c:	ecf0 d102 	ldfp	f5, [r0], #8
 8000f40:	ecf0 e102 	ldfp	f6, [r0], #8
 8000f44:	ecf0 f102 	ldfp	f7, [r0], #8
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop

08000f4c <__gnu_Unwind_Save_WMMXD>:
 8000f4c:	ece0 0102 	stfe	f0, [r0], #8
 8000f50:	ece0 1102 	stfe	f1, [r0], #8
 8000f54:	ece0 2102 	stfe	f2, [r0], #8
 8000f58:	ece0 3102 	stfe	f3, [r0], #8
 8000f5c:	ece0 4102 	stfe	f4, [r0], #8
 8000f60:	ece0 5102 	stfe	f5, [r0], #8
 8000f64:	ece0 6102 	stfe	f6, [r0], #8
 8000f68:	ece0 7102 	stfe	f7, [r0], #8
 8000f6c:	ece0 8102 	stfp	f0, [r0], #8
 8000f70:	ece0 9102 	stfp	f1, [r0], #8
 8000f74:	ece0 a102 	stfp	f2, [r0], #8
 8000f78:	ece0 b102 	stfp	f3, [r0], #8
 8000f7c:	ece0 c102 	stfp	f4, [r0], #8
 8000f80:	ece0 d102 	stfp	f5, [r0], #8
 8000f84:	ece0 e102 	stfp	f6, [r0], #8
 8000f88:	ece0 f102 	stfp	f7, [r0], #8
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop

08000f90 <__gnu_Unwind_Restore_WMMXC>:
 8000f90:	fcb0 8101 	ldc2	1, cr8, [r0], #4
 8000f94:	fcb0 9101 	ldc2	1, cr9, [r0], #4
 8000f98:	fcb0 a101 	ldc2	1, cr10, [r0], #4
 8000f9c:	fcb0 b101 	ldc2	1, cr11, [r0], #4
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop

08000fa4 <__gnu_Unwind_Save_WMMXC>:
 8000fa4:	fca0 8101 	stc2	1, cr8, [r0], #4
 8000fa8:	fca0 9101 	stc2	1, cr9, [r0], #4
 8000fac:	fca0 a101 	stc2	1, cr10, [r0], #4
 8000fb0:	fca0 b101 	stc2	1, cr11, [r0], #4
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop

08000fb8 <_Unwind_RaiseException>:
 8000fb8:	46ec      	mov	ip, sp
 8000fba:	b500      	push	{lr}
 8000fbc:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000fc0:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8000fc4:	f04f 0300 	mov.w	r3, #0
 8000fc8:	e92d 000c 	stmdb	sp!, {r2, r3}
 8000fcc:	a901      	add	r1, sp, #4
 8000fce:	f7ff fbf3 	bl	80007b8 <__gnu_Unwind_RaiseException>
 8000fd2:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8000fd6:	b012      	add	sp, #72	; 0x48
 8000fd8:	4770      	bx	lr
 8000fda:	bf00      	nop

08000fdc <_Unwind_Resume>:
 8000fdc:	46ec      	mov	ip, sp
 8000fde:	b500      	push	{lr}
 8000fe0:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000fe4:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8000fe8:	f04f 0300 	mov.w	r3, #0
 8000fec:	e92d 000c 	stmdb	sp!, {r2, r3}
 8000ff0:	a901      	add	r1, sp, #4
 8000ff2:	f7ff fc1b 	bl	800082c <__gnu_Unwind_Resume>
 8000ff6:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8000ffa:	b012      	add	sp, #72	; 0x48
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop

08001000 <_Unwind_Resume_or_Rethrow>:
 8001000:	46ec      	mov	ip, sp
 8001002:	b500      	push	{lr}
 8001004:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001008:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 800100c:	f04f 0300 	mov.w	r3, #0
 8001010:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001014:	a901      	add	r1, sp, #4
 8001016:	f7ff fc2b 	bl	8000870 <__gnu_Unwind_Resume_or_Rethrow>
 800101a:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 800101e:	b012      	add	sp, #72	; 0x48
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop

08001024 <_Unwind_ForcedUnwind>:
 8001024:	46ec      	mov	ip, sp
 8001026:	b500      	push	{lr}
 8001028:	e92d 5000 	stmdb	sp!, {ip, lr}
 800102c:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001030:	f04f 0300 	mov.w	r3, #0
 8001034:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001038:	ab01      	add	r3, sp, #4
 800103a:	f7ff fbed 	bl	8000818 <__gnu_Unwind_ForcedUnwind>
 800103e:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8001042:	b012      	add	sp, #72	; 0x48
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop

08001048 <_Unwind_Backtrace>:
 8001048:	46ec      	mov	ip, sp
 800104a:	b500      	push	{lr}
 800104c:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001050:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001054:	f04f 0300 	mov.w	r3, #0
 8001058:	e92d 000c 	stmdb	sp!, {r2, r3}
 800105c:	aa01      	add	r2, sp, #4
 800105e:	f7ff fc65 	bl	800092c <__gnu_Unwind_Backtrace>
 8001062:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8001066:	b012      	add	sp, #72	; 0x48
 8001068:	4770      	bx	lr
 800106a:	bf00      	nop

0800106c <next_unwind_byte>:
 800106c:	7a02      	ldrb	r2, [r0, #8]
 800106e:	b91a      	cbnz	r2, 8001078 <next_unwind_byte+0xc>
 8001070:	7a43      	ldrb	r3, [r0, #9]
 8001072:	b943      	cbnz	r3, 8001086 <next_unwind_byte+0x1a>
 8001074:	20b0      	movs	r0, #176	; 0xb0
 8001076:	4770      	bx	lr
 8001078:	6803      	ldr	r3, [r0, #0]
 800107a:	3a01      	subs	r2, #1
 800107c:	7202      	strb	r2, [r0, #8]
 800107e:	021a      	lsls	r2, r3, #8
 8001080:	6002      	str	r2, [r0, #0]
 8001082:	0e18      	lsrs	r0, r3, #24
 8001084:	4770      	bx	lr
 8001086:	6842      	ldr	r2, [r0, #4]
 8001088:	3b01      	subs	r3, #1
 800108a:	b410      	push	{r4}
 800108c:	7243      	strb	r3, [r0, #9]
 800108e:	6813      	ldr	r3, [r2, #0]
 8001090:	2103      	movs	r1, #3
 8001092:	1d14      	adds	r4, r2, #4
 8001094:	7201      	strb	r1, [r0, #8]
 8001096:	021a      	lsls	r2, r3, #8
 8001098:	6044      	str	r4, [r0, #4]
 800109a:	6002      	str	r2, [r0, #0]
 800109c:	f85d 4b04 	ldr.w	r4, [sp], #4
 80010a0:	0e18      	lsrs	r0, r3, #24
 80010a2:	4770      	bx	lr

080010a4 <_Unwind_GetGR.constprop.0>:
 80010a4:	b500      	push	{lr}
 80010a6:	b085      	sub	sp, #20
 80010a8:	aa03      	add	r2, sp, #12
 80010aa:	2300      	movs	r3, #0
 80010ac:	9200      	str	r2, [sp, #0]
 80010ae:	4619      	mov	r1, r3
 80010b0:	220c      	movs	r2, #12
 80010b2:	f7ff fbed 	bl	8000890 <_Unwind_VRS_Get>
 80010b6:	9803      	ldr	r0, [sp, #12]
 80010b8:	b005      	add	sp, #20
 80010ba:	f85d fb04 	ldr.w	pc, [sp], #4
 80010be:	bf00      	nop

080010c0 <unwind_UCB_from_context>:
 80010c0:	e7f0      	b.n	80010a4 <_Unwind_GetGR.constprop.0>
 80010c2:	bf00      	nop

080010c4 <__gnu_unwind_execute>:
 80010c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80010c8:	4606      	mov	r6, r0
 80010ca:	b085      	sub	sp, #20
 80010cc:	460f      	mov	r7, r1
 80010ce:	f04f 0800 	mov.w	r8, #0
 80010d2:	4638      	mov	r0, r7
 80010d4:	f7ff ffca 	bl	800106c <next_unwind_byte>
 80010d8:	28b0      	cmp	r0, #176	; 0xb0
 80010da:	4604      	mov	r4, r0
 80010dc:	d023      	beq.n	8001126 <__gnu_unwind_execute+0x62>
 80010de:	0605      	lsls	r5, r0, #24
 80010e0:	d427      	bmi.n	8001132 <__gnu_unwind_execute+0x6e>
 80010e2:	2300      	movs	r3, #0
 80010e4:	f10d 090c 	add.w	r9, sp, #12
 80010e8:	4619      	mov	r1, r3
 80010ea:	0085      	lsls	r5, r0, #2
 80010ec:	220d      	movs	r2, #13
 80010ee:	f8cd 9000 	str.w	r9, [sp]
 80010f2:	4630      	mov	r0, r6
 80010f4:	f7ff fbcc 	bl	8000890 <_Unwind_VRS_Get>
 80010f8:	b2ed      	uxtb	r5, r5
 80010fa:	9b03      	ldr	r3, [sp, #12]
 80010fc:	f8cd 9000 	str.w	r9, [sp]
 8001100:	0660      	lsls	r0, r4, #25
 8001102:	f105 0504 	add.w	r5, r5, #4
 8001106:	bf4c      	ite	mi
 8001108:	1b5d      	submi	r5, r3, r5
 800110a:	18ed      	addpl	r5, r5, r3
 800110c:	2300      	movs	r3, #0
 800110e:	4619      	mov	r1, r3
 8001110:	220d      	movs	r2, #13
 8001112:	4630      	mov	r0, r6
 8001114:	9503      	str	r5, [sp, #12]
 8001116:	f7ff fbe1 	bl	80008dc <_Unwind_VRS_Set>
 800111a:	4638      	mov	r0, r7
 800111c:	f7ff ffa6 	bl	800106c <next_unwind_byte>
 8001120:	28b0      	cmp	r0, #176	; 0xb0
 8001122:	4604      	mov	r4, r0
 8001124:	d1db      	bne.n	80010de <__gnu_unwind_execute+0x1a>
 8001126:	f1b8 0f00 	cmp.w	r8, #0
 800112a:	f000 8095 	beq.w	8001258 <__gnu_unwind_execute+0x194>
 800112e:	2000      	movs	r0, #0
 8001130:	e01c      	b.n	800116c <__gnu_unwind_execute+0xa8>
 8001132:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 8001136:	2b80      	cmp	r3, #128	; 0x80
 8001138:	d05d      	beq.n	80011f6 <__gnu_unwind_execute+0x132>
 800113a:	2b90      	cmp	r3, #144	; 0x90
 800113c:	d019      	beq.n	8001172 <__gnu_unwind_execute+0xae>
 800113e:	2ba0      	cmp	r3, #160	; 0xa0
 8001140:	d02c      	beq.n	800119c <__gnu_unwind_execute+0xd8>
 8001142:	2bb0      	cmp	r3, #176	; 0xb0
 8001144:	d03f      	beq.n	80011c6 <__gnu_unwind_execute+0x102>
 8001146:	2bc0      	cmp	r3, #192	; 0xc0
 8001148:	d06c      	beq.n	8001224 <__gnu_unwind_execute+0x160>
 800114a:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 800114e:	2bd0      	cmp	r3, #208	; 0xd0
 8001150:	d10b      	bne.n	800116a <__gnu_unwind_execute+0xa6>
 8001152:	f000 0207 	and.w	r2, r0, #7
 8001156:	3201      	adds	r2, #1
 8001158:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800115c:	2305      	movs	r3, #5
 800115e:	2101      	movs	r1, #1
 8001160:	4630      	mov	r0, r6
 8001162:	f7ff fd89 	bl	8000c78 <_Unwind_VRS_Pop>
 8001166:	2800      	cmp	r0, #0
 8001168:	d0b3      	beq.n	80010d2 <__gnu_unwind_execute+0xe>
 800116a:	2009      	movs	r0, #9
 800116c:	b005      	add	sp, #20
 800116e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001172:	f000 030d 	and.w	r3, r0, #13
 8001176:	2b0d      	cmp	r3, #13
 8001178:	d0f7      	beq.n	800116a <__gnu_unwind_execute+0xa6>
 800117a:	ad03      	add	r5, sp, #12
 800117c:	2300      	movs	r3, #0
 800117e:	f000 020f 	and.w	r2, r0, #15
 8001182:	4619      	mov	r1, r3
 8001184:	9500      	str	r5, [sp, #0]
 8001186:	4630      	mov	r0, r6
 8001188:	f7ff fb82 	bl	8000890 <_Unwind_VRS_Get>
 800118c:	2300      	movs	r3, #0
 800118e:	9500      	str	r5, [sp, #0]
 8001190:	4619      	mov	r1, r3
 8001192:	220d      	movs	r2, #13
 8001194:	4630      	mov	r0, r6
 8001196:	f7ff fba1 	bl	80008dc <_Unwind_VRS_Set>
 800119a:	e79a      	b.n	80010d2 <__gnu_unwind_execute+0xe>
 800119c:	43c2      	mvns	r2, r0
 800119e:	f002 0307 	and.w	r3, r2, #7
 80011a2:	f44f 627f 	mov.w	r2, #4080	; 0xff0
 80011a6:	411a      	asrs	r2, r3
 80011a8:	0701      	lsls	r1, r0, #28
 80011aa:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
 80011ae:	f04f 0300 	mov.w	r3, #0
 80011b2:	bf48      	it	mi
 80011b4:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
 80011b8:	4619      	mov	r1, r3
 80011ba:	4630      	mov	r0, r6
 80011bc:	f7ff fd5c 	bl	8000c78 <_Unwind_VRS_Pop>
 80011c0:	2800      	cmp	r0, #0
 80011c2:	d1d2      	bne.n	800116a <__gnu_unwind_execute+0xa6>
 80011c4:	e785      	b.n	80010d2 <__gnu_unwind_execute+0xe>
 80011c6:	28b1      	cmp	r0, #177	; 0xb1
 80011c8:	d057      	beq.n	800127a <__gnu_unwind_execute+0x1b6>
 80011ca:	28b2      	cmp	r0, #178	; 0xb2
 80011cc:	d068      	beq.n	80012a0 <__gnu_unwind_execute+0x1dc>
 80011ce:	28b3      	cmp	r0, #179	; 0xb3
 80011d0:	f000 8095 	beq.w	80012fe <__gnu_unwind_execute+0x23a>
 80011d4:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
 80011d8:	2bb4      	cmp	r3, #180	; 0xb4
 80011da:	d0c6      	beq.n	800116a <__gnu_unwind_execute+0xa6>
 80011dc:	f000 0207 	and.w	r2, r0, #7
 80011e0:	3201      	adds	r2, #1
 80011e2:	2301      	movs	r3, #1
 80011e4:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80011e8:	4619      	mov	r1, r3
 80011ea:	4630      	mov	r0, r6
 80011ec:	f7ff fd44 	bl	8000c78 <_Unwind_VRS_Pop>
 80011f0:	2800      	cmp	r0, #0
 80011f2:	d1ba      	bne.n	800116a <__gnu_unwind_execute+0xa6>
 80011f4:	e76d      	b.n	80010d2 <__gnu_unwind_execute+0xe>
 80011f6:	4638      	mov	r0, r7
 80011f8:	f7ff ff38 	bl	800106c <next_unwind_byte>
 80011fc:	0224      	lsls	r4, r4, #8
 80011fe:	4304      	orrs	r4, r0
 8001200:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 8001204:	d0b1      	beq.n	800116a <__gnu_unwind_execute+0xa6>
 8001206:	0124      	lsls	r4, r4, #4
 8001208:	2300      	movs	r3, #0
 800120a:	b2a2      	uxth	r2, r4
 800120c:	4619      	mov	r1, r3
 800120e:	4630      	mov	r0, r6
 8001210:	f7ff fd32 	bl	8000c78 <_Unwind_VRS_Pop>
 8001214:	2800      	cmp	r0, #0
 8001216:	d1a8      	bne.n	800116a <__gnu_unwind_execute+0xa6>
 8001218:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 800121c:	bf18      	it	ne
 800121e:	f04f 0801 	movne.w	r8, #1
 8001222:	e756      	b.n	80010d2 <__gnu_unwind_execute+0xe>
 8001224:	28c6      	cmp	r0, #198	; 0xc6
 8001226:	d07d      	beq.n	8001324 <__gnu_unwind_execute+0x260>
 8001228:	28c7      	cmp	r0, #199	; 0xc7
 800122a:	f000 8086 	beq.w	800133a <__gnu_unwind_execute+0x276>
 800122e:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 8001232:	2bc0      	cmp	r3, #192	; 0xc0
 8001234:	f000 8094 	beq.w	8001360 <__gnu_unwind_execute+0x29c>
 8001238:	28c8      	cmp	r0, #200	; 0xc8
 800123a:	f000 809f 	beq.w	800137c <__gnu_unwind_execute+0x2b8>
 800123e:	28c9      	cmp	r0, #201	; 0xc9
 8001240:	d193      	bne.n	800116a <__gnu_unwind_execute+0xa6>
 8001242:	4638      	mov	r0, r7
 8001244:	f7ff ff12 	bl	800106c <next_unwind_byte>
 8001248:	0302      	lsls	r2, r0, #12
 800124a:	f000 000f 	and.w	r0, r0, #15
 800124e:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
 8001252:	3001      	adds	r0, #1
 8001254:	4302      	orrs	r2, r0
 8001256:	e781      	b.n	800115c <__gnu_unwind_execute+0x98>
 8001258:	ac03      	add	r4, sp, #12
 800125a:	4643      	mov	r3, r8
 800125c:	220e      	movs	r2, #14
 800125e:	4641      	mov	r1, r8
 8001260:	9400      	str	r4, [sp, #0]
 8001262:	4630      	mov	r0, r6
 8001264:	f7ff fb14 	bl	8000890 <_Unwind_VRS_Get>
 8001268:	9400      	str	r4, [sp, #0]
 800126a:	4630      	mov	r0, r6
 800126c:	4643      	mov	r3, r8
 800126e:	220f      	movs	r2, #15
 8001270:	4641      	mov	r1, r8
 8001272:	f7ff fb33 	bl	80008dc <_Unwind_VRS_Set>
 8001276:	4640      	mov	r0, r8
 8001278:	e778      	b.n	800116c <__gnu_unwind_execute+0xa8>
 800127a:	4638      	mov	r0, r7
 800127c:	f7ff fef6 	bl	800106c <next_unwind_byte>
 8001280:	2800      	cmp	r0, #0
 8001282:	f43f af72 	beq.w	800116a <__gnu_unwind_execute+0xa6>
 8001286:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 800128a:	f47f af6e 	bne.w	800116a <__gnu_unwind_execute+0xa6>
 800128e:	4602      	mov	r2, r0
 8001290:	4619      	mov	r1, r3
 8001292:	4630      	mov	r0, r6
 8001294:	f7ff fcf0 	bl	8000c78 <_Unwind_VRS_Pop>
 8001298:	2800      	cmp	r0, #0
 800129a:	f47f af66 	bne.w	800116a <__gnu_unwind_execute+0xa6>
 800129e:	e718      	b.n	80010d2 <__gnu_unwind_execute+0xe>
 80012a0:	2300      	movs	r3, #0
 80012a2:	f10d 090c 	add.w	r9, sp, #12
 80012a6:	220d      	movs	r2, #13
 80012a8:	4619      	mov	r1, r3
 80012aa:	f8cd 9000 	str.w	r9, [sp]
 80012ae:	4630      	mov	r0, r6
 80012b0:	f7ff faee 	bl	8000890 <_Unwind_VRS_Get>
 80012b4:	4638      	mov	r0, r7
 80012b6:	f7ff fed9 	bl	800106c <next_unwind_byte>
 80012ba:	0602      	lsls	r2, r0, #24
 80012bc:	f04f 0402 	mov.w	r4, #2
 80012c0:	d50c      	bpl.n	80012dc <__gnu_unwind_execute+0x218>
 80012c2:	9b03      	ldr	r3, [sp, #12]
 80012c4:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 80012c8:	40a0      	lsls	r0, r4
 80012ca:	4403      	add	r3, r0
 80012cc:	4638      	mov	r0, r7
 80012ce:	9303      	str	r3, [sp, #12]
 80012d0:	f7ff fecc 	bl	800106c <next_unwind_byte>
 80012d4:	0603      	lsls	r3, r0, #24
 80012d6:	f104 0407 	add.w	r4, r4, #7
 80012da:	d4f2      	bmi.n	80012c2 <__gnu_unwind_execute+0x1fe>
 80012dc:	9b03      	ldr	r3, [sp, #12]
 80012de:	f8cd 9000 	str.w	r9, [sp]
 80012e2:	f000 027f 	and.w	r2, r0, #127	; 0x7f
 80012e6:	40a2      	lsls	r2, r4
 80012e8:	f503 7401 	add.w	r4, r3, #516	; 0x204
 80012ec:	2300      	movs	r3, #0
 80012ee:	4414      	add	r4, r2
 80012f0:	4619      	mov	r1, r3
 80012f2:	220d      	movs	r2, #13
 80012f4:	4630      	mov	r0, r6
 80012f6:	9403      	str	r4, [sp, #12]
 80012f8:	f7ff faf0 	bl	80008dc <_Unwind_VRS_Set>
 80012fc:	e6e9      	b.n	80010d2 <__gnu_unwind_execute+0xe>
 80012fe:	4638      	mov	r0, r7
 8001300:	f7ff feb4 	bl	800106c <next_unwind_byte>
 8001304:	0301      	lsls	r1, r0, #12
 8001306:	f000 000f 	and.w	r0, r0, #15
 800130a:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
 800130e:	1c42      	adds	r2, r0, #1
 8001310:	2301      	movs	r3, #1
 8001312:	430a      	orrs	r2, r1
 8001314:	4630      	mov	r0, r6
 8001316:	4619      	mov	r1, r3
 8001318:	f7ff fcae 	bl	8000c78 <_Unwind_VRS_Pop>
 800131c:	2800      	cmp	r0, #0
 800131e:	f47f af24 	bne.w	800116a <__gnu_unwind_execute+0xa6>
 8001322:	e6d6      	b.n	80010d2 <__gnu_unwind_execute+0xe>
 8001324:	4638      	mov	r0, r7
 8001326:	f7ff fea1 	bl	800106c <next_unwind_byte>
 800132a:	0301      	lsls	r1, r0, #12
 800132c:	f000 000f 	and.w	r0, r0, #15
 8001330:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
 8001334:	1c42      	adds	r2, r0, #1
 8001336:	2303      	movs	r3, #3
 8001338:	e7eb      	b.n	8001312 <__gnu_unwind_execute+0x24e>
 800133a:	4638      	mov	r0, r7
 800133c:	f7ff fe96 	bl	800106c <next_unwind_byte>
 8001340:	2800      	cmp	r0, #0
 8001342:	f43f af12 	beq.w	800116a <__gnu_unwind_execute+0xa6>
 8001346:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 800134a:	f47f af0e 	bne.w	800116a <__gnu_unwind_execute+0xa6>
 800134e:	4602      	mov	r2, r0
 8001350:	2104      	movs	r1, #4
 8001352:	4630      	mov	r0, r6
 8001354:	f7ff fc90 	bl	8000c78 <_Unwind_VRS_Pop>
 8001358:	2800      	cmp	r0, #0
 800135a:	f47f af06 	bne.w	800116a <__gnu_unwind_execute+0xa6>
 800135e:	e6b8      	b.n	80010d2 <__gnu_unwind_execute+0xe>
 8001360:	f000 020f 	and.w	r2, r0, #15
 8001364:	3201      	adds	r2, #1
 8001366:	2303      	movs	r3, #3
 8001368:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
 800136c:	4619      	mov	r1, r3
 800136e:	4630      	mov	r0, r6
 8001370:	f7ff fc82 	bl	8000c78 <_Unwind_VRS_Pop>
 8001374:	2800      	cmp	r0, #0
 8001376:	f47f aef8 	bne.w	800116a <__gnu_unwind_execute+0xa6>
 800137a:	e6aa      	b.n	80010d2 <__gnu_unwind_execute+0xe>
 800137c:	4638      	mov	r0, r7
 800137e:	f7ff fe75 	bl	800106c <next_unwind_byte>
 8001382:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
 8001386:	f000 030f 	and.w	r3, r0, #15
 800138a:	3210      	adds	r2, #16
 800138c:	3301      	adds	r3, #1
 800138e:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
 8001392:	e6e3      	b.n	800115c <__gnu_unwind_execute+0x98>

08001394 <__gnu_unwind_frame>:
 8001394:	b510      	push	{r4, lr}
 8001396:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8001398:	b084      	sub	sp, #16
 800139a:	685a      	ldr	r2, [r3, #4]
 800139c:	2003      	movs	r0, #3
 800139e:	f88d 000c 	strb.w	r0, [sp, #12]
 80013a2:	79dc      	ldrb	r4, [r3, #7]
 80013a4:	f88d 400d 	strb.w	r4, [sp, #13]
 80013a8:	0212      	lsls	r2, r2, #8
 80013aa:	3308      	adds	r3, #8
 80013ac:	4608      	mov	r0, r1
 80013ae:	a901      	add	r1, sp, #4
 80013b0:	9201      	str	r2, [sp, #4]
 80013b2:	9302      	str	r3, [sp, #8]
 80013b4:	f7ff fe86 	bl	80010c4 <__gnu_unwind_execute>
 80013b8:	b004      	add	sp, #16
 80013ba:	bd10      	pop	{r4, pc}

080013bc <_Unwind_GetRegionStart>:
 80013bc:	b508      	push	{r3, lr}
 80013be:	f7ff fe7f 	bl	80010c0 <unwind_UCB_from_context>
 80013c2:	6c80      	ldr	r0, [r0, #72]	; 0x48
 80013c4:	bd08      	pop	{r3, pc}
 80013c6:	bf00      	nop

080013c8 <_Unwind_GetLanguageSpecificData>:
 80013c8:	b508      	push	{r3, lr}
 80013ca:	f7ff fe79 	bl	80010c0 <unwind_UCB_from_context>
 80013ce:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 80013d0:	79c3      	ldrb	r3, [r0, #7]
 80013d2:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 80013d6:	3008      	adds	r0, #8
 80013d8:	bd08      	pop	{r3, pc}
 80013da:	bf00      	nop

080013dc <_Unwind_GetTextRelBase>:
 80013dc:	b508      	push	{r3, lr}
 80013de:	f002 f9dd 	bl	800379c <abort>
 80013e2:	bf00      	nop

080013e4 <_Unwind_GetDataRelBase>:
 80013e4:	b508      	push	{r3, lr}
 80013e6:	f7ff fff9 	bl	80013dc <_Unwind_GetTextRelBase>
 80013ea:	bf00      	nop

080013ec <__aeabi_idiv0>:
 80013ec:	4770      	bx	lr
 80013ee:	bf00      	nop

080013f0 <_ZN20MAteeqEmulatedEEPROMC1EjhhtNS_20EMULATED_EEPROM_SIZEE>:
 *      Author: Msc. Eng. Ateeq
 */

#include "MAteeqEmulatedEEPROM.h"

MAteeqEmulatedEEPROM::MAteeqEmulatedEEPROM(unsigned int startAdressOfEEPROMinFlash, unsigned char firstSectorToUse, unsigned char secondSectorToUse, unsigned short eachSectorSizeInKByte, MAteeqEmulatedEEPROM::EMULATED_EEPROM_SIZE desiredEEPROMsize)
 80013f0:	b480      	push	{r7}
 80013f2:	b085      	sub	sp, #20
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	60f8      	str	r0, [r7, #12]
 80013f8:	60b9      	str	r1, [r7, #8]
 80013fa:	4611      	mov	r1, r2
 80013fc:	461a      	mov	r2, r3
 80013fe:	460b      	mov	r3, r1
 8001400:	71fb      	strb	r3, [r7, #7]
 8001402:	4613      	mov	r3, r2
 8001404:	71bb      	strb	r3, [r7, #6]
 8001406:	4a30      	ldr	r2, [pc, #192]	; (80014c8 <_ZN20MAteeqEmulatedEEPROMC1EjhhtNS_20EMULATED_EEPROM_SIZEE+0xd8>)
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	601a      	str	r2, [r3, #0]
{
	this->EMULATED_EEPROM_DEFINITION_PAGE_SIZE = eachSectorSizeInKByte * 1024;
 800140c:	8b3b      	ldrh	r3, [r7, #24]
 800140e:	029b      	lsls	r3, r3, #10
 8001410:	461a      	mov	r2, r3
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	605a      	str	r2, [r3, #4]

	this->EMULATED_EEPROM_DEFINITION_EEPROM_START_ADDRESS = startAdressOfEEPROMinFlash;
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	68ba      	ldr	r2, [r7, #8]
 800141a:	609a      	str	r2, [r3, #8]

	this->EMULATED_EEPROM_DEFINITION_PAGE0_BASE_ADDRESS = this->EMULATED_EEPROM_DEFINITION_EEPROM_START_ADDRESS + 0x0000;
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	689a      	ldr	r2, [r3, #8]
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	60da      	str	r2, [r3, #12]
	this->EMULATED_EEPROM_DEFINITION_PAGE0_END_ADDRESS  = this->EMULATED_EEPROM_DEFINITION_EEPROM_START_ADDRESS + (this->EMULATED_EEPROM_DEFINITION_PAGE_SIZE - 1);
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	689a      	ldr	r2, [r3, #8]
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	4413      	add	r3, r2
 800142e:	1e5a      	subs	r2, r3, #1
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	611a      	str	r2, [r3, #16]
	this->EMULATED_EEPROM_DEFINITION_PAGE0_ID = firstSectorToUse;
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	79fa      	ldrb	r2, [r7, #7]
 8001438:	751a      	strb	r2, [r3, #20]

	this->EMULATED_EEPROM_DEFINITION_PAGE1_BASE_ADDRESS = this->EMULATED_EEPROM_DEFINITION_EEPROM_START_ADDRESS + this->EMULATED_EEPROM_DEFINITION_PAGE_SIZE;
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	689a      	ldr	r2, [r3, #8]
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	441a      	add	r2, r3
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	619a      	str	r2, [r3, #24]
	this->EMULATED_EEPROM_DEFINITION_PAGE1_END_ADDRESS  = this->EMULATED_EEPROM_DEFINITION_EEPROM_START_ADDRESS + (2 * this->EMULATED_EEPROM_DEFINITION_PAGE_SIZE - 1);
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	689a      	ldr	r2, [r3, #8]
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	005b      	lsls	r3, r3, #1
 8001452:	4413      	add	r3, r2
 8001454:	1e5a      	subs	r2, r3, #1
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	61da      	str	r2, [r3, #28]
	this->EMULATED_EEPROM_DEFINITION_PAGE1_ID = secondSectorToUse;
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	79ba      	ldrb	r2, [r7, #6]
 800145e:	f883 2020 	strb.w	r2, [r3, #32]

	switch (desiredEEPROMsize)
 8001462:	7f3b      	ldrb	r3, [r7, #28]
 8001464:	3b01      	subs	r3, #1
 8001466:	2b03      	cmp	r3, #3
 8001468:	d81d      	bhi.n	80014a6 <_ZN20MAteeqEmulatedEEPROMC1EjhhtNS_20EMULATED_EEPROM_SIZEE+0xb6>
 800146a:	a201      	add	r2, pc, #4	; (adr r2, 8001470 <_ZN20MAteeqEmulatedEEPROMC1EjhhtNS_20EMULATED_EEPROM_SIZEE+0x80>)
 800146c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001470:	0800149d 	.word	0x0800149d
 8001474:	08001493 	.word	0x08001493
 8001478:	08001489 	.word	0x08001489
 800147c:	08001481 	.word	0x08001481
	{
		case MAteeqEmulatedEEPROM::EMULATED_EEPROM_SIZE_4KB:
			VirtAddVarTab[0] = 0x0000;
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	2200      	movs	r2, #0
 8001484:	845a      	strh	r2, [r3, #34]	; 0x22
			break;
 8001486:	e00f      	b.n	80014a8 <_ZN20MAteeqEmulatedEEPROMC1EjhhtNS_20EMULATED_EEPROM_SIZEE+0xb8>

		case MAteeqEmulatedEEPROM::EMULATED_EEPROM_SIZE_3KB:
			VirtAddVarTab[0] = 0x4000;
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800148e:	845a      	strh	r2, [r3, #34]	; 0x22
			break;
 8001490:	e00a      	b.n	80014a8 <_ZN20MAteeqEmulatedEEPROMC1EjhhtNS_20EMULATED_EEPROM_SIZEE+0xb8>

		case MAteeqEmulatedEEPROM::EMULATED_EEPROM_SIZE_2KB:
			VirtAddVarTab[0] = 0x8000;
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001498:	845a      	strh	r2, [r3, #34]	; 0x22
			break;
 800149a:	e005      	b.n	80014a8 <_ZN20MAteeqEmulatedEEPROMC1EjhhtNS_20EMULATED_EEPROM_SIZEE+0xb8>

		case MAteeqEmulatedEEPROM::EMULATED_EEPROM_SIZE_1KB:
			VirtAddVarTab[0] = 0xC000;
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80014a2:	845a      	strh	r2, [r3, #34]	; 0x22
			break;
 80014a4:	e000      	b.n	80014a8 <_ZN20MAteeqEmulatedEEPROMC1EjhhtNS_20EMULATED_EEPROM_SIZEE+0xb8>

		default:
			break;
 80014a6:	bf00      	nop
	}

	VarDataTab[0] = 0;
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	2200      	movs	r2, #0
 80014ac:	849a      	strh	r2, [r3, #36]	; 0x24

	VarValue = 0;
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	2200      	movs	r2, #0
 80014b2:	84da      	strh	r2, [r3, #38]	; 0x26
	DataVar = 0;
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	2200      	movs	r2, #0
 80014b8:	851a      	strh	r2, [r3, #40]	; 0x28
}
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	4618      	mov	r0, r3
 80014be:	3714      	adds	r7, #20
 80014c0:	46bd      	mov	sp, r7
 80014c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c6:	4770      	bx	lr
 80014c8:	08003aa0 	.word	0x08003aa0

080014cc <_ZN20MAteeqEmulatedEEPROMD1Ev>:

MAteeqEmulatedEEPROM::~MAteeqEmulatedEEPROM()
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b082      	sub	sp, #8
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
 80014d4:	4a04      	ldr	r2, [pc, #16]	; (80014e8 <_ZN20MAteeqEmulatedEEPROMD1Ev+0x1c>)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	601a      	str	r2, [r3, #0]
{
	HAL_FLASH_Lock(); 	// Lock the Flash Program Erase controller
 80014da:	f000 fef9 	bl	80022d0 <HAL_FLASH_Lock>
}
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	4618      	mov	r0, r3
 80014e2:	3708      	adds	r7, #8
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	08003aa0 	.word	0x08003aa0

080014ec <_ZN20MAteeqEmulatedEEPROMD0Ev>:
MAteeqEmulatedEEPROM::~MAteeqEmulatedEEPROM()
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b082      	sub	sp, #8
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
}
 80014f4:	6878      	ldr	r0, [r7, #4]
 80014f6:	f7ff ffe9 	bl	80014cc <_ZN20MAteeqEmulatedEEPROMD1Ev>
 80014fa:	6878      	ldr	r0, [r7, #4]
 80014fc:	f001 fc29 	bl	8002d52 <_ZdlPv>
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	4618      	mov	r0, r3
 8001504:	3708      	adds	r7, #8
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}

0800150a <_ZN20MAteeqEmulatedEEPROM4InitEv>:

bool MAteeqEmulatedEEPROM::Init()
{
 800150a:	b580      	push	{r7, lr}
 800150c:	b082      	sub	sp, #8
 800150e:	af00      	add	r7, sp, #0
 8001510:	6078      	str	r0, [r7, #4]
	HAL_FLASH_Unlock(); // Unlock the Flash Program Erase controller
 8001512:	f000 fecb 	bl	80022ac <HAL_FLASH_Unlock>

	if (this->EE_Init() != MAteeqEmulatedEEPROM::EMULATED_EEPROM_STATUS_OK)
 8001516:	6878      	ldr	r0, [r7, #4]
 8001518:	f000 fad0 	bl	8001abc <_ZN20MAteeqEmulatedEEPROM7EE_InitEv>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	bf14      	ite	ne
 8001522:	2301      	movne	r3, #1
 8001524:	2300      	moveq	r3, #0
 8001526:	b2db      	uxtb	r3, r3
 8001528:	2b00      	cmp	r3, #0
 800152a:	d001      	beq.n	8001530 <_ZN20MAteeqEmulatedEEPROM4InitEv+0x26>
	{
		return false;
 800152c:	2300      	movs	r3, #0
 800152e:	e000      	b.n	8001532 <_ZN20MAteeqEmulatedEEPROM4InitEv+0x28>
	}

	return true;
 8001530:	2301      	movs	r3, #1
}
 8001532:	4618      	mov	r0, r3
 8001534:	3708      	adds	r7, #8
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}

0800153a <_ZN20MAteeqEmulatedEEPROM7GetCharEj>:

unsigned char MAteeqEmulatedEEPROM::GetChar(unsigned int addr)
{
 800153a:	b580      	push	{r7, lr}
 800153c:	b082      	sub	sp, #8
 800153e:	af00      	add	r7, sp, #0
 8001540:	6078      	str	r0, [r7, #4]
 8001542:	6039      	str	r1, [r7, #0]
	this->EE_ReadVariable(this->VirtAddVarTab[0]+addr,  &VarDataTab[0]);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	b29b      	uxth	r3, r3
 800154c:	4413      	add	r3, r2
 800154e:	b299      	uxth	r1, r3
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	3324      	adds	r3, #36	; 0x24
 8001554:	461a      	mov	r2, r3
 8001556:	6878      	ldr	r0, [r7, #4]
 8001558:	f000 fd0a 	bl	8001f70 <_ZN20MAteeqEmulatedEEPROM15EE_ReadVariableEtPt>
	this->DataVar = VarDataTab[0];
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	851a      	strh	r2, [r3, #40]	; 0x28

	return this->DataVar;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001568:	b2db      	uxtb	r3, r3
}
 800156a:	4618      	mov	r0, r3
 800156c:	3708      	adds	r7, #8
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}

08001572 <_ZN20MAteeqEmulatedEEPROM7PutCharEjh>:

bool MAteeqEmulatedEEPROM::PutChar(unsigned int addr, unsigned char new_value)
{
 8001572:	b580      	push	{r7, lr}
 8001574:	b084      	sub	sp, #16
 8001576:	af00      	add	r7, sp, #0
 8001578:	60f8      	str	r0, [r7, #12]
 800157a:	60b9      	str	r1, [r7, #8]
 800157c:	4613      	mov	r3, r2
 800157e:	71fb      	strb	r3, [r7, #7]
	this->VarValue = new_value;
 8001580:	79fb      	ldrb	r3, [r7, #7]
 8001582:	b29a      	uxth	r2, r3
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	84da      	strh	r2, [r3, #38]	; 0x26
	if (this->EE_WriteVariable(this->VirtAddVarTab[0]+addr, this->VarValue) != MAteeqEmulatedEEPROM::EMULATED_EEPROM_STATUS_OK)
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 800158c:	68bb      	ldr	r3, [r7, #8]
 800158e:	b29b      	uxth	r3, r3
 8001590:	4413      	add	r3, r2
 8001592:	b299      	uxth	r1, r3
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001598:	461a      	mov	r2, r3
 800159a:	68f8      	ldr	r0, [r7, #12]
 800159c:	f000 fd3a 	bl	8002014 <_ZN20MAteeqEmulatedEEPROM16EE_WriteVariableEtt>
 80015a0:	4603      	mov	r3, r0
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	bf14      	ite	ne
 80015a6:	2301      	movne	r3, #1
 80015a8:	2300      	moveq	r3, #0
 80015aa:	b2db      	uxtb	r3, r3
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d001      	beq.n	80015b4 <_ZN20MAteeqEmulatedEEPROM7PutCharEjh+0x42>
	{
		return false;
 80015b0:	2300      	movs	r3, #0
 80015b2:	e000      	b.n	80015b6 <_ZN20MAteeqEmulatedEEPROM7PutCharEjh+0x44>
	}

	return true;
 80015b4:	2301      	movs	r3, #1
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	3710      	adds	r7, #16
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}

080015be <_ZN20MAteeqEmulatedEEPROM26MemcpyToEEPROMwithChecksumEjPcj>:

void MAteeqEmulatedEEPROM::MemcpyToEEPROMwithChecksum(unsigned int destination, char *source, unsigned int size)
{
 80015be:	b580      	push	{r7, lr}
 80015c0:	b086      	sub	sp, #24
 80015c2:	af00      	add	r7, sp, #0
 80015c4:	60f8      	str	r0, [r7, #12]
 80015c6:	60b9      	str	r1, [r7, #8]
 80015c8:	607a      	str	r2, [r7, #4]
 80015ca:	603b      	str	r3, [r7, #0]
	unsigned char checksum = 0;
 80015cc:	2300      	movs	r3, #0
 80015ce:	75fb      	strb	r3, [r7, #23]

	for( ; size > 0; size--)
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d01f      	beq.n	8001616 <_ZN20MAteeqEmulatedEEPROM26MemcpyToEEPROMwithChecksumEjPcj+0x58>
	{
		checksum = (checksum << 1) || (checksum >> 7);
 80015d6:	7dfb      	ldrb	r3, [r7, #23]
 80015d8:	005b      	lsls	r3, r3, #1
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d103      	bne.n	80015e6 <_ZN20MAteeqEmulatedEEPROM26MemcpyToEEPROMwithChecksumEjPcj+0x28>
 80015de:	7dfb      	ldrb	r3, [r7, #23]
 80015e0:	11db      	asrs	r3, r3, #7
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d001      	beq.n	80015ea <_ZN20MAteeqEmulatedEEPROM26MemcpyToEEPROMwithChecksumEjPcj+0x2c>
 80015e6:	2301      	movs	r3, #1
 80015e8:	e000      	b.n	80015ec <_ZN20MAteeqEmulatedEEPROM26MemcpyToEEPROMwithChecksumEjPcj+0x2e>
 80015ea:	2300      	movs	r3, #0
 80015ec:	75fb      	strb	r3, [r7, #23]
		checksum += *source;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	781a      	ldrb	r2, [r3, #0]
 80015f2:	7dfb      	ldrb	r3, [r7, #23]
 80015f4:	4413      	add	r3, r2
 80015f6:	75fb      	strb	r3, [r7, #23]

		this->PutChar(destination++, *(source++));
 80015f8:	68b9      	ldr	r1, [r7, #8]
 80015fa:	1c4b      	adds	r3, r1, #1
 80015fc:	60bb      	str	r3, [r7, #8]
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	1c5a      	adds	r2, r3, #1
 8001602:	607a      	str	r2, [r7, #4]
 8001604:	781b      	ldrb	r3, [r3, #0]
 8001606:	461a      	mov	r2, r3
 8001608:	68f8      	ldr	r0, [r7, #12]
 800160a:	f7ff ffb2 	bl	8001572 <_ZN20MAteeqEmulatedEEPROM7PutCharEjh>
	for( ; size > 0; size--)
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	3b01      	subs	r3, #1
 8001612:	603b      	str	r3, [r7, #0]
 8001614:	e7dc      	b.n	80015d0 <_ZN20MAteeqEmulatedEEPROM26MemcpyToEEPROMwithChecksumEjPcj+0x12>
	}

	this->PutChar(destination, checksum);
 8001616:	7dfb      	ldrb	r3, [r7, #23]
 8001618:	461a      	mov	r2, r3
 800161a:	68b9      	ldr	r1, [r7, #8]
 800161c:	68f8      	ldr	r0, [r7, #12]
 800161e:	f7ff ffa8 	bl	8001572 <_ZN20MAteeqEmulatedEEPROM7PutCharEjh>
}
 8001622:	bf00      	nop
 8001624:	3718      	adds	r7, #24
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}

0800162a <_ZN20MAteeqEmulatedEEPROM28MemcpyFromEEPROMwithChecksumEPcjj>:

bool MAteeqEmulatedEEPROM::MemcpyFromEEPROMwithChecksum(char *destination, unsigned int source, unsigned int size)
{
 800162a:	b580      	push	{r7, lr}
 800162c:	b086      	sub	sp, #24
 800162e:	af00      	add	r7, sp, #0
 8001630:	60f8      	str	r0, [r7, #12]
 8001632:	60b9      	str	r1, [r7, #8]
 8001634:	607a      	str	r2, [r7, #4]
 8001636:	603b      	str	r3, [r7, #0]
	unsigned char data;
	unsigned char checksum = 0;
 8001638:	2300      	movs	r3, #0
 800163a:	75fb      	strb	r3, [r7, #23]

	for( ; size > 0; size--)
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d021      	beq.n	8001686 <_ZN20MAteeqEmulatedEEPROM28MemcpyFromEEPROMwithChecksumEPcjj+0x5c>
	{
		data = this->GetChar(source++);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	1c5a      	adds	r2, r3, #1
 8001646:	607a      	str	r2, [r7, #4]
 8001648:	4619      	mov	r1, r3
 800164a:	68f8      	ldr	r0, [r7, #12]
 800164c:	f7ff ff75 	bl	800153a <_ZN20MAteeqEmulatedEEPROM7GetCharEj>
 8001650:	4603      	mov	r3, r0
 8001652:	75bb      	strb	r3, [r7, #22]
		checksum = (checksum << 1) || (checksum >> 7);
 8001654:	7dfb      	ldrb	r3, [r7, #23]
 8001656:	005b      	lsls	r3, r3, #1
 8001658:	2b00      	cmp	r3, #0
 800165a:	d103      	bne.n	8001664 <_ZN20MAteeqEmulatedEEPROM28MemcpyFromEEPROMwithChecksumEPcjj+0x3a>
 800165c:	7dfb      	ldrb	r3, [r7, #23]
 800165e:	11db      	asrs	r3, r3, #7
 8001660:	2b00      	cmp	r3, #0
 8001662:	d001      	beq.n	8001668 <_ZN20MAteeqEmulatedEEPROM28MemcpyFromEEPROMwithChecksumEPcjj+0x3e>
 8001664:	2301      	movs	r3, #1
 8001666:	e000      	b.n	800166a <_ZN20MAteeqEmulatedEEPROM28MemcpyFromEEPROMwithChecksumEPcjj+0x40>
 8001668:	2300      	movs	r3, #0
 800166a:	75fb      	strb	r3, [r7, #23]
		checksum += data;
 800166c:	7dfa      	ldrb	r2, [r7, #23]
 800166e:	7dbb      	ldrb	r3, [r7, #22]
 8001670:	4413      	add	r3, r2
 8001672:	75fb      	strb	r3, [r7, #23]
		*(destination++) = data;
 8001674:	68bb      	ldr	r3, [r7, #8]
 8001676:	1c5a      	adds	r2, r3, #1
 8001678:	60ba      	str	r2, [r7, #8]
 800167a:	7dba      	ldrb	r2, [r7, #22]
 800167c:	701a      	strb	r2, [r3, #0]
	for( ; size > 0; size--)
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	3b01      	subs	r3, #1
 8001682:	603b      	str	r3, [r7, #0]
 8001684:	e7da      	b.n	800163c <_ZN20MAteeqEmulatedEEPROM28MemcpyFromEEPROMwithChecksumEPcjj+0x12>
	}

	if (checksum == this->GetChar(source))
 8001686:	6879      	ldr	r1, [r7, #4]
 8001688:	68f8      	ldr	r0, [r7, #12]
 800168a:	f7ff ff56 	bl	800153a <_ZN20MAteeqEmulatedEEPROM7GetCharEj>
 800168e:	4603      	mov	r3, r0
 8001690:	461a      	mov	r2, r3
 8001692:	7dfb      	ldrb	r3, [r7, #23]
 8001694:	4293      	cmp	r3, r2
 8001696:	bf0c      	ite	eq
 8001698:	2301      	moveq	r3, #1
 800169a:	2300      	movne	r3, #0
 800169c:	b2db      	uxtb	r3, r3
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d001      	beq.n	80016a6 <_ZN20MAteeqEmulatedEEPROM28MemcpyFromEEPROMwithChecksumEPcjj+0x7c>
	{
		return true;
 80016a2:	2301      	movs	r3, #1
 80016a4:	e000      	b.n	80016a8 <_ZN20MAteeqEmulatedEEPROM28MemcpyFromEEPROMwithChecksumEPcjj+0x7e>
	}
	return false;
 80016a6:	2300      	movs	r3, #0
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	3718      	adds	r7, #24
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}

080016b0 <_ZN20MAteeqEmulatedEEPROM9EE_FormatEv>:

MAteeqEmulatedEEPROM::EMULATED_EEPROM_STATUS MAteeqEmulatedEEPROM::EE_Format()
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b08a      	sub	sp, #40	; 0x28
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef FlashStatus = HAL_OK;
 80016b8:	2300      	movs	r3, #0
 80016ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint32_t SectorError = 0;
 80016be:	2300      	movs	r3, #0
 80016c0:	623b      	str	r3, [r7, #32]
	FLASH_EraseInitTypeDef pEraseInit;

	pEraseInit.TypeErase = FLASH_TYPEERASE_SECTORS;
 80016c2:	2300      	movs	r3, #0
 80016c4:	60fb      	str	r3, [r7, #12]
	pEraseInit.Sector = this->EMULATED_EEPROM_DEFINITION_PAGE0_ID;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	7d1b      	ldrb	r3, [r3, #20]
 80016ca:	617b      	str	r3, [r7, #20]
	pEraseInit.NbSectors = 1;
 80016cc:	2301      	movs	r3, #1
 80016ce:	61bb      	str	r3, [r7, #24]
	pEraseInit.VoltageRange = MAteeqEmulatedEEPROM::EMULATED_EEPROM_DEFINITION_VOLTAGE_RANGE;
 80016d0:	2302      	movs	r3, #2
 80016d2:	61fb      	str	r3, [r7, #28]
	/* Erase Page0 */
	if (!this->EE_VerifyPageFullyErased(this->EMULATED_EEPROM_DEFINITION_PAGE0_BASE_ADDRESS))
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	68db      	ldr	r3, [r3, #12]
 80016d8:	4619      	mov	r1, r3
 80016da:	6878      	ldr	r0, [r7, #4]
 80016dc:	f000 f9c8 	bl	8001a70 <_ZN20MAteeqEmulatedEEPROM24EE_VerifyPageFullyErasedEj>
 80016e0:	4603      	mov	r3, r0
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	bf0c      	ite	eq
 80016e6:	2301      	moveq	r3, #1
 80016e8:	2300      	movne	r3, #0
 80016ea:	b2db      	uxtb	r3, r3
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d011      	beq.n	8001714 <_ZN20MAteeqEmulatedEEPROM9EE_FormatEv+0x64>
	{
		FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 80016f0:	f107 0220 	add.w	r2, r7, #32
 80016f4:	f107 030c 	add.w	r3, r7, #12
 80016f8:	4611      	mov	r1, r2
 80016fa:	4618      	mov	r0, r3
 80016fc:	f000 fec8 	bl	8002490 <HAL_FLASHEx_Erase>
 8001700:	4603      	mov	r3, r0
 8001702:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		/* If erase operation was failed, a Flash error code is returned */
		if ((MAteeqEmulatedEEPROM::EMULATED_EEPROM_STATUS)FlashStatus != MAteeqEmulatedEEPROM::EMULATED_EEPROM_STATUS_OK)
 8001706:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800170a:	2b00      	cmp	r3, #0
 800170c:	d002      	beq.n	8001714 <_ZN20MAteeqEmulatedEEPROM9EE_FormatEv+0x64>
		{
			return (MAteeqEmulatedEEPROM::EMULATED_EEPROM_STATUS)FlashStatus;
 800170e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001712:	e037      	b.n	8001784 <_ZN20MAteeqEmulatedEEPROM9EE_FormatEv+0xd4>
		}
	}
	/* Set Page0 as valid page: Write VALID_PAGE at Page0 base address */
	FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, this->EMULATED_EEPROM_DEFINITION_PAGE0_BASE_ADDRESS, MAteeqEmulatedEEPROM::EMULATED_EEPROM_DEFINITION_VALID_PAGE);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	68d9      	ldr	r1, [r3, #12]
 8001718:	f04f 0200 	mov.w	r2, #0
 800171c:	f04f 0300 	mov.w	r3, #0
 8001720:	2001      	movs	r0, #1
 8001722:	f000 fe09 	bl	8002338 <HAL_FLASH_Program>
 8001726:	4603      	mov	r3, r0
 8001728:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	/* If program operation was failed, a Flash error code is returned */
	if ((MAteeqEmulatedEEPROM::EMULATED_EEPROM_STATUS)FlashStatus != MAteeqEmulatedEEPROM::EMULATED_EEPROM_STATUS_OK)
 800172c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001730:	2b00      	cmp	r3, #0
 8001732:	d002      	beq.n	800173a <_ZN20MAteeqEmulatedEEPROM9EE_FormatEv+0x8a>
	{
		return (MAteeqEmulatedEEPROM::EMULATED_EEPROM_STATUS)FlashStatus;
 8001734:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001738:	e024      	b.n	8001784 <_ZN20MAteeqEmulatedEEPROM9EE_FormatEv+0xd4>
	}

	pEraseInit.Sector = this->EMULATED_EEPROM_DEFINITION_PAGE1_ID;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001740:	617b      	str	r3, [r7, #20]
	/* Erase Page1 */
	if (!this->EE_VerifyPageFullyErased(this->EMULATED_EEPROM_DEFINITION_PAGE1_BASE_ADDRESS))
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	699b      	ldr	r3, [r3, #24]
 8001746:	4619      	mov	r1, r3
 8001748:	6878      	ldr	r0, [r7, #4]
 800174a:	f000 f991 	bl	8001a70 <_ZN20MAteeqEmulatedEEPROM24EE_VerifyPageFullyErasedEj>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
 8001752:	bf0c      	ite	eq
 8001754:	2301      	moveq	r3, #1
 8001756:	2300      	movne	r3, #0
 8001758:	b2db      	uxtb	r3, r3
 800175a:	2b00      	cmp	r3, #0
 800175c:	d011      	beq.n	8001782 <_ZN20MAteeqEmulatedEEPROM9EE_FormatEv+0xd2>
	{
		FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 800175e:	f107 0220 	add.w	r2, r7, #32
 8001762:	f107 030c 	add.w	r3, r7, #12
 8001766:	4611      	mov	r1, r2
 8001768:	4618      	mov	r0, r3
 800176a:	f000 fe91 	bl	8002490 <HAL_FLASHEx_Erase>
 800176e:	4603      	mov	r3, r0
 8001770:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		/* If erase operation was failed, a Flash error code is returned */
		if ((MAteeqEmulatedEEPROM::EMULATED_EEPROM_STATUS)FlashStatus != MAteeqEmulatedEEPROM::EMULATED_EEPROM_STATUS_OK)
 8001774:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001778:	2b00      	cmp	r3, #0
 800177a:	d002      	beq.n	8001782 <_ZN20MAteeqEmulatedEEPROM9EE_FormatEv+0xd2>
		{
			return (MAteeqEmulatedEEPROM::EMULATED_EEPROM_STATUS)FlashStatus;
 800177c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001780:	e000      	b.n	8001784 <_ZN20MAteeqEmulatedEEPROM9EE_FormatEv+0xd4>
		}
	}

	return MAteeqEmulatedEEPROM::EMULATED_EEPROM_STATUS_OK;
 8001782:	2300      	movs	r3, #0
}
 8001784:	4618      	mov	r0, r3
 8001786:	3728      	adds	r7, #40	; 0x28
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}

0800178c <_ZN20MAteeqEmulatedEEPROM16EE_FindValidPageEt>:
unsigned short MAteeqEmulatedEEPROM::EE_FindValidPage(unsigned short Operation)
{
 800178c:	b480      	push	{r7}
 800178e:	b085      	sub	sp, #20
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
 8001794:	460b      	mov	r3, r1
 8001796:	807b      	strh	r3, [r7, #2]
	unsigned short PageStatus0 = 6, PageStatus1 = 6;
 8001798:	2306      	movs	r3, #6
 800179a:	81fb      	strh	r3, [r7, #14]
 800179c:	2306      	movs	r3, #6
 800179e:	81bb      	strh	r3, [r7, #12]

	/* Get Page0 actual status */
	PageStatus0 = (*(__IO unsigned short*) this->EMULATED_EEPROM_DEFINITION_PAGE0_BASE_ADDRESS);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	68db      	ldr	r3, [r3, #12]
 80017a4:	881b      	ldrh	r3, [r3, #0]
 80017a6:	81fb      	strh	r3, [r7, #14]

	/* Get Page1 actual status */
	PageStatus1 = (*(__IO unsigned short*) this->EMULATED_EEPROM_DEFINITION_PAGE1_BASE_ADDRESS);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	699b      	ldr	r3, [r3, #24]
 80017ac:	881b      	ldrh	r3, [r3, #0]
 80017ae:	81bb      	strh	r3, [r7, #12]

	/* Write or read operation */
	switch (Operation)
 80017b0:	887b      	ldrh	r3, [r7, #2]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d01b      	beq.n	80017ee <_ZN20MAteeqEmulatedEEPROM16EE_FindValidPageEt+0x62>
 80017b6:	2b01      	cmp	r3, #1
 80017b8:	d125      	bne.n	8001806 <_ZN20MAteeqEmulatedEEPROM16EE_FindValidPageEt+0x7a>
	{
		case MAteeqEmulatedEEPROM::EMULATED_EEPROM_DEFINITION_WRITE_IN_VALID_PAGE: /* ---- Write operation ---- */
			if (PageStatus1 == MAteeqEmulatedEEPROM::EMULATED_EEPROM_DEFINITION_VALID_PAGE)
 80017ba:	89bb      	ldrh	r3, [r7, #12]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d108      	bne.n	80017d2 <_ZN20MAteeqEmulatedEEPROM16EE_FindValidPageEt+0x46>
			{
				/* Page0 receiving data */
				if (PageStatus0 == MAteeqEmulatedEEPROM::EMULATED_EEPROM_DEFINITION_RECEIVE_DATA)
 80017c0:	89fb      	ldrh	r3, [r7, #14]
 80017c2:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d101      	bne.n	80017ce <_ZN20MAteeqEmulatedEEPROM16EE_FindValidPageEt+0x42>
				{
					return MAteeqEmulatedEEPROM::EMULATED_EEPROM_DEFINITION_PAGE0; /* Page0 valid */
 80017ca:	2300      	movs	r3, #0
 80017cc:	e01c      	b.n	8001808 <_ZN20MAteeqEmulatedEEPROM16EE_FindValidPageEt+0x7c>
				}
				else
				{
					return MAteeqEmulatedEEPROM::EMULATED_EEPROM_DEFINITION_PAGE1; /* Page1 valid */
 80017ce:	2301      	movs	r3, #1
 80017d0:	e01a      	b.n	8001808 <_ZN20MAteeqEmulatedEEPROM16EE_FindValidPageEt+0x7c>
				}
			}
			else if (PageStatus0 == MAteeqEmulatedEEPROM::EMULATED_EEPROM_DEFINITION_VALID_PAGE)
 80017d2:	89fb      	ldrh	r3, [r7, #14]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d108      	bne.n	80017ea <_ZN20MAteeqEmulatedEEPROM16EE_FindValidPageEt+0x5e>
			{
				/* Page1 receiving data */
				if (PageStatus1 == MAteeqEmulatedEEPROM::EMULATED_EEPROM_DEFINITION_RECEIVE_DATA)
 80017d8:	89bb      	ldrh	r3, [r7, #12]
 80017da:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 80017de:	4293      	cmp	r3, r2
 80017e0:	d101      	bne.n	80017e6 <_ZN20MAteeqEmulatedEEPROM16EE_FindValidPageEt+0x5a>
				{
					return MAteeqEmulatedEEPROM::EMULATED_EEPROM_DEFINITION_PAGE1; /* Page1 valid */
 80017e2:	2301      	movs	r3, #1
 80017e4:	e010      	b.n	8001808 <_ZN20MAteeqEmulatedEEPROM16EE_FindValidPageEt+0x7c>
				}
				else
				{
					return MAteeqEmulatedEEPROM::EMULATED_EEPROM_DEFINITION_PAGE0; /* Page0 valid */
 80017e6:	2300      	movs	r3, #0
 80017e8:	e00e      	b.n	8001808 <_ZN20MAteeqEmulatedEEPROM16EE_FindValidPageEt+0x7c>
				}
			}
			else
			{
				return MAteeqEmulatedEEPROM::EMULATED_EEPROM_DEFINITION_NO_VALID_PAGE; /* No valid Page */
 80017ea:	23ab      	movs	r3, #171	; 0xab
 80017ec:	e00c      	b.n	8001808 <_ZN20MAteeqEmulatedEEPROM16EE_FindValidPageEt+0x7c>
			}

		case MAteeqEmulatedEEPROM::EMULATED_EEPROM_DEFINITION_READ_FROM_VALID_PAGE: /* ---- Read operation ---- */
			if (PageStatus0 == MAteeqEmulatedEEPROM::EMULATED_EEPROM_DEFINITION_VALID_PAGE)
 80017ee:	89fb      	ldrh	r3, [r7, #14]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d101      	bne.n	80017f8 <_ZN20MAteeqEmulatedEEPROM16EE_FindValidPageEt+0x6c>
			{
				return MAteeqEmulatedEEPROM::EMULATED_EEPROM_DEFINITION_PAGE0; /* Page0 valid */
 80017f4:	2300      	movs	r3, #0
 80017f6:	e007      	b.n	8001808 <_ZN20MAteeqEmulatedEEPROM16EE_FindValidPageEt+0x7c>
			}
			else if (PageStatus1 == MAteeqEmulatedEEPROM::EMULATED_EEPROM_DEFINITION_VALID_PAGE)
 80017f8:	89bb      	ldrh	r3, [r7, #12]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d101      	bne.n	8001802 <_ZN20MAteeqEmulatedEEPROM16EE_FindValidPageEt+0x76>
			{
				return MAteeqEmulatedEEPROM::EMULATED_EEPROM_DEFINITION_PAGE1; /* Page1 valid */
 80017fe:	2301      	movs	r3, #1
 8001800:	e002      	b.n	8001808 <_ZN20MAteeqEmulatedEEPROM16EE_FindValidPageEt+0x7c>
			}
			else
			{
				return MAteeqEmulatedEEPROM::EMULATED_EEPROM_DEFINITION_NO_VALID_PAGE; /* No valid Page */
 8001802:	23ab      	movs	r3, #171	; 0xab
 8001804:	e000      	b.n	8001808 <_ZN20MAteeqEmulatedEEPROM16EE_FindValidPageEt+0x7c>
			}

		default:
			return MAteeqEmulatedEEPROM::EMULATED_EEPROM_DEFINITION_PAGE0; /* Page0 valid */
 8001806:	2300      	movs	r3, #0
	}
}
 8001808:	4618      	mov	r0, r3
 800180a:	3714      	adds	r7, #20
 800180c:	46bd      	mov	sp, r7
 800180e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001812:	4770      	bx	lr

08001814 <_ZN20MAteeqEmulatedEEPROM30EE_VerifyPageFullWriteVariableEtt>:
unsigned short MAteeqEmulatedEEPROM::EE_VerifyPageFullWriteVariable(unsigned short VirtAddress, unsigned short Data)
{
 8001814:	b590      	push	{r4, r7, lr}
 8001816:	b087      	sub	sp, #28
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
 800181c:	460b      	mov	r3, r1
 800181e:	807b      	strh	r3, [r7, #2]
 8001820:	4613      	mov	r3, r2
 8001822:	803b      	strh	r3, [r7, #0]
	HAL_StatusTypeDef FlashStatus = HAL_OK;
 8001824:	2300      	movs	r3, #0
 8001826:	74fb      	strb	r3, [r7, #19]
	unsigned short ValidPage = MAteeqEmulatedEEPROM::EMULATED_EEPROM_DEFINITION_PAGE0;
 8001828:	2300      	movs	r3, #0
 800182a:	823b      	strh	r3, [r7, #16]
	unsigned int Address = this->EMULATED_EEPROM_DEFINITION_EEPROM_START_ADDRESS;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	689b      	ldr	r3, [r3, #8]
 8001830:	617b      	str	r3, [r7, #20]
	unsigned int PageEndAddress = this->EMULATED_EEPROM_DEFINITION_EEPROM_START_ADDRESS + this->EMULATED_EEPROM_DEFINITION_PAGE_SIZE;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	689a      	ldr	r2, [r3, #8]
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	4413      	add	r3, r2
 800183c:	60fb      	str	r3, [r7, #12]

	/* Get valid Page for write operation */
	ValidPage = this->EE_FindValidPage(MAteeqEmulatedEEPROM::EMULATED_EEPROM_DEFINITION_WRITE_IN_VALID_PAGE);
 800183e:	2101      	movs	r1, #1
 8001840:	6878      	ldr	r0, [r7, #4]
 8001842:	f7ff ffa3 	bl	800178c <_ZN20MAteeqEmulatedEEPROM16EE_FindValidPageEt>
 8001846:	4603      	mov	r3, r0
 8001848:	823b      	strh	r3, [r7, #16]

	/* Check if there is no valid page */
	if (ValidPage == MAteeqEmulatedEEPROM::EMULATED_EEPROM_DEFINITION_NO_VALID_PAGE)
 800184a:	8a3b      	ldrh	r3, [r7, #16]
 800184c:	2bab      	cmp	r3, #171	; 0xab
 800184e:	d101      	bne.n	8001854 <_ZN20MAteeqEmulatedEEPROM30EE_VerifyPageFullWriteVariableEtt+0x40>
	{
		return MAteeqEmulatedEEPROM::EMULATED_EEPROM_DEFINITION_NO_VALID_PAGE;
 8001850:	23ab      	movs	r3, #171	; 0xab
 8001852:	e047      	b.n	80018e4 <_ZN20MAteeqEmulatedEEPROM30EE_VerifyPageFullWriteVariableEtt+0xd0>
	}

	/* Get the valid Page start Address */
	Address = (unsigned int) (this->EMULATED_EEPROM_DEFINITION_EEPROM_START_ADDRESS + (unsigned int) (ValidPage * this->EMULATED_EEPROM_DEFINITION_PAGE_SIZE));
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	689a      	ldr	r2, [r3, #8]
 8001858:	8a3b      	ldrh	r3, [r7, #16]
 800185a:	6879      	ldr	r1, [r7, #4]
 800185c:	6849      	ldr	r1, [r1, #4]
 800185e:	fb01 f303 	mul.w	r3, r1, r3
 8001862:	4413      	add	r3, r2
 8001864:	617b      	str	r3, [r7, #20]

	/* Get the valid Page end Address */
	PageEndAddress = (unsigned int) ((this->EMULATED_EEPROM_DEFINITION_EEPROM_START_ADDRESS - 1) + (unsigned int) ((ValidPage + 1) * this->EMULATED_EEPROM_DEFINITION_PAGE_SIZE));
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	689a      	ldr	r2, [r3, #8]
 800186a:	8a3b      	ldrh	r3, [r7, #16]
 800186c:	3301      	adds	r3, #1
 800186e:	4619      	mov	r1, r3
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	fb03 f301 	mul.w	r3, r3, r1
 8001878:	4413      	add	r3, r2
 800187a:	3b01      	subs	r3, #1
 800187c:	60fb      	str	r3, [r7, #12]

	/* Check each active page address starting from begining */
	while (Address < PageEndAddress)
 800187e:	697a      	ldr	r2, [r7, #20]
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	429a      	cmp	r2, r3
 8001884:	d22d      	bcs.n	80018e2 <_ZN20MAteeqEmulatedEEPROM30EE_VerifyPageFullWriteVariableEtt+0xce>
	{
		/* Verify if Address and Address+2 contents are 0xFFFFFFFF */
		if ((*(__IO unsigned int*) Address) == 0xFFFFFFFF)
 8001886:	697b      	ldr	r3, [r7, #20]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800188e:	bf0c      	ite	eq
 8001890:	2301      	moveq	r3, #1
 8001892:	2300      	movne	r3, #0
 8001894:	b2db      	uxtb	r3, r3
 8001896:	2b00      	cmp	r3, #0
 8001898:	d01f      	beq.n	80018da <_ZN20MAteeqEmulatedEEPROM30EE_VerifyPageFullWriteVariableEtt+0xc6>
		{
			/* Set variable data */
			FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, Address, Data);
 800189a:	883b      	ldrh	r3, [r7, #0]
 800189c:	f04f 0400 	mov.w	r4, #0
 80018a0:	461a      	mov	r2, r3
 80018a2:	4623      	mov	r3, r4
 80018a4:	6979      	ldr	r1, [r7, #20]
 80018a6:	2001      	movs	r0, #1
 80018a8:	f000 fd46 	bl	8002338 <HAL_FLASH_Program>
 80018ac:	4603      	mov	r3, r0
 80018ae:	74fb      	strb	r3, [r7, #19]
			/* If program operation was failed, a Flash error code is returned */
			if ((MAteeqEmulatedEEPROM::EMULATED_EEPROM_STATUS)FlashStatus != MAteeqEmulatedEEPROM::EMULATED_EEPROM_STATUS_OK)
 80018b0:	7cfb      	ldrb	r3, [r7, #19]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d002      	beq.n	80018bc <_ZN20MAteeqEmulatedEEPROM30EE_VerifyPageFullWriteVariableEtt+0xa8>
			{
				return (MAteeqEmulatedEEPROM::EMULATED_EEPROM_STATUS)FlashStatus;
 80018b6:	7cfb      	ldrb	r3, [r7, #19]
 80018b8:	b29b      	uxth	r3, r3
 80018ba:	e013      	b.n	80018e4 <_ZN20MAteeqEmulatedEEPROM30EE_VerifyPageFullWriteVariableEtt+0xd0>
			}
			/* Set variable virtual address */
			FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, Address + 2, VirtAddress);
 80018bc:	697b      	ldr	r3, [r7, #20]
 80018be:	1c99      	adds	r1, r3, #2
 80018c0:	887b      	ldrh	r3, [r7, #2]
 80018c2:	f04f 0400 	mov.w	r4, #0
 80018c6:	461a      	mov	r2, r3
 80018c8:	4623      	mov	r3, r4
 80018ca:	2001      	movs	r0, #1
 80018cc:	f000 fd34 	bl	8002338 <HAL_FLASH_Program>
 80018d0:	4603      	mov	r3, r0
 80018d2:	74fb      	strb	r3, [r7, #19]
			/* Return program operation status */
			return (MAteeqEmulatedEEPROM::EMULATED_EEPROM_STATUS)FlashStatus;
 80018d4:	7cfb      	ldrb	r3, [r7, #19]
 80018d6:	b29b      	uxth	r3, r3
 80018d8:	e004      	b.n	80018e4 <_ZN20MAteeqEmulatedEEPROM30EE_VerifyPageFullWriteVariableEtt+0xd0>
		}
		else
		{
			/* Next address location */
			Address = Address + 4;
 80018da:	697b      	ldr	r3, [r7, #20]
 80018dc:	3304      	adds	r3, #4
 80018de:	617b      	str	r3, [r7, #20]
	while (Address < PageEndAddress)
 80018e0:	e7cd      	b.n	800187e <_ZN20MAteeqEmulatedEEPROM30EE_VerifyPageFullWriteVariableEtt+0x6a>
		}
	}

	/* Return PAGE_FULL in case the valid page is full */
	return MAteeqEmulatedEEPROM::EMULATED_EEPROM_DEFINITION_PAGE_FULL;
 80018e2:	2380      	movs	r3, #128	; 0x80
}
 80018e4:	4618      	mov	r0, r3
 80018e6:	371c      	adds	r7, #28
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd90      	pop	{r4, r7, pc}

080018ec <_ZN20MAteeqEmulatedEEPROM15EE_PageTransferEtt>:
unsigned short MAteeqEmulatedEEPROM::EE_PageTransfer(unsigned short VirtAddress, unsigned short Data)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b08c      	sub	sp, #48	; 0x30
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
 80018f4:	460b      	mov	r3, r1
 80018f6:	807b      	strh	r3, [r7, #2]
 80018f8:	4613      	mov	r3, r2
 80018fa:	803b      	strh	r3, [r7, #0]
	HAL_StatusTypeDef FlashStatus = HAL_OK;
 80018fc:	2300      	movs	r3, #0
 80018fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	unsigned int NewPageAddress = this->EMULATED_EEPROM_DEFINITION_EEPROM_START_ADDRESS;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	689b      	ldr	r3, [r3, #8]
 8001906:	62fb      	str	r3, [r7, #44]	; 0x2c
	unsigned short OldPageId = 0;
 8001908:	2300      	movs	r3, #0
 800190a:	857b      	strh	r3, [r7, #42]	; 0x2a
	unsigned short ValidPage = MAteeqEmulatedEEPROM::EMULATED_EEPROM_DEFINITION_PAGE0, VarIdx = 0;
 800190c:	2300      	movs	r3, #0
 800190e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8001910:	2300      	movs	r3, #0
 8001912:	853b      	strh	r3, [r7, #40]	; 0x28
	unsigned short EepromStatus = 0, ReadStatus = 0;
 8001914:	2300      	movs	r3, #0
 8001916:	847b      	strh	r3, [r7, #34]	; 0x22
 8001918:	2300      	movs	r3, #0
 800191a:	843b      	strh	r3, [r7, #32]
	uint32_t SectorError = 0;
 800191c:	2300      	movs	r3, #0
 800191e:	61fb      	str	r3, [r7, #28]
	FLASH_EraseInitTypeDef pEraseInit;

	/* Get active Page for read operation */
	ValidPage = this->EE_FindValidPage(MAteeqEmulatedEEPROM::EMULATED_EEPROM_DEFINITION_READ_FROM_VALID_PAGE);
 8001920:	2100      	movs	r1, #0
 8001922:	6878      	ldr	r0, [r7, #4]
 8001924:	f7ff ff32 	bl	800178c <_ZN20MAteeqEmulatedEEPROM16EE_FindValidPageEt>
 8001928:	4603      	mov	r3, r0
 800192a:	84bb      	strh	r3, [r7, #36]	; 0x24

	if (ValidPage == MAteeqEmulatedEEPROM::EMULATED_EEPROM_DEFINITION_PAGE1) /* Page1 valid */
 800192c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800192e:	2b01      	cmp	r3, #1
 8001930:	d107      	bne.n	8001942 <_ZN20MAteeqEmulatedEEPROM15EE_PageTransferEtt+0x56>
	{
		/* New page address where variable will be moved to */
		NewPageAddress = this->EMULATED_EEPROM_DEFINITION_PAGE0_BASE_ADDRESS;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	68db      	ldr	r3, [r3, #12]
 8001936:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Old page ID where variable will be taken from */
		OldPageId = this->EMULATED_EEPROM_DEFINITION_PAGE1_ID;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800193e:	857b      	strh	r3, [r7, #42]	; 0x2a
 8001940:	e00b      	b.n	800195a <_ZN20MAteeqEmulatedEEPROM15EE_PageTransferEtt+0x6e>
	}
	else if (ValidPage == MAteeqEmulatedEEPROM::EMULATED_EEPROM_DEFINITION_PAGE0) /* Page0 valid */
 8001942:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001944:	2b00      	cmp	r3, #0
 8001946:	d106      	bne.n	8001956 <_ZN20MAteeqEmulatedEEPROM15EE_PageTransferEtt+0x6a>
	{
		/* New page address  where variable will be moved to */
		NewPageAddress = this->EMULATED_EEPROM_DEFINITION_PAGE1_BASE_ADDRESS;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	699b      	ldr	r3, [r3, #24]
 800194c:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Old page ID where variable will be taken from */
		OldPageId = this->EMULATED_EEPROM_DEFINITION_PAGE0_ID;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	7d1b      	ldrb	r3, [r3, #20]
 8001952:	857b      	strh	r3, [r7, #42]	; 0x2a
 8001954:	e001      	b.n	800195a <_ZN20MAteeqEmulatedEEPROM15EE_PageTransferEtt+0x6e>
	}
	else
	{
		return MAteeqEmulatedEEPROM::EMULATED_EEPROM_DEFINITION_NO_VALID_PAGE; /* No valid Page */
 8001956:	23ab      	movs	r3, #171	; 0xab
 8001958:	e086      	b.n	8001a68 <_ZN20MAteeqEmulatedEEPROM15EE_PageTransferEtt+0x17c>
	}

	/* Set the new Page status to RECEIVE_DATA status */
	FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, NewPageAddress, MAteeqEmulatedEEPROM::EMULATED_EEPROM_DEFINITION_RECEIVE_DATA);
 800195a:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 800195e:	f04f 0300 	mov.w	r3, #0
 8001962:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001964:	2001      	movs	r0, #1
 8001966:	f000 fce7 	bl	8002338 <HAL_FLASH_Program>
 800196a:	4603      	mov	r3, r0
 800196c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	/* If program operation was failed, a Flash error code is returned */
	if ((MAteeqEmulatedEEPROM::EMULATED_EEPROM_STATUS)FlashStatus != MAteeqEmulatedEEPROM::EMULATED_EEPROM_STATUS_OK)
 8001970:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001974:	2b00      	cmp	r3, #0
 8001976:	d003      	beq.n	8001980 <_ZN20MAteeqEmulatedEEPROM15EE_PageTransferEtt+0x94>
	{
		return FlashStatus;
 8001978:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800197c:	b29b      	uxth	r3, r3
 800197e:	e073      	b.n	8001a68 <_ZN20MAteeqEmulatedEEPROM15EE_PageTransferEtt+0x17c>
	}

	/* Write the variable passed as parameter in the new active page */
	EepromStatus = this->EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 8001980:	883a      	ldrh	r2, [r7, #0]
 8001982:	887b      	ldrh	r3, [r7, #2]
 8001984:	4619      	mov	r1, r3
 8001986:	6878      	ldr	r0, [r7, #4]
 8001988:	f7ff ff44 	bl	8001814 <_ZN20MAteeqEmulatedEEPROM30EE_VerifyPageFullWriteVariableEtt>
 800198c:	4603      	mov	r3, r0
 800198e:	847b      	strh	r3, [r7, #34]	; 0x22
	/* If program operation was failed, a Flash error code is returned */
	if (EepromStatus != MAteeqEmulatedEEPROM::EMULATED_EEPROM_STATUS_OK)
 8001990:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001992:	2b00      	cmp	r3, #0
 8001994:	d001      	beq.n	800199a <_ZN20MAteeqEmulatedEEPROM15EE_PageTransferEtt+0xae>
	{
		return EepromStatus;
 8001996:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001998:	e066      	b.n	8001a68 <_ZN20MAteeqEmulatedEEPROM15EE_PageTransferEtt+0x17c>
	}

	/* Transfer process: transfer variables from old to the new active page */
	for (VarIdx = 0; VarIdx < 1; VarIdx++)
 800199a:	2300      	movs	r3, #0
 800199c:	853b      	strh	r3, [r7, #40]	; 0x28
 800199e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	dc30      	bgt.n	8001a06 <_ZN20MAteeqEmulatedEEPROM15EE_PageTransferEtt+0x11a>
	{
		if (VirtAddVarTab[VarIdx] != VirtAddress) /* Check each variable except the one passed as parameter */
 80019a4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80019a6:	687a      	ldr	r2, [r7, #4]
 80019a8:	3310      	adds	r3, #16
 80019aa:	005b      	lsls	r3, r3, #1
 80019ac:	4413      	add	r3, r2
 80019ae:	885b      	ldrh	r3, [r3, #2]
 80019b0:	887a      	ldrh	r2, [r7, #2]
 80019b2:	429a      	cmp	r2, r3
 80019b4:	d023      	beq.n	80019fe <_ZN20MAteeqEmulatedEEPROM15EE_PageTransferEtt+0x112>
		{
			/* Read the other last variable updates */
			ReadStatus = this->EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 80019b6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80019b8:	687a      	ldr	r2, [r7, #4]
 80019ba:	3310      	adds	r3, #16
 80019bc:	005b      	lsls	r3, r3, #1
 80019be:	4413      	add	r3, r2
 80019c0:	8859      	ldrh	r1, [r3, #2]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	3328      	adds	r3, #40	; 0x28
 80019c6:	461a      	mov	r2, r3
 80019c8:	6878      	ldr	r0, [r7, #4]
 80019ca:	f000 fad1 	bl	8001f70 <_ZN20MAteeqEmulatedEEPROM15EE_ReadVariableEtPt>
 80019ce:	4603      	mov	r3, r0
 80019d0:	843b      	strh	r3, [r7, #32]
			/* In case variable corresponding to the virtual address was found */
			if (ReadStatus != 0x1)
 80019d2:	8c3b      	ldrh	r3, [r7, #32]
 80019d4:	2b01      	cmp	r3, #1
 80019d6:	d012      	beq.n	80019fe <_ZN20MAteeqEmulatedEEPROM15EE_PageTransferEtt+0x112>
			{
				/* Transfer the variable to the new active page */
				EepromStatus = this->EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 80019d8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80019da:	687a      	ldr	r2, [r7, #4]
 80019dc:	3310      	adds	r3, #16
 80019de:	005b      	lsls	r3, r3, #1
 80019e0:	4413      	add	r3, r2
 80019e2:	8859      	ldrh	r1, [r3, #2]
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019e8:	461a      	mov	r2, r3
 80019ea:	6878      	ldr	r0, [r7, #4]
 80019ec:	f7ff ff12 	bl	8001814 <_ZN20MAteeqEmulatedEEPROM30EE_VerifyPageFullWriteVariableEtt>
 80019f0:	4603      	mov	r3, r0
 80019f2:	847b      	strh	r3, [r7, #34]	; 0x22
				/* If program operation was failed, a Flash error code is returned */
				if (EepromStatus != MAteeqEmulatedEEPROM::EMULATED_EEPROM_STATUS_OK)
 80019f4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d001      	beq.n	80019fe <_ZN20MAteeqEmulatedEEPROM15EE_PageTransferEtt+0x112>
				{
					return EepromStatus;
 80019fa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80019fc:	e034      	b.n	8001a68 <_ZN20MAteeqEmulatedEEPROM15EE_PageTransferEtt+0x17c>
	for (VarIdx = 0; VarIdx < 1; VarIdx++)
 80019fe:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001a00:	3301      	adds	r3, #1
 8001a02:	853b      	strh	r3, [r7, #40]	; 0x28
 8001a04:	e7cb      	b.n	800199e <_ZN20MAteeqEmulatedEEPROM15EE_PageTransferEtt+0xb2>
				}
			}
		}
	}

	pEraseInit.TypeErase = TYPEERASE_SECTORS;
 8001a06:	2300      	movs	r3, #0
 8001a08:	60bb      	str	r3, [r7, #8]
	pEraseInit.Sector = OldPageId;
 8001a0a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001a0c:	613b      	str	r3, [r7, #16]
	pEraseInit.NbSectors = 1;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	617b      	str	r3, [r7, #20]
	pEraseInit.VoltageRange = MAteeqEmulatedEEPROM::EMULATED_EEPROM_DEFINITION_VOLTAGE_RANGE;
 8001a12:	2302      	movs	r3, #2
 8001a14:	61bb      	str	r3, [r7, #24]

	/* Erase the old Page: Set old Page status to ERASED status */
	FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8001a16:	f107 021c 	add.w	r2, r7, #28
 8001a1a:	f107 0308 	add.w	r3, r7, #8
 8001a1e:	4611      	mov	r1, r2
 8001a20:	4618      	mov	r0, r3
 8001a22:	f000 fd35 	bl	8002490 <HAL_FLASHEx_Erase>
 8001a26:	4603      	mov	r3, r0
 8001a28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	/* If erase operation was failed, a Flash error code is returned */
	if ((MAteeqEmulatedEEPROM::EMULATED_EEPROM_STATUS)FlashStatus != MAteeqEmulatedEEPROM::EMULATED_EEPROM_STATUS_OK)
 8001a2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d003      	beq.n	8001a3c <_ZN20MAteeqEmulatedEEPROM15EE_PageTransferEtt+0x150>
	{
		return FlashStatus;
 8001a34:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001a38:	b29b      	uxth	r3, r3
 8001a3a:	e015      	b.n	8001a68 <_ZN20MAteeqEmulatedEEPROM15EE_PageTransferEtt+0x17c>
	}

	/* Set new Page status to VALID_PAGE status */
	FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, NewPageAddress, MAteeqEmulatedEEPROM::EMULATED_EEPROM_DEFINITION_VALID_PAGE);
 8001a3c:	f04f 0200 	mov.w	r2, #0
 8001a40:	f04f 0300 	mov.w	r3, #0
 8001a44:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001a46:	2001      	movs	r0, #1
 8001a48:	f000 fc76 	bl	8002338 <HAL_FLASH_Program>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	/* If program operation was failed, a Flash error code is returned */
	if ((MAteeqEmulatedEEPROM::EMULATED_EEPROM_STATUS)FlashStatus != MAteeqEmulatedEEPROM::EMULATED_EEPROM_STATUS_OK)
 8001a52:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d003      	beq.n	8001a62 <_ZN20MAteeqEmulatedEEPROM15EE_PageTransferEtt+0x176>
	{
		return FlashStatus;
 8001a5a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001a5e:	b29b      	uxth	r3, r3
 8001a60:	e002      	b.n	8001a68 <_ZN20MAteeqEmulatedEEPROM15EE_PageTransferEtt+0x17c>
	}

	/* Return last operation flash status */
	return FlashStatus;
 8001a62:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001a66:	b29b      	uxth	r3, r3
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	3730      	adds	r7, #48	; 0x30
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}

08001a70 <_ZN20MAteeqEmulatedEEPROM24EE_VerifyPageFullyErasedEj>:
unsigned short MAteeqEmulatedEEPROM::EE_VerifyPageFullyErased(unsigned int Address)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b085      	sub	sp, #20
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
 8001a78:	6039      	str	r1, [r7, #0]
	unsigned int ReadStatus = 1;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	60fb      	str	r3, [r7, #12]
	unsigned short AddressValue = 0x5555;
 8001a7e:	f245 5355 	movw	r3, #21845	; 0x5555
 8001a82:	817b      	strh	r3, [r7, #10]

	/* Check each active page address starting from end */
	while (Address <= this->EMULATED_EEPROM_DEFINITION_PAGE0_END_ADDRESS)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	691a      	ldr	r2, [r3, #16]
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	429a      	cmp	r2, r3
 8001a8c:	d30e      	bcc.n	8001aac <_ZN20MAteeqEmulatedEEPROM24EE_VerifyPageFullyErasedEj+0x3c>
	{
		/* Get the current location content to be compared with virtual address */
		AddressValue = (*(__IO unsigned short*) Address);
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	881b      	ldrh	r3, [r3, #0]
 8001a92:	817b      	strh	r3, [r7, #10]

		/* Compare the read address with the virtual address */
		if (AddressValue != MAteeqEmulatedEEPROM::EMULATED_EEPROM_DEFINITION_ERASED)
 8001a94:	897b      	ldrh	r3, [r7, #10]
 8001a96:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d002      	beq.n	8001aa4 <_ZN20MAteeqEmulatedEEPROM24EE_VerifyPageFullyErasedEj+0x34>
		{

			/* In case variable value is read, reset ReadStatus flag */
			ReadStatus = 0;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	60fb      	str	r3, [r7, #12]

			break;
 8001aa2:	e003      	b.n	8001aac <_ZN20MAteeqEmulatedEEPROM24EE_VerifyPageFullyErasedEj+0x3c>
		}
		/* Next address location */
		Address = Address + 4;
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	3304      	adds	r3, #4
 8001aa8:	603b      	str	r3, [r7, #0]
	while (Address <= this->EMULATED_EEPROM_DEFINITION_PAGE0_END_ADDRESS)
 8001aaa:	e7eb      	b.n	8001a84 <_ZN20MAteeqEmulatedEEPROM24EE_VerifyPageFullyErasedEj+0x14>
	}

	/* Return ReadStatus value: (0: Page not erased, 1: Sector erased) */
	return ReadStatus;
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	b29b      	uxth	r3, r3
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	3714      	adds	r7, #20
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aba:	4770      	bx	lr

08001abc <_ZN20MAteeqEmulatedEEPROM7EE_InitEv>:

unsigned short MAteeqEmulatedEEPROM::EE_Init()
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b08c      	sub	sp, #48	; 0x30
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
	unsigned short PageStatus0 = 6, PageStatus1 = 6;
 8001ac4:	2306      	movs	r3, #6
 8001ac6:	857b      	strh	r3, [r7, #42]	; 0x2a
 8001ac8:	2306      	movs	r3, #6
 8001aca:	853b      	strh	r3, [r7, #40]	; 0x28
	unsigned short VarIdx = 0;
 8001acc:	2300      	movs	r3, #0
 8001ace:	85fb      	strh	r3, [r7, #46]	; 0x2e
	unsigned short EepromStatus = 0, ReadStatus = 0;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	84bb      	strh	r3, [r7, #36]	; 0x24
	signed short x = -1;
 8001ad8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001adc:	85bb      	strh	r3, [r7, #44]	; 0x2c
	HAL_StatusTypeDef FlashStatus;
	uint32_t SectorError = 0;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	61fb      	str	r3, [r7, #28]
	FLASH_EraseInitTypeDef pEraseInit;

	/* Get Page0 status */
	PageStatus0 = (*(__IO unsigned short*) this->EMULATED_EEPROM_DEFINITION_PAGE0_BASE_ADDRESS);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	68db      	ldr	r3, [r3, #12]
 8001ae6:	881b      	ldrh	r3, [r3, #0]
 8001ae8:	857b      	strh	r3, [r7, #42]	; 0x2a
	/* Get Page1 status */
	PageStatus1 = (*(__IO unsigned short*) this->EMULATED_EEPROM_DEFINITION_PAGE1_BASE_ADDRESS);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	699b      	ldr	r3, [r3, #24]
 8001aee:	881b      	ldrh	r3, [r3, #0]
 8001af0:	853b      	strh	r3, [r7, #40]	; 0x28

	pEraseInit.TypeErase = TYPEERASE_SECTORS;
 8001af2:	2300      	movs	r3, #0
 8001af4:	60bb      	str	r3, [r7, #8]
	pEraseInit.Sector = this->EMULATED_EEPROM_DEFINITION_PAGE0_ID;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	7d1b      	ldrb	r3, [r3, #20]
 8001afa:	613b      	str	r3, [r7, #16]
	pEraseInit.NbSectors = 1;
 8001afc:	2301      	movs	r3, #1
 8001afe:	617b      	str	r3, [r7, #20]
	pEraseInit.VoltageRange = MAteeqEmulatedEEPROM::EMULATED_EEPROM_DEFINITION_VOLTAGE_RANGE;
 8001b00:	2302      	movs	r3, #2
 8001b02:	61bb      	str	r3, [r7, #24]

	/* Check for invalid header states and repair if necessary */
	switch (PageStatus0)
 8001b04:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001b06:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d077      	beq.n	8001bfe <_ZN20MAteeqEmulatedEEPROM7EE_InitEv+0x142>
 8001b0e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d003      	beq.n	8001b1e <_ZN20MAteeqEmulatedEEPROM7EE_InitEv+0x62>
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	f000 814c 	beq.w	8001db4 <_ZN20MAteeqEmulatedEEPROM7EE_InitEv+0x2f8>
 8001b1c:	e20e      	b.n	8001f3c <_ZN20MAteeqEmulatedEEPROM7EE_InitEv+0x480>
	{
		case MAteeqEmulatedEEPROM::EMULATED_EEPROM_DEFINITION_ERASED:
			if (PageStatus1 == MAteeqEmulatedEEPROM::EMULATED_EEPROM_DEFINITION_VALID_PAGE) /* Page0 erased, Page1 valid */
 8001b1e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d122      	bne.n	8001b6a <_ZN20MAteeqEmulatedEEPROM7EE_InitEv+0xae>
			{
				/* Erase Page0 */
				if (!this->EE_VerifyPageFullyErased(this->EMULATED_EEPROM_DEFINITION_PAGE0_BASE_ADDRESS))
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	68db      	ldr	r3, [r3, #12]
 8001b28:	4619      	mov	r1, r3
 8001b2a:	6878      	ldr	r0, [r7, #4]
 8001b2c:	f7ff ffa0 	bl	8001a70 <_ZN20MAteeqEmulatedEEPROM24EE_VerifyPageFullyErasedEj>
 8001b30:	4603      	mov	r3, r0
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	bf0c      	ite	eq
 8001b36:	2301      	moveq	r3, #1
 8001b38:	2300      	movne	r3, #0
 8001b3a:	b2db      	uxtb	r3, r3
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	f000 820b 	beq.w	8001f58 <_ZN20MAteeqEmulatedEEPROM7EE_InitEv+0x49c>
				{
					FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8001b42:	f107 021c 	add.w	r2, r7, #28
 8001b46:	f107 0308 	add.w	r3, r7, #8
 8001b4a:	4611      	mov	r1, r2
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f000 fc9f 	bl	8002490 <HAL_FLASHEx_Erase>
 8001b52:	4603      	mov	r3, r0
 8001b54:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
					/* If erase operation was failed, a Flash error code is returned */
					if ((MAteeqEmulatedEEPROM::EMULATED_EEPROM_STATUS)FlashStatus != MAteeqEmulatedEEPROM::EMULATED_EEPROM_STATUS_OK)
 8001b58:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	f000 81fb 	beq.w	8001f58 <_ZN20MAteeqEmulatedEEPROM7EE_InitEv+0x49c>
					{
						return FlashStatus;
 8001b62:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001b66:	b29b      	uxth	r3, r3
 8001b68:	e1fe      	b.n	8001f68 <_ZN20MAteeqEmulatedEEPROM7EE_InitEv+0x4ac>
					}
				}
			}
			else if (PageStatus1 == MAteeqEmulatedEEPROM::EMULATED_EEPROM_DEFINITION_RECEIVE_DATA) /* Page0 erased, Page1 receive */
 8001b6a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001b6c:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8001b70:	4293      	cmp	r3, r2
 8001b72:	d135      	bne.n	8001be0 <_ZN20MAteeqEmulatedEEPROM7EE_InitEv+0x124>
			{
				/* Erase Page0 */
				if (!this->EE_VerifyPageFullyErased(this->EMULATED_EEPROM_DEFINITION_PAGE0_BASE_ADDRESS))
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	68db      	ldr	r3, [r3, #12]
 8001b78:	4619      	mov	r1, r3
 8001b7a:	6878      	ldr	r0, [r7, #4]
 8001b7c:	f7ff ff78 	bl	8001a70 <_ZN20MAteeqEmulatedEEPROM24EE_VerifyPageFullyErasedEj>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	bf0c      	ite	eq
 8001b86:	2301      	moveq	r3, #1
 8001b88:	2300      	movne	r3, #0
 8001b8a:	b2db      	uxtb	r3, r3
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d012      	beq.n	8001bb6 <_ZN20MAteeqEmulatedEEPROM7EE_InitEv+0xfa>
				{
					FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8001b90:	f107 021c 	add.w	r2, r7, #28
 8001b94:	f107 0308 	add.w	r3, r7, #8
 8001b98:	4611      	mov	r1, r2
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f000 fc78 	bl	8002490 <HAL_FLASHEx_Erase>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
					/* If erase operation was failed, a Flash error code is returned */
					if ((MAteeqEmulatedEEPROM::EMULATED_EEPROM_STATUS)FlashStatus != MAteeqEmulatedEEPROM::EMULATED_EEPROM_STATUS_OK)
 8001ba6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d003      	beq.n	8001bb6 <_ZN20MAteeqEmulatedEEPROM7EE_InitEv+0xfa>
					{
						return FlashStatus;
 8001bae:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001bb2:	b29b      	uxth	r3, r3
 8001bb4:	e1d8      	b.n	8001f68 <_ZN20MAteeqEmulatedEEPROM7EE_InitEv+0x4ac>
					}
				}
				/* Mark Page1 as valid */
				FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, this->EMULATED_EEPROM_DEFINITION_PAGE1_BASE_ADDRESS, MAteeqEmulatedEEPROM::EMULATED_EEPROM_DEFINITION_VALID_PAGE);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6999      	ldr	r1, [r3, #24]
 8001bba:	f04f 0200 	mov.w	r2, #0
 8001bbe:	f04f 0300 	mov.w	r3, #0
 8001bc2:	2001      	movs	r0, #1
 8001bc4:	f000 fbb8 	bl	8002338 <HAL_FLASH_Program>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
				/* If program operation was failed, a Flash error code is returned */
				if ((MAteeqEmulatedEEPROM::EMULATED_EEPROM_STATUS)FlashStatus != MAteeqEmulatedEEPROM::EMULATED_EEPROM_STATUS_OK)
 8001bce:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	f000 81c0 	beq.w	8001f58 <_ZN20MAteeqEmulatedEEPROM7EE_InitEv+0x49c>
				{
					return FlashStatus;
 8001bd8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001bdc:	b29b      	uxth	r3, r3
 8001bde:	e1c3      	b.n	8001f68 <_ZN20MAteeqEmulatedEEPROM7EE_InitEv+0x4ac>
				}
			}
			else /* First EEPROM access (Page0&1 are erased) or invalid state -> format EEPROM */
			{
				/* Erase both Page0 and Page1 and set Page0 as valid page */
				FlashStatus = (HAL_StatusTypeDef)this->EE_Format();
 8001be0:	6878      	ldr	r0, [r7, #4]
 8001be2:	f7ff fd65 	bl	80016b0 <_ZN20MAteeqEmulatedEEPROM9EE_FormatEv>
 8001be6:	4603      	mov	r3, r0
 8001be8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
				/* If erase/program operation was failed, a Flash error code is returned */
				if ((MAteeqEmulatedEEPROM::EMULATED_EEPROM_STATUS)FlashStatus != MAteeqEmulatedEEPROM::EMULATED_EEPROM_STATUS_OK)
 8001bec:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	f000 81b1 	beq.w	8001f58 <_ZN20MAteeqEmulatedEEPROM7EE_InitEv+0x49c>
				{
					return FlashStatus;
 8001bf6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001bfa:	b29b      	uxth	r3, r3
 8001bfc:	e1b4      	b.n	8001f68 <_ZN20MAteeqEmulatedEEPROM7EE_InitEv+0x4ac>
				}
			}
			break;

		case MAteeqEmulatedEEPROM::EMULATED_EEPROM_DEFINITION_RECEIVE_DATA:
			if (PageStatus1 == MAteeqEmulatedEEPROM::EMULATED_EEPROM_DEFINITION_VALID_PAGE) /* Page0 receive, Page1 valid */
 8001bfe:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	f040 8085 	bne.w	8001d10 <_ZN20MAteeqEmulatedEEPROM7EE_InitEv+0x254>
			{
				/* Transfer data from Page1 to Page0 */
				for (VarIdx = 0; VarIdx < 1; VarIdx++)
 8001c06:	2300      	movs	r3, #0
 8001c08:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8001c0a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	dc40      	bgt.n	8001c92 <_ZN20MAteeqEmulatedEEPROM7EE_InitEv+0x1d6>
				{
					if ((*(__IO unsigned short*) (this->EMULATED_EEPROM_DEFINITION_PAGE0_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	68db      	ldr	r3, [r3, #12]
 8001c14:	3306      	adds	r3, #6
 8001c16:	881b      	ldrh	r3, [r3, #0]
 8001c18:	b29a      	uxth	r2, r3
 8001c1a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001c1c:	6879      	ldr	r1, [r7, #4]
 8001c1e:	3310      	adds	r3, #16
 8001c20:	005b      	lsls	r3, r3, #1
 8001c22:	440b      	add	r3, r1
 8001c24:	885b      	ldrh	r3, [r3, #2]
 8001c26:	429a      	cmp	r2, r3
 8001c28:	bf0c      	ite	eq
 8001c2a:	2301      	moveq	r3, #1
 8001c2c:	2300      	movne	r3, #0
 8001c2e:	b2db      	uxtb	r3, r3
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d001      	beq.n	8001c38 <_ZN20MAteeqEmulatedEEPROM7EE_InitEv+0x17c>
					{
						x = VarIdx;
 8001c34:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001c36:	85bb      	strh	r3, [r7, #44]	; 0x2c
					}
					if (VarIdx != x)
 8001c38:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8001c3a:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8001c3e:	429a      	cmp	r2, r3
 8001c40:	d023      	beq.n	8001c8a <_ZN20MAteeqEmulatedEEPROM7EE_InitEv+0x1ce>
					{
						/* Read the last variables' updates */
						ReadStatus = this->EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 8001c42:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001c44:	687a      	ldr	r2, [r7, #4]
 8001c46:	3310      	adds	r3, #16
 8001c48:	005b      	lsls	r3, r3, #1
 8001c4a:	4413      	add	r3, r2
 8001c4c:	8859      	ldrh	r1, [r3, #2]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	3328      	adds	r3, #40	; 0x28
 8001c52:	461a      	mov	r2, r3
 8001c54:	6878      	ldr	r0, [r7, #4]
 8001c56:	f000 f98b 	bl	8001f70 <_ZN20MAteeqEmulatedEEPROM15EE_ReadVariableEtPt>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	84bb      	strh	r3, [r7, #36]	; 0x24
						/* In case variable corresponding to the virtual address was found */
						if (ReadStatus != 0x1)
 8001c5e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001c60:	2b01      	cmp	r3, #1
 8001c62:	d012      	beq.n	8001c8a <_ZN20MAteeqEmulatedEEPROM7EE_InitEv+0x1ce>
						{
							/* Transfer the variable to the Page0 */
							EepromStatus = this->EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 8001c64:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001c66:	687a      	ldr	r2, [r7, #4]
 8001c68:	3310      	adds	r3, #16
 8001c6a:	005b      	lsls	r3, r3, #1
 8001c6c:	4413      	add	r3, r2
 8001c6e:	8859      	ldrh	r1, [r3, #2]
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c74:	461a      	mov	r2, r3
 8001c76:	6878      	ldr	r0, [r7, #4]
 8001c78:	f7ff fdcc 	bl	8001814 <_ZN20MAteeqEmulatedEEPROM30EE_VerifyPageFullWriteVariableEtt>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	84fb      	strh	r3, [r7, #38]	; 0x26
							/* If program operation was failed, a Flash error code is returned */
							if (EepromStatus != MAteeqEmulatedEEPROM::EMULATED_EEPROM_STATUS_OK)
 8001c80:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d001      	beq.n	8001c8a <_ZN20MAteeqEmulatedEEPROM7EE_InitEv+0x1ce>
							{
								return EepromStatus;
 8001c86:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001c88:	e16e      	b.n	8001f68 <_ZN20MAteeqEmulatedEEPROM7EE_InitEv+0x4ac>
				for (VarIdx = 0; VarIdx < 1; VarIdx++)
 8001c8a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001c8c:	3301      	adds	r3, #1
 8001c8e:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8001c90:	e7bb      	b.n	8001c0a <_ZN20MAteeqEmulatedEEPROM7EE_InitEv+0x14e>
							}
						}
					}
				}
				/* Mark Page0 as valid */
				FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, this->EMULATED_EEPROM_DEFINITION_PAGE0_BASE_ADDRESS, MAteeqEmulatedEEPROM::EMULATED_EEPROM_DEFINITION_VALID_PAGE);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	68d9      	ldr	r1, [r3, #12]
 8001c96:	f04f 0200 	mov.w	r2, #0
 8001c9a:	f04f 0300 	mov.w	r3, #0
 8001c9e:	2001      	movs	r0, #1
 8001ca0:	f000 fb4a 	bl	8002338 <HAL_FLASH_Program>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
				/* If program operation was failed, a Flash error code is returned */
				if ((MAteeqEmulatedEEPROM::EMULATED_EEPROM_STATUS)FlashStatus != MAteeqEmulatedEEPROM::EMULATED_EEPROM_STATUS_OK)
 8001caa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d003      	beq.n	8001cba <_ZN20MAteeqEmulatedEEPROM7EE_InitEv+0x1fe>
				{
					return FlashStatus;
 8001cb2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001cb6:	b29b      	uxth	r3, r3
 8001cb8:	e156      	b.n	8001f68 <_ZN20MAteeqEmulatedEEPROM7EE_InitEv+0x4ac>
				}
				pEraseInit.Sector = this->EMULATED_EEPROM_DEFINITION_PAGE1_ID;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001cc0:	613b      	str	r3, [r7, #16]
				pEraseInit.NbSectors = 1;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	617b      	str	r3, [r7, #20]
				pEraseInit.VoltageRange = MAteeqEmulatedEEPROM::EMULATED_EEPROM_DEFINITION_VOLTAGE_RANGE;
 8001cc6:	2302      	movs	r3, #2
 8001cc8:	61bb      	str	r3, [r7, #24]
				/* Erase Page1 */
				if (!this->EE_VerifyPageFullyErased(this->EMULATED_EEPROM_DEFINITION_PAGE1_BASE_ADDRESS))
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	699b      	ldr	r3, [r3, #24]
 8001cce:	4619      	mov	r1, r3
 8001cd0:	6878      	ldr	r0, [r7, #4]
 8001cd2:	f7ff fecd 	bl	8001a70 <_ZN20MAteeqEmulatedEEPROM24EE_VerifyPageFullyErasedEj>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	bf0c      	ite	eq
 8001cdc:	2301      	moveq	r3, #1
 8001cde:	2300      	movne	r3, #0
 8001ce0:	b2db      	uxtb	r3, r3
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	f000 813a 	beq.w	8001f5c <_ZN20MAteeqEmulatedEEPROM7EE_InitEv+0x4a0>
				{
					FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8001ce8:	f107 021c 	add.w	r2, r7, #28
 8001cec:	f107 0308 	add.w	r3, r7, #8
 8001cf0:	4611      	mov	r1, r2
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f000 fbcc 	bl	8002490 <HAL_FLASHEx_Erase>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
					/* If erase operation was failed, a Flash error code is returned */
					if ((MAteeqEmulatedEEPROM::EMULATED_EEPROM_STATUS)FlashStatus != MAteeqEmulatedEEPROM::EMULATED_EEPROM_STATUS_OK)
 8001cfe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	f000 812a 	beq.w	8001f5c <_ZN20MAteeqEmulatedEEPROM7EE_InitEv+0x4a0>
					{
						return FlashStatus;
 8001d08:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001d0c:	b29b      	uxth	r3, r3
 8001d0e:	e12b      	b.n	8001f68 <_ZN20MAteeqEmulatedEEPROM7EE_InitEv+0x4ac>
					}
				}
			}
			else if (PageStatus1 == MAteeqEmulatedEEPROM::EMULATED_EEPROM_DEFINITION_ERASED) /* Page0 receive, Page1 erased */
 8001d10:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001d12:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d13d      	bne.n	8001d96 <_ZN20MAteeqEmulatedEEPROM7EE_InitEv+0x2da>
			{
				pEraseInit.Sector = this->EMULATED_EEPROM_DEFINITION_PAGE1_ID;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d20:	613b      	str	r3, [r7, #16]
				pEraseInit.NbSectors = 1;
 8001d22:	2301      	movs	r3, #1
 8001d24:	617b      	str	r3, [r7, #20]
				pEraseInit.VoltageRange = MAteeqEmulatedEEPROM::EMULATED_EEPROM_DEFINITION_VOLTAGE_RANGE;
 8001d26:	2302      	movs	r3, #2
 8001d28:	61bb      	str	r3, [r7, #24]
				/* Erase Page1 */
				if (!this->EE_VerifyPageFullyErased(this->EMULATED_EEPROM_DEFINITION_PAGE1_BASE_ADDRESS))
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	699b      	ldr	r3, [r3, #24]
 8001d2e:	4619      	mov	r1, r3
 8001d30:	6878      	ldr	r0, [r7, #4]
 8001d32:	f7ff fe9d 	bl	8001a70 <_ZN20MAteeqEmulatedEEPROM24EE_VerifyPageFullyErasedEj>
 8001d36:	4603      	mov	r3, r0
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	bf0c      	ite	eq
 8001d3c:	2301      	moveq	r3, #1
 8001d3e:	2300      	movne	r3, #0
 8001d40:	b2db      	uxtb	r3, r3
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d012      	beq.n	8001d6c <_ZN20MAteeqEmulatedEEPROM7EE_InitEv+0x2b0>
				{
					FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8001d46:	f107 021c 	add.w	r2, r7, #28
 8001d4a:	f107 0308 	add.w	r3, r7, #8
 8001d4e:	4611      	mov	r1, r2
 8001d50:	4618      	mov	r0, r3
 8001d52:	f000 fb9d 	bl	8002490 <HAL_FLASHEx_Erase>
 8001d56:	4603      	mov	r3, r0
 8001d58:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
					/* If erase operation was failed, a Flash error code is returned */
					if ((MAteeqEmulatedEEPROM::EMULATED_EEPROM_STATUS)FlashStatus != MAteeqEmulatedEEPROM::EMULATED_EEPROM_STATUS_OK)
 8001d5c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d003      	beq.n	8001d6c <_ZN20MAteeqEmulatedEEPROM7EE_InitEv+0x2b0>
					{
						return FlashStatus;
 8001d64:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001d68:	b29b      	uxth	r3, r3
 8001d6a:	e0fd      	b.n	8001f68 <_ZN20MAteeqEmulatedEEPROM7EE_InitEv+0x4ac>
					}
				}
				/* Mark Page0 as valid */
				FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, this->EMULATED_EEPROM_DEFINITION_PAGE0_BASE_ADDRESS, MAteeqEmulatedEEPROM::EMULATED_EEPROM_DEFINITION_VALID_PAGE);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	68d9      	ldr	r1, [r3, #12]
 8001d70:	f04f 0200 	mov.w	r2, #0
 8001d74:	f04f 0300 	mov.w	r3, #0
 8001d78:	2001      	movs	r0, #1
 8001d7a:	f000 fadd 	bl	8002338 <HAL_FLASH_Program>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
				/* If program operation was failed, a Flash error code is returned */
				if ((MAteeqEmulatedEEPROM::EMULATED_EEPROM_STATUS)FlashStatus != MAteeqEmulatedEEPROM::EMULATED_EEPROM_STATUS_OK)
 8001d84:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	f000 80e7 	beq.w	8001f5c <_ZN20MAteeqEmulatedEEPROM7EE_InitEv+0x4a0>
				{
					return FlashStatus;
 8001d8e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001d92:	b29b      	uxth	r3, r3
 8001d94:	e0e8      	b.n	8001f68 <_ZN20MAteeqEmulatedEEPROM7EE_InitEv+0x4ac>
				}
			}
			else /* Invalid state -> format eeprom */
			{
				/* Erase both Page0 and Page1 and set Page0 as valid page */
				FlashStatus = (HAL_StatusTypeDef)this->EE_Format();
 8001d96:	6878      	ldr	r0, [r7, #4]
 8001d98:	f7ff fc8a 	bl	80016b0 <_ZN20MAteeqEmulatedEEPROM9EE_FormatEv>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
				/* If erase/program operation was failed, a Flash error code is returned */
				if ((MAteeqEmulatedEEPROM::EMULATED_EEPROM_STATUS)FlashStatus != MAteeqEmulatedEEPROM::EMULATED_EEPROM_STATUS_OK)
 8001da2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	f000 80d8 	beq.w	8001f5c <_ZN20MAteeqEmulatedEEPROM7EE_InitEv+0x4a0>
				{
					return FlashStatus;
 8001dac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001db0:	b29b      	uxth	r3, r3
 8001db2:	e0d9      	b.n	8001f68 <_ZN20MAteeqEmulatedEEPROM7EE_InitEv+0x4ac>
				}
			}
			break;

		case MAteeqEmulatedEEPROM::EMULATED_EEPROM_DEFINITION_VALID_PAGE:
			if (PageStatus1 == MAteeqEmulatedEEPROM::EMULATED_EEPROM_DEFINITION_VALID_PAGE) /* Invalid state -> format eeprom */
 8001db4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d10e      	bne.n	8001dd8 <_ZN20MAteeqEmulatedEEPROM7EE_InitEv+0x31c>
			{
				/* Erase both Page0 and Page1 and set Page0 as valid page */
				FlashStatus = (HAL_StatusTypeDef)this->EE_Format();
 8001dba:	6878      	ldr	r0, [r7, #4]
 8001dbc:	f7ff fc78 	bl	80016b0 <_ZN20MAteeqEmulatedEEPROM9EE_FormatEv>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
				/* If erase/program operation was failed, a Flash error code is returned */
				if ((MAteeqEmulatedEEPROM::EMULATED_EEPROM_STATUS)FlashStatus != MAteeqEmulatedEEPROM::EMULATED_EEPROM_STATUS_OK)
 8001dc6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	f000 80c8 	beq.w	8001f60 <_ZN20MAteeqEmulatedEEPROM7EE_InitEv+0x4a4>
				{
					return FlashStatus;
 8001dd0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001dd4:	b29b      	uxth	r3, r3
 8001dd6:	e0c7      	b.n	8001f68 <_ZN20MAteeqEmulatedEEPROM7EE_InitEv+0x4ac>
				}
			}
			else if (PageStatus1 == MAteeqEmulatedEEPROM::EMULATED_EEPROM_DEFINITION_ERASED) /* Page0 valid, Page1 erased */
 8001dd8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001dda:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d12a      	bne.n	8001e38 <_ZN20MAteeqEmulatedEEPROM7EE_InitEv+0x37c>
			{
				pEraseInit.Sector = this->EMULATED_EEPROM_DEFINITION_PAGE1_ID;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001de8:	613b      	str	r3, [r7, #16]
				pEraseInit.NbSectors = 1;
 8001dea:	2301      	movs	r3, #1
 8001dec:	617b      	str	r3, [r7, #20]
				pEraseInit.VoltageRange = MAteeqEmulatedEEPROM::EMULATED_EEPROM_DEFINITION_VOLTAGE_RANGE;
 8001dee:	2302      	movs	r3, #2
 8001df0:	61bb      	str	r3, [r7, #24]
				/* Erase Page1 */
				if (!this->EE_VerifyPageFullyErased(this->EMULATED_EEPROM_DEFINITION_PAGE1_BASE_ADDRESS))
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	699b      	ldr	r3, [r3, #24]
 8001df6:	4619      	mov	r1, r3
 8001df8:	6878      	ldr	r0, [r7, #4]
 8001dfa:	f7ff fe39 	bl	8001a70 <_ZN20MAteeqEmulatedEEPROM24EE_VerifyPageFullyErasedEj>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	bf0c      	ite	eq
 8001e04:	2301      	moveq	r3, #1
 8001e06:	2300      	movne	r3, #0
 8001e08:	b2db      	uxtb	r3, r3
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	f000 80a8 	beq.w	8001f60 <_ZN20MAteeqEmulatedEEPROM7EE_InitEv+0x4a4>
				{
					FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8001e10:	f107 021c 	add.w	r2, r7, #28
 8001e14:	f107 0308 	add.w	r3, r7, #8
 8001e18:	4611      	mov	r1, r2
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f000 fb38 	bl	8002490 <HAL_FLASHEx_Erase>
 8001e20:	4603      	mov	r3, r0
 8001e22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
					/* If erase operation was failed, a Flash error code is returned */
					if ((MAteeqEmulatedEEPROM::EMULATED_EEPROM_STATUS)FlashStatus != MAteeqEmulatedEEPROM::EMULATED_EEPROM_STATUS_OK)
 8001e26:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	f000 8098 	beq.w	8001f60 <_ZN20MAteeqEmulatedEEPROM7EE_InitEv+0x4a4>
					{
						return FlashStatus;
 8001e30:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001e34:	b29b      	uxth	r3, r3
 8001e36:	e097      	b.n	8001f68 <_ZN20MAteeqEmulatedEEPROM7EE_InitEv+0x4ac>
				}
			}
			else /* Page0 valid, Page1 receive */
			{
				/* Transfer data from Page0 to Page1 */
				for (VarIdx = 0; VarIdx < 1; VarIdx++)
 8001e38:	2300      	movs	r3, #0
 8001e3a:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8001e3c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	dc40      	bgt.n	8001ec4 <_ZN20MAteeqEmulatedEEPROM7EE_InitEv+0x408>
				{
					if ((*(__IO unsigned short*) (this->EMULATED_EEPROM_DEFINITION_PAGE1_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	699b      	ldr	r3, [r3, #24]
 8001e46:	3306      	adds	r3, #6
 8001e48:	881b      	ldrh	r3, [r3, #0]
 8001e4a:	b29a      	uxth	r2, r3
 8001e4c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001e4e:	6879      	ldr	r1, [r7, #4]
 8001e50:	3310      	adds	r3, #16
 8001e52:	005b      	lsls	r3, r3, #1
 8001e54:	440b      	add	r3, r1
 8001e56:	885b      	ldrh	r3, [r3, #2]
 8001e58:	429a      	cmp	r2, r3
 8001e5a:	bf0c      	ite	eq
 8001e5c:	2301      	moveq	r3, #1
 8001e5e:	2300      	movne	r3, #0
 8001e60:	b2db      	uxtb	r3, r3
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d001      	beq.n	8001e6a <_ZN20MAteeqEmulatedEEPROM7EE_InitEv+0x3ae>
					{
						x = VarIdx;
 8001e66:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001e68:	85bb      	strh	r3, [r7, #44]	; 0x2c
					}
					if (VarIdx != x)
 8001e6a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8001e6c:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8001e70:	429a      	cmp	r2, r3
 8001e72:	d023      	beq.n	8001ebc <_ZN20MAteeqEmulatedEEPROM7EE_InitEv+0x400>
					{
						/* Read the last variables' updates */
						ReadStatus = this->EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 8001e74:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001e76:	687a      	ldr	r2, [r7, #4]
 8001e78:	3310      	adds	r3, #16
 8001e7a:	005b      	lsls	r3, r3, #1
 8001e7c:	4413      	add	r3, r2
 8001e7e:	8859      	ldrh	r1, [r3, #2]
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	3328      	adds	r3, #40	; 0x28
 8001e84:	461a      	mov	r2, r3
 8001e86:	6878      	ldr	r0, [r7, #4]
 8001e88:	f000 f872 	bl	8001f70 <_ZN20MAteeqEmulatedEEPROM15EE_ReadVariableEtPt>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	84bb      	strh	r3, [r7, #36]	; 0x24
						/* In case variable corresponding to the virtual address was found */
						if (ReadStatus != 0x1)
 8001e90:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001e92:	2b01      	cmp	r3, #1
 8001e94:	d012      	beq.n	8001ebc <_ZN20MAteeqEmulatedEEPROM7EE_InitEv+0x400>
						{
							/* Transfer the variable to the Page1 */
							EepromStatus = this->EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 8001e96:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001e98:	687a      	ldr	r2, [r7, #4]
 8001e9a:	3310      	adds	r3, #16
 8001e9c:	005b      	lsls	r3, r3, #1
 8001e9e:	4413      	add	r3, r2
 8001ea0:	8859      	ldrh	r1, [r3, #2]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ea6:	461a      	mov	r2, r3
 8001ea8:	6878      	ldr	r0, [r7, #4]
 8001eaa:	f7ff fcb3 	bl	8001814 <_ZN20MAteeqEmulatedEEPROM30EE_VerifyPageFullWriteVariableEtt>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	84fb      	strh	r3, [r7, #38]	; 0x26
							/* If program operation was failed, a Flash error code is returned */
							if (EepromStatus != MAteeqEmulatedEEPROM::EMULATED_EEPROM_STATUS_OK)
 8001eb2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d001      	beq.n	8001ebc <_ZN20MAteeqEmulatedEEPROM7EE_InitEv+0x400>
							{
								return EepromStatus;
 8001eb8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001eba:	e055      	b.n	8001f68 <_ZN20MAteeqEmulatedEEPROM7EE_InitEv+0x4ac>
				for (VarIdx = 0; VarIdx < 1; VarIdx++)
 8001ebc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001ebe:	3301      	adds	r3, #1
 8001ec0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8001ec2:	e7bb      	b.n	8001e3c <_ZN20MAteeqEmulatedEEPROM7EE_InitEv+0x380>
							}
						}
					}
				}
				/* Mark Page1 as valid */
				FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, this->EMULATED_EEPROM_DEFINITION_PAGE1_BASE_ADDRESS, MAteeqEmulatedEEPROM::EMULATED_EEPROM_DEFINITION_VALID_PAGE);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6999      	ldr	r1, [r3, #24]
 8001ec8:	f04f 0200 	mov.w	r2, #0
 8001ecc:	f04f 0300 	mov.w	r3, #0
 8001ed0:	2001      	movs	r0, #1
 8001ed2:	f000 fa31 	bl	8002338 <HAL_FLASH_Program>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
				/* If program operation was failed, a Flash error code is returned */
				if ((MAteeqEmulatedEEPROM::EMULATED_EEPROM_STATUS)FlashStatus != MAteeqEmulatedEEPROM::EMULATED_EEPROM_STATUS_OK)
 8001edc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d003      	beq.n	8001eec <_ZN20MAteeqEmulatedEEPROM7EE_InitEv+0x430>
				{
					return FlashStatus;
 8001ee4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001ee8:	b29b      	uxth	r3, r3
 8001eea:	e03d      	b.n	8001f68 <_ZN20MAteeqEmulatedEEPROM7EE_InitEv+0x4ac>
				}
				pEraseInit.Sector = this->EMULATED_EEPROM_DEFINITION_PAGE0_ID;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	7d1b      	ldrb	r3, [r3, #20]
 8001ef0:	613b      	str	r3, [r7, #16]
				pEraseInit.NbSectors = 1;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	617b      	str	r3, [r7, #20]
				pEraseInit.VoltageRange = MAteeqEmulatedEEPROM::EMULATED_EEPROM_DEFINITION_VOLTAGE_RANGE;
 8001ef6:	2302      	movs	r3, #2
 8001ef8:	61bb      	str	r3, [r7, #24]
				/* Erase Page0 */
				if (!this->EE_VerifyPageFullyErased(this->EMULATED_EEPROM_DEFINITION_PAGE0_BASE_ADDRESS))
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	68db      	ldr	r3, [r3, #12]
 8001efe:	4619      	mov	r1, r3
 8001f00:	6878      	ldr	r0, [r7, #4]
 8001f02:	f7ff fdb5 	bl	8001a70 <_ZN20MAteeqEmulatedEEPROM24EE_VerifyPageFullyErasedEj>
 8001f06:	4603      	mov	r3, r0
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	bf0c      	ite	eq
 8001f0c:	2301      	moveq	r3, #1
 8001f0e:	2300      	movne	r3, #0
 8001f10:	b2db      	uxtb	r3, r3
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d024      	beq.n	8001f60 <_ZN20MAteeqEmulatedEEPROM7EE_InitEv+0x4a4>
				{
					FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8001f16:	f107 021c 	add.w	r2, r7, #28
 8001f1a:	f107 0308 	add.w	r3, r7, #8
 8001f1e:	4611      	mov	r1, r2
 8001f20:	4618      	mov	r0, r3
 8001f22:	f000 fab5 	bl	8002490 <HAL_FLASHEx_Erase>
 8001f26:	4603      	mov	r3, r0
 8001f28:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
					/* If erase operation was failed, a Flash error code is returned */
					if ((MAteeqEmulatedEEPROM::EMULATED_EEPROM_STATUS)FlashStatus != MAteeqEmulatedEEPROM::EMULATED_EEPROM_STATUS_OK)
 8001f2c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d015      	beq.n	8001f60 <_ZN20MAteeqEmulatedEEPROM7EE_InitEv+0x4a4>
					{
						return FlashStatus;
 8001f34:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001f38:	b29b      	uxth	r3, r3
 8001f3a:	e015      	b.n	8001f68 <_ZN20MAteeqEmulatedEEPROM7EE_InitEv+0x4ac>
			}
			break;

		default: /* Any other state -> format eeprom */
			/* Erase both Page0 and Page1 and set Page0 as valid page */
			FlashStatus = (HAL_StatusTypeDef)this->EE_Format();
 8001f3c:	6878      	ldr	r0, [r7, #4]
 8001f3e:	f7ff fbb7 	bl	80016b0 <_ZN20MAteeqEmulatedEEPROM9EE_FormatEv>
 8001f42:	4603      	mov	r3, r0
 8001f44:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
			/* If erase/program operation was failed, a Flash error code is returned */
			if ((MAteeqEmulatedEEPROM::EMULATED_EEPROM_STATUS)FlashStatus != MAteeqEmulatedEEPROM::EMULATED_EEPROM_STATUS_OK)
 8001f48:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d009      	beq.n	8001f64 <_ZN20MAteeqEmulatedEEPROM7EE_InitEv+0x4a8>
			{
				return FlashStatus;
 8001f50:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001f54:	b29b      	uxth	r3, r3
 8001f56:	e007      	b.n	8001f68 <_ZN20MAteeqEmulatedEEPROM7EE_InitEv+0x4ac>
			break;
 8001f58:	bf00      	nop
 8001f5a:	e004      	b.n	8001f66 <_ZN20MAteeqEmulatedEEPROM7EE_InitEv+0x4aa>
			break;
 8001f5c:	bf00      	nop
 8001f5e:	e002      	b.n	8001f66 <_ZN20MAteeqEmulatedEEPROM7EE_InitEv+0x4aa>
			break;
 8001f60:	bf00      	nop
 8001f62:	e000      	b.n	8001f66 <_ZN20MAteeqEmulatedEEPROM7EE_InitEv+0x4aa>
			}
			break;
 8001f64:	bf00      	nop
	}

	return MAteeqEmulatedEEPROM::EMULATED_EEPROM_STATUS_OK;
 8001f66:	2300      	movs	r3, #0
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	3730      	adds	r7, #48	; 0x30
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bd80      	pop	{r7, pc}

08001f70 <_ZN20MAteeqEmulatedEEPROM15EE_ReadVariableEtPt>:
unsigned short MAteeqEmulatedEEPROM::EE_ReadVariable(unsigned short VirtAddress, unsigned short* Data)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b088      	sub	sp, #32
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	60f8      	str	r0, [r7, #12]
 8001f78:	460b      	mov	r3, r1
 8001f7a:	607a      	str	r2, [r7, #4]
 8001f7c:	817b      	strh	r3, [r7, #10]
	unsigned short ValidPage = MAteeqEmulatedEEPROM::EMULATED_EEPROM_DEFINITION_PAGE0;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	82fb      	strh	r3, [r7, #22]
	unsigned short AddressValue = 0x5555, ReadStatus = 1;
 8001f82:	f245 5355 	movw	r3, #21845	; 0x5555
 8001f86:	82bb      	strh	r3, [r7, #20]
 8001f88:	2301      	movs	r3, #1
 8001f8a:	83fb      	strh	r3, [r7, #30]
	unsigned int Address = this->EMULATED_EEPROM_DEFINITION_EEPROM_START_ADDRESS;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	689b      	ldr	r3, [r3, #8]
 8001f90:	61bb      	str	r3, [r7, #24]
	unsigned int PageStartAddress = this->EMULATED_EEPROM_DEFINITION_EEPROM_START_ADDRESS;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	689b      	ldr	r3, [r3, #8]
 8001f96:	613b      	str	r3, [r7, #16]

	/* Get active Page for read operation */
	ValidPage = this->EE_FindValidPage(MAteeqEmulatedEEPROM::EMULATED_EEPROM_DEFINITION_READ_FROM_VALID_PAGE);
 8001f98:	2100      	movs	r1, #0
 8001f9a:	68f8      	ldr	r0, [r7, #12]
 8001f9c:	f7ff fbf6 	bl	800178c <_ZN20MAteeqEmulatedEEPROM16EE_FindValidPageEt>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	82fb      	strh	r3, [r7, #22]

	/* Check if there is no valid page */
	if (ValidPage == MAteeqEmulatedEEPROM::EMULATED_EEPROM_DEFINITION_NO_VALID_PAGE)
 8001fa4:	8afb      	ldrh	r3, [r7, #22]
 8001fa6:	2bab      	cmp	r3, #171	; 0xab
 8001fa8:	d101      	bne.n	8001fae <_ZN20MAteeqEmulatedEEPROM15EE_ReadVariableEtPt+0x3e>
	{
		return MAteeqEmulatedEEPROM::EMULATED_EEPROM_DEFINITION_NO_VALID_PAGE;
 8001faa:	23ab      	movs	r3, #171	; 0xab
 8001fac:	e02e      	b.n	800200c <_ZN20MAteeqEmulatedEEPROM15EE_ReadVariableEtPt+0x9c>
	}

	/* Get the valid Page start Address */
	PageStartAddress = (unsigned int) (this->EMULATED_EEPROM_DEFINITION_EEPROM_START_ADDRESS + (unsigned int) (ValidPage * this->EMULATED_EEPROM_DEFINITION_PAGE_SIZE));
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	689a      	ldr	r2, [r3, #8]
 8001fb2:	8afb      	ldrh	r3, [r7, #22]
 8001fb4:	68f9      	ldr	r1, [r7, #12]
 8001fb6:	6849      	ldr	r1, [r1, #4]
 8001fb8:	fb01 f303 	mul.w	r3, r1, r3
 8001fbc:	4413      	add	r3, r2
 8001fbe:	613b      	str	r3, [r7, #16]

	/* Get the valid Page end Address */
	Address = (unsigned int) ((this->EMULATED_EEPROM_DEFINITION_EEPROM_START_ADDRESS - 2) + (unsigned int) ((1 + ValidPage) * this->EMULATED_EEPROM_DEFINITION_PAGE_SIZE));
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	689a      	ldr	r2, [r3, #8]
 8001fc4:	8afb      	ldrh	r3, [r7, #22]
 8001fc6:	3301      	adds	r3, #1
 8001fc8:	4619      	mov	r1, r3
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	fb03 f301 	mul.w	r3, r3, r1
 8001fd2:	4413      	add	r3, r2
 8001fd4:	3b02      	subs	r3, #2
 8001fd6:	61bb      	str	r3, [r7, #24]

	/* Check each active page address starting from end */
	while (Address > (PageStartAddress + 2))
 8001fd8:	693b      	ldr	r3, [r7, #16]
 8001fda:	1c9a      	adds	r2, r3, #2
 8001fdc:	69bb      	ldr	r3, [r7, #24]
 8001fde:	429a      	cmp	r2, r3
 8001fe0:	d213      	bcs.n	800200a <_ZN20MAteeqEmulatedEEPROM15EE_ReadVariableEtPt+0x9a>
	{
		/* Get the current location content to be compared with virtual address */
		AddressValue = (*(__IO unsigned short*) Address);
 8001fe2:	69bb      	ldr	r3, [r7, #24]
 8001fe4:	881b      	ldrh	r3, [r3, #0]
 8001fe6:	82bb      	strh	r3, [r7, #20]

		/* Compare the read address with the virtual address */
		if (AddressValue == VirtAddress)
 8001fe8:	8aba      	ldrh	r2, [r7, #20]
 8001fea:	897b      	ldrh	r3, [r7, #10]
 8001fec:	429a      	cmp	r2, r3
 8001fee:	d108      	bne.n	8002002 <_ZN20MAteeqEmulatedEEPROM15EE_ReadVariableEtPt+0x92>
		{
			/* Get content of Address-2 which is variable value */
			*Data = (*(__IO unsigned short*) (Address - 2));
 8001ff0:	69bb      	ldr	r3, [r7, #24]
 8001ff2:	3b02      	subs	r3, #2
 8001ff4:	881b      	ldrh	r3, [r3, #0]
 8001ff6:	b29a      	uxth	r2, r3
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	801a      	strh	r2, [r3, #0]

			/* In case variable value is read, reset ReadStatus flag */
			ReadStatus = 0;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	83fb      	strh	r3, [r7, #30]

			break;
 8002000:	e003      	b.n	800200a <_ZN20MAteeqEmulatedEEPROM15EE_ReadVariableEtPt+0x9a>
		}
		else
		{
			/* Next address location */
			Address = Address - 4;
 8002002:	69bb      	ldr	r3, [r7, #24]
 8002004:	3b04      	subs	r3, #4
 8002006:	61bb      	str	r3, [r7, #24]
	while (Address > (PageStartAddress + 2))
 8002008:	e7e6      	b.n	8001fd8 <_ZN20MAteeqEmulatedEEPROM15EE_ReadVariableEtPt+0x68>
		}
	}

	/* Return ReadStatus value: (0: variable exist, 1: variable doesn't exist) */
	return ReadStatus;
 800200a:	8bfb      	ldrh	r3, [r7, #30]
}
 800200c:	4618      	mov	r0, r3
 800200e:	3720      	adds	r7, #32
 8002010:	46bd      	mov	sp, r7
 8002012:	bd80      	pop	{r7, pc}

08002014 <_ZN20MAteeqEmulatedEEPROM16EE_WriteVariableEtt>:
unsigned short MAteeqEmulatedEEPROM::EE_WriteVariable(unsigned short VirtAddress, unsigned short Data)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b084      	sub	sp, #16
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
 800201c:	460b      	mov	r3, r1
 800201e:	807b      	strh	r3, [r7, #2]
 8002020:	4613      	mov	r3, r2
 8002022:	803b      	strh	r3, [r7, #0]
	unsigned short Status = 0;
 8002024:	2300      	movs	r3, #0
 8002026:	81fb      	strh	r3, [r7, #14]

	/* Write the variable virtual address and value in the EEPROM */
	Status = this->EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 8002028:	883a      	ldrh	r2, [r7, #0]
 800202a:	887b      	ldrh	r3, [r7, #2]
 800202c:	4619      	mov	r1, r3
 800202e:	6878      	ldr	r0, [r7, #4]
 8002030:	f7ff fbf0 	bl	8001814 <_ZN20MAteeqEmulatedEEPROM30EE_VerifyPageFullWriteVariableEtt>
 8002034:	4603      	mov	r3, r0
 8002036:	81fb      	strh	r3, [r7, #14]

	/* In case the EEPROM active page is full */
	if (Status == MAteeqEmulatedEEPROM::EMULATED_EEPROM_DEFINITION_PAGE_FULL)
 8002038:	89fb      	ldrh	r3, [r7, #14]
 800203a:	2b80      	cmp	r3, #128	; 0x80
 800203c:	d107      	bne.n	800204e <_ZN20MAteeqEmulatedEEPROM16EE_WriteVariableEtt+0x3a>
	{
		/* Perform Page transfer */
		Status = this->EE_PageTransfer(VirtAddress, Data);
 800203e:	883a      	ldrh	r2, [r7, #0]
 8002040:	887b      	ldrh	r3, [r7, #2]
 8002042:	4619      	mov	r1, r3
 8002044:	6878      	ldr	r0, [r7, #4]
 8002046:	f7ff fc51 	bl	80018ec <_ZN20MAteeqEmulatedEEPROM15EE_PageTransferEtt>
 800204a:	4603      	mov	r3, r0
 800204c:	81fb      	strh	r3, [r7, #14]
	}

	/* Return last operation status */
	return Status;
 800204e:	89fb      	ldrh	r3, [r7, #14]
}
 8002050:	4618      	mov	r0, r3
 8002052:	3710      	adds	r7, #16
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}

08002058 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002058:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800205a:	4a0e      	ldr	r2, [pc, #56]	; (8002094 <HAL_InitTick+0x3c>)
 800205c:	4b0e      	ldr	r3, [pc, #56]	; (8002098 <HAL_InitTick+0x40>)
{
 800205e:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002060:	7818      	ldrb	r0, [r3, #0]
 8002062:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002066:	fbb3 f3f0 	udiv	r3, r3, r0
 800206a:	6810      	ldr	r0, [r2, #0]
 800206c:	fbb0 f0f3 	udiv	r0, r0, r3
 8002070:	f000 f888 	bl	8002184 <HAL_SYSTICK_Config>
 8002074:	4604      	mov	r4, r0
 8002076:	b958      	cbnz	r0, 8002090 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002078:	2d0f      	cmp	r5, #15
 800207a:	d809      	bhi.n	8002090 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800207c:	4602      	mov	r2, r0
 800207e:	4629      	mov	r1, r5
 8002080:	f04f 30ff 	mov.w	r0, #4294967295
 8002084:	f000 f84a 	bl	800211c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002088:	4b04      	ldr	r3, [pc, #16]	; (800209c <HAL_InitTick+0x44>)
 800208a:	4620      	mov	r0, r4
 800208c:	601d      	str	r5, [r3, #0]
 800208e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8002090:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8002092:	bd38      	pop	{r3, r4, r5, pc}
 8002094:	20000008 	.word	0x20000008
 8002098:	20000000 	.word	0x20000000
 800209c:	20000004 	.word	0x20000004

080020a0 <HAL_Init>:
{
 80020a0:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80020a2:	4b0b      	ldr	r3, [pc, #44]	; (80020d0 <HAL_Init+0x30>)
 80020a4:	681a      	ldr	r2, [r3, #0]
 80020a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020aa:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80020ac:	681a      	ldr	r2, [r3, #0]
 80020ae:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80020b2:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020b4:	681a      	ldr	r2, [r3, #0]
 80020b6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80020ba:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020bc:	2003      	movs	r0, #3
 80020be:	f000 f81b 	bl	80020f8 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80020c2:	2000      	movs	r0, #0
 80020c4:	f7ff ffc8 	bl	8002058 <HAL_InitTick>
  HAL_MspInit();
 80020c8:	f000 fdce 	bl	8002c68 <HAL_MspInit>
}
 80020cc:	2000      	movs	r0, #0
 80020ce:	bd08      	pop	{r3, pc}
 80020d0:	40023c00 	.word	0x40023c00

080020d4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80020d4:	4a03      	ldr	r2, [pc, #12]	; (80020e4 <HAL_IncTick+0x10>)
 80020d6:	4b04      	ldr	r3, [pc, #16]	; (80020e8 <HAL_IncTick+0x14>)
 80020d8:	6811      	ldr	r1, [r2, #0]
 80020da:	781b      	ldrb	r3, [r3, #0]
 80020dc:	440b      	add	r3, r1
 80020de:	6013      	str	r3, [r2, #0]
 80020e0:	4770      	bx	lr
 80020e2:	bf00      	nop
 80020e4:	200000b0 	.word	0x200000b0
 80020e8:	20000000 	.word	0x20000000

080020ec <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80020ec:	4b01      	ldr	r3, [pc, #4]	; (80020f4 <HAL_GetTick+0x8>)
 80020ee:	6818      	ldr	r0, [r3, #0]
}
 80020f0:	4770      	bx	lr
 80020f2:	bf00      	nop
 80020f4:	200000b0 	.word	0x200000b0

080020f8 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020f8:	4a07      	ldr	r2, [pc, #28]	; (8002118 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80020fa:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020fc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002100:	041b      	lsls	r3, r3, #16
 8002102:	0c1b      	lsrs	r3, r3, #16
 8002104:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8002108:	0200      	lsls	r0, r0, #8
 800210a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800210e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8002112:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8002114:	60d3      	str	r3, [r2, #12]
 8002116:	4770      	bx	lr
 8002118:	e000ed00 	.word	0xe000ed00

0800211c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800211c:	4b17      	ldr	r3, [pc, #92]	; (800217c <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800211e:	b530      	push	{r4, r5, lr}
 8002120:	68dc      	ldr	r4, [r3, #12]
 8002122:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002126:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800212a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800212c:	2b04      	cmp	r3, #4
 800212e:	bf28      	it	cs
 8002130:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002132:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002134:	f04f 0501 	mov.w	r5, #1
 8002138:	fa05 f303 	lsl.w	r3, r5, r3
 800213c:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002140:	bf8c      	ite	hi
 8002142:	3c03      	subhi	r4, #3
 8002144:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002146:	4019      	ands	r1, r3
 8002148:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800214a:	fa05 f404 	lsl.w	r4, r5, r4
 800214e:	3c01      	subs	r4, #1
 8002150:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8002152:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002154:	ea42 0201 	orr.w	r2, r2, r1
 8002158:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800215c:	bfaf      	iteee	ge
 800215e:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002162:	f000 000f 	andlt.w	r0, r0, #15
 8002166:	4b06      	ldrlt	r3, [pc, #24]	; (8002180 <HAL_NVIC_SetPriority+0x64>)
 8002168:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800216a:	bfa5      	ittet	ge
 800216c:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8002170:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002172:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002174:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8002178:	bd30      	pop	{r4, r5, pc}
 800217a:	bf00      	nop
 800217c:	e000ed00 	.word	0xe000ed00
 8002180:	e000ed14 	.word	0xe000ed14

08002184 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002184:	3801      	subs	r0, #1
 8002186:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800218a:	d20a      	bcs.n	80021a2 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800218c:	4b06      	ldr	r3, [pc, #24]	; (80021a8 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800218e:	4a07      	ldr	r2, [pc, #28]	; (80021ac <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002190:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002192:	21f0      	movs	r1, #240	; 0xf0
 8002194:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002198:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800219a:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800219c:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800219e:	601a      	str	r2, [r3, #0]
 80021a0:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80021a2:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80021a4:	4770      	bx	lr
 80021a6:	bf00      	nop
 80021a8:	e000e010 	.word	0xe000e010
 80021ac:	e000ed00 	.word	0xe000ed00

080021b0 <FLASH_Program_DoubleWord>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80021b0:	4908      	ldr	r1, [pc, #32]	; (80021d4 <FLASH_Program_DoubleWord+0x24>)
{
 80021b2:	b510      	push	{r4, lr}
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80021b4:	690c      	ldr	r4, [r1, #16]
 80021b6:	f424 7440 	bic.w	r4, r4, #768	; 0x300
 80021ba:	610c      	str	r4, [r1, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80021bc:	690c      	ldr	r4, [r1, #16]
 80021be:	f444 7440 	orr.w	r4, r4, #768	; 0x300
 80021c2:	610c      	str	r4, [r1, #16]
  FLASH->CR |= FLASH_CR_PG;
 80021c4:	690c      	ldr	r4, [r1, #16]
 80021c6:	f044 0401 	orr.w	r4, r4, #1
 80021ca:	610c      	str	r4, [r1, #16]

  /* Program the double-word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80021cc:	6002      	str	r2, [r0, #0]
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 80021ce:	6043      	str	r3, [r0, #4]
 80021d0:	bd10      	pop	{r4, pc}
 80021d2:	bf00      	nop
 80021d4:	40023c00 	.word	0x40023c00

080021d8 <FLASH_Program_Word>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80021d8:	4b07      	ldr	r3, [pc, #28]	; (80021f8 <FLASH_Program_Word+0x20>)
 80021da:	691a      	ldr	r2, [r3, #16]
 80021dc:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80021e0:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 80021e2:	691a      	ldr	r2, [r3, #16]
 80021e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021e8:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 80021ea:	691a      	ldr	r2, [r3, #16]
 80021ec:	f042 0201 	orr.w	r2, r2, #1
 80021f0:	611a      	str	r2, [r3, #16]

  *(__IO uint32_t*)Address = Data;
 80021f2:	6001      	str	r1, [r0, #0]
 80021f4:	4770      	bx	lr
 80021f6:	bf00      	nop
 80021f8:	40023c00 	.word	0x40023c00

080021fc <FLASH_Program_HalfWord>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80021fc:	4b07      	ldr	r3, [pc, #28]	; (800221c <FLASH_Program_HalfWord+0x20>)
 80021fe:	691a      	ldr	r2, [r3, #16]
 8002200:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002204:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8002206:	691a      	ldr	r2, [r3, #16]
 8002208:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800220c:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 800220e:	691a      	ldr	r2, [r3, #16]
 8002210:	f042 0201 	orr.w	r2, r2, #1
 8002214:	611a      	str	r2, [r3, #16]

  *(__IO uint16_t*)Address = Data;
 8002216:	8001      	strh	r1, [r0, #0]
 8002218:	4770      	bx	lr
 800221a:	bf00      	nop
 800221c:	40023c00 	.word	0x40023c00

08002220 <FLASH_SetErrorCode>:
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8002220:	4b20      	ldr	r3, [pc, #128]	; (80022a4 <FLASH_SetErrorCode+0x84>)
 8002222:	68da      	ldr	r2, [r3, #12]
 8002224:	06d0      	lsls	r0, r2, #27
 8002226:	d506      	bpl.n	8002236 <FLASH_SetErrorCode+0x16>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8002228:	491f      	ldr	r1, [pc, #124]	; (80022a8 <FLASH_SetErrorCode+0x88>)
 800222a:	69ca      	ldr	r2, [r1, #28]
 800222c:	f042 0210 	orr.w	r2, r2, #16
 8002230:	61ca      	str	r2, [r1, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8002232:	2210      	movs	r2, #16
 8002234:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8002236:	68da      	ldr	r2, [r3, #12]
 8002238:	0691      	lsls	r1, r2, #26
 800223a:	d506      	bpl.n	800224a <FLASH_SetErrorCode+0x2a>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800223c:	491a      	ldr	r1, [pc, #104]	; (80022a8 <FLASH_SetErrorCode+0x88>)
 800223e:	69ca      	ldr	r2, [r1, #28]
 8002240:	f042 0208 	orr.w	r2, r2, #8
 8002244:	61ca      	str	r2, [r1, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8002246:	2220      	movs	r2, #32
 8002248:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 800224a:	4b16      	ldr	r3, [pc, #88]	; (80022a4 <FLASH_SetErrorCode+0x84>)
 800224c:	68da      	ldr	r2, [r3, #12]
 800224e:	0652      	lsls	r2, r2, #25
 8002250:	d506      	bpl.n	8002260 <FLASH_SetErrorCode+0x40>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8002252:	4915      	ldr	r1, [pc, #84]	; (80022a8 <FLASH_SetErrorCode+0x88>)
 8002254:	69ca      	ldr	r2, [r1, #28]
 8002256:	f042 0204 	orr.w	r2, r2, #4
 800225a:	61ca      	str	r2, [r1, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 800225c:	2240      	movs	r2, #64	; 0x40
 800225e:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8002260:	68da      	ldr	r2, [r3, #12]
 8002262:	0610      	lsls	r0, r2, #24
 8002264:	d506      	bpl.n	8002274 <FLASH_SetErrorCode+0x54>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8002266:	4910      	ldr	r1, [pc, #64]	; (80022a8 <FLASH_SetErrorCode+0x88>)
 8002268:	69ca      	ldr	r2, [r1, #28]
 800226a:	f042 0202 	orr.w	r2, r2, #2
 800226e:	61ca      	str	r2, [r1, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8002270:	2280      	movs	r2, #128	; 0x80
 8002272:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8002274:	4b0b      	ldr	r3, [pc, #44]	; (80022a4 <FLASH_SetErrorCode+0x84>)
 8002276:	68da      	ldr	r2, [r3, #12]
 8002278:	05d1      	lsls	r1, r2, #23
 800227a:	d507      	bpl.n	800228c <FLASH_SetErrorCode+0x6c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 800227c:	490a      	ldr	r1, [pc, #40]	; (80022a8 <FLASH_SetErrorCode+0x88>)
 800227e:	69ca      	ldr	r2, [r1, #28]
 8002280:	f042 0201 	orr.w	r2, r2, #1
 8002284:	61ca      	str	r2, [r1, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8002286:	f44f 7280 	mov.w	r2, #256	; 0x100
 800228a:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 800228c:	68da      	ldr	r2, [r3, #12]
 800228e:	0792      	lsls	r2, r2, #30
 8002290:	d506      	bpl.n	80022a0 <FLASH_SetErrorCode+0x80>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8002292:	4905      	ldr	r1, [pc, #20]	; (80022a8 <FLASH_SetErrorCode+0x88>)
 8002294:	69ca      	ldr	r2, [r1, #28]
 8002296:	f042 0220 	orr.w	r2, r2, #32
 800229a:	61ca      	str	r2, [r1, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 800229c:	2202      	movs	r2, #2
 800229e:	60da      	str	r2, [r3, #12]
 80022a0:	4770      	bx	lr
 80022a2:	bf00      	nop
 80022a4:	40023c00 	.word	0x40023c00
 80022a8:	200000b4 	.word	0x200000b4

080022ac <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80022ac:	4b06      	ldr	r3, [pc, #24]	; (80022c8 <HAL_FLASH_Unlock+0x1c>)
 80022ae:	691a      	ldr	r2, [r3, #16]
 80022b0:	2a00      	cmp	r2, #0
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80022b2:	bfbf      	itttt	lt
 80022b4:	4a05      	ldrlt	r2, [pc, #20]	; (80022cc <HAL_FLASH_Unlock+0x20>)
 80022b6:	605a      	strlt	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80022b8:	f102 3288 	addlt.w	r2, r2, #2290649224	; 0x88888888
 80022bc:	605a      	strlt	r2, [r3, #4]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80022be:	bfba      	itte	lt
 80022c0:	6918      	ldrlt	r0, [r3, #16]
  HAL_StatusTypeDef status = HAL_OK;
 80022c2:	0fc0      	lsrlt	r0, r0, #31
 80022c4:	2000      	movge	r0, #0
}
 80022c6:	4770      	bx	lr
 80022c8:	40023c00 	.word	0x40023c00
 80022cc:	45670123 	.word	0x45670123

080022d0 <HAL_FLASH_Lock>:
  FLASH->CR |= FLASH_CR_LOCK;
 80022d0:	4a03      	ldr	r2, [pc, #12]	; (80022e0 <HAL_FLASH_Lock+0x10>)
 80022d2:	6913      	ldr	r3, [r2, #16]
 80022d4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80022d8:	6113      	str	r3, [r2, #16]
}
 80022da:	2000      	movs	r0, #0
 80022dc:	4770      	bx	lr
 80022de:	bf00      	nop
 80022e0:	40023c00 	.word	0x40023c00

080022e4 <FLASH_WaitForLastOperation>:
{ 
 80022e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80022e6:	4b12      	ldr	r3, [pc, #72]	; (8002330 <FLASH_WaitForLastOperation+0x4c>)
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80022e8:	4c12      	ldr	r4, [pc, #72]	; (8002334 <FLASH_WaitForLastOperation+0x50>)
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80022ea:	2200      	movs	r2, #0
{ 
 80022ec:	4605      	mov	r5, r0
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80022ee:	61da      	str	r2, [r3, #28]
  tickstart = HAL_GetTick();
 80022f0:	f7ff fefc 	bl	80020ec <HAL_GetTick>
 80022f4:	4626      	mov	r6, r4
 80022f6:	4607      	mov	r7, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80022f8:	68e3      	ldr	r3, [r4, #12]
 80022fa:	03da      	lsls	r2, r3, #15
 80022fc:	d40c      	bmi.n	8002318 <FLASH_WaitForLastOperation+0x34>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 80022fe:	68e3      	ldr	r3, [r4, #12]
 8002300:	07db      	lsls	r3, r3, #31
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002302:	bf44      	itt	mi
 8002304:	2301      	movmi	r3, #1
 8002306:	60e3      	strmi	r3, [r4, #12]
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8002308:	68f0      	ldr	r0, [r6, #12]
 800230a:	f410 70f9 	ands.w	r0, r0, #498	; 0x1f2
 800230e:	d002      	beq.n	8002316 <FLASH_WaitForLastOperation+0x32>
    FLASH_SetErrorCode();
 8002310:	f7ff ff86 	bl	8002220 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8002314:	2001      	movs	r0, #1
}  
 8002316:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(Timeout != HAL_MAX_DELAY)
 8002318:	1c69      	adds	r1, r5, #1
 800231a:	d0ed      	beq.n	80022f8 <FLASH_WaitForLastOperation+0x14>
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800231c:	b90d      	cbnz	r5, 8002322 <FLASH_WaitForLastOperation+0x3e>
        return HAL_TIMEOUT;
 800231e:	2003      	movs	r0, #3
 8002320:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8002322:	f7ff fee3 	bl	80020ec <HAL_GetTick>
 8002326:	1bc0      	subs	r0, r0, r7
 8002328:	4285      	cmp	r5, r0
 800232a:	d2e5      	bcs.n	80022f8 <FLASH_WaitForLastOperation+0x14>
 800232c:	e7f7      	b.n	800231e <FLASH_WaitForLastOperation+0x3a>
 800232e:	bf00      	nop
 8002330:	200000b4 	.word	0x200000b4
 8002334:	40023c00 	.word	0x40023c00

08002338 <HAL_FLASH_Program>:
{
 8002338:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(&pFlash);
 800233c:	4d20      	ldr	r5, [pc, #128]	; (80023c0 <HAL_FLASH_Program+0x88>)
{
 800233e:	4698      	mov	r8, r3
  __HAL_LOCK(&pFlash);
 8002340:	7e2b      	ldrb	r3, [r5, #24]
 8002342:	2b01      	cmp	r3, #1
{
 8002344:	4607      	mov	r7, r0
 8002346:	460e      	mov	r6, r1
 8002348:	4614      	mov	r4, r2
  __HAL_LOCK(&pFlash);
 800234a:	d035      	beq.n	80023b8 <HAL_FLASH_Program+0x80>
 800234c:	2301      	movs	r3, #1
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800234e:	f24c 3050 	movw	r0, #50000	; 0xc350
  __HAL_LOCK(&pFlash);
 8002352:	762b      	strb	r3, [r5, #24]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002354:	f7ff ffc6 	bl	80022e4 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8002358:	b9b0      	cbnz	r0, 8002388 <HAL_FLASH_Program+0x50>
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 800235a:	b9cf      	cbnz	r7, 8002390 <HAL_FLASH_Program+0x58>
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800235c:	4b19      	ldr	r3, [pc, #100]	; (80023c4 <HAL_FLASH_Program+0x8c>)
 800235e:	691a      	ldr	r2, [r3, #16]
 8002360:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002364:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8002366:	691a      	ldr	r2, [r3, #16]
 8002368:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 800236a:	691a      	ldr	r2, [r3, #16]
      FLASH_Program_Byte(Address, (uint8_t) Data);
 800236c:	b2e4      	uxtb	r4, r4
  FLASH->CR |= FLASH_CR_PG;
 800236e:	f042 0201 	orr.w	r2, r2, #1
 8002372:	611a      	str	r2, [r3, #16]
  *(__IO uint8_t*)Address = Data;
 8002374:	7034      	strb	r4, [r6, #0]
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002376:	f24c 3050 	movw	r0, #50000	; 0xc350
 800237a:	f7ff ffb3 	bl	80022e4 <FLASH_WaitForLastOperation>
    FLASH->CR &= (~FLASH_CR_PG);  
 800237e:	4a11      	ldr	r2, [pc, #68]	; (80023c4 <HAL_FLASH_Program+0x8c>)
 8002380:	6913      	ldr	r3, [r2, #16]
 8002382:	f023 0301 	bic.w	r3, r3, #1
 8002386:	6113      	str	r3, [r2, #16]
  __HAL_UNLOCK(&pFlash);
 8002388:	2300      	movs	r3, #0
 800238a:	762b      	strb	r3, [r5, #24]
  return status;
 800238c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8002390:	2f01      	cmp	r7, #1
 8002392:	d104      	bne.n	800239e <HAL_FLASH_Program+0x66>
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8002394:	b2a1      	uxth	r1, r4
 8002396:	4630      	mov	r0, r6
 8002398:	f7ff ff30 	bl	80021fc <FLASH_Program_HalfWord>
 800239c:	e7eb      	b.n	8002376 <HAL_FLASH_Program+0x3e>
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800239e:	2f02      	cmp	r7, #2
 80023a0:	d104      	bne.n	80023ac <HAL_FLASH_Program+0x74>
      FLASH_Program_Word(Address, (uint32_t) Data);
 80023a2:	4621      	mov	r1, r4
 80023a4:	4630      	mov	r0, r6
 80023a6:	f7ff ff17 	bl	80021d8 <FLASH_Program_Word>
 80023aa:	e7e4      	b.n	8002376 <HAL_FLASH_Program+0x3e>
      FLASH_Program_DoubleWord(Address, Data);
 80023ac:	4622      	mov	r2, r4
 80023ae:	4643      	mov	r3, r8
 80023b0:	4630      	mov	r0, r6
 80023b2:	f7ff fefd 	bl	80021b0 <FLASH_Program_DoubleWord>
 80023b6:	e7de      	b.n	8002376 <HAL_FLASH_Program+0x3e>
  __HAL_LOCK(&pFlash);
 80023b8:	2002      	movs	r0, #2
}
 80023ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80023be:	bf00      	nop
 80023c0:	200000b4 	.word	0x200000b4
 80023c4:	40023c00 	.word	0x40023c00

080023c8 <FLASH_MassErase.isra.0>:
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80023c8:	4b07      	ldr	r3, [pc, #28]	; (80023e8 <FLASH_MassErase.isra.0+0x20>)
 80023ca:	691a      	ldr	r2, [r3, #16]
 80023cc:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80023d0:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_MER;
 80023d2:	691a      	ldr	r2, [r3, #16]
 80023d4:	f042 0204 	orr.w	r2, r2, #4
 80023d8:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 80023da:	691a      	ldr	r2, [r3, #16]
 80023dc:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80023e0:	ea42 2000 	orr.w	r0, r2, r0, lsl #8
 80023e4:	6118      	str	r0, [r3, #16]
 80023e6:	4770      	bx	lr
 80023e8:	40023c00 	.word	0x40023c00

080023ec <FLASH_Erase_Sector>:

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 80023ec:	b139      	cbz	r1, 80023fe <FLASH_Erase_Sector+0x12>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 80023ee:	2901      	cmp	r1, #1
 80023f0:	d01c      	beq.n	800242c <FLASH_Erase_Sector+0x40>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 80023f2:	2902      	cmp	r1, #2
  {
    tmp_psize = FLASH_PSIZE_WORD;
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80023f4:	bf0c      	ite	eq
 80023f6:	f44f 7100 	moveq.w	r1, #512	; 0x200
 80023fa:	f44f 7140 	movne.w	r1, #768	; 0x300
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80023fe:	4b0d      	ldr	r3, [pc, #52]	; (8002434 <FLASH_Erase_Sector+0x48>)
 8002400:	691a      	ldr	r2, [r3, #16]
 8002402:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002406:	611a      	str	r2, [r3, #16]
  FLASH->CR |= tmp_psize;
 8002408:	691a      	ldr	r2, [r3, #16]
 800240a:	4311      	orrs	r1, r2
 800240c:	6119      	str	r1, [r3, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800240e:	691a      	ldr	r2, [r3, #16]
 8002410:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8002414:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8002416:	691a      	ldr	r2, [r3, #16]
 8002418:	f042 0202 	orr.w	r2, r2, #2
 800241c:	ea42 00c0 	orr.w	r0, r2, r0, lsl #3
 8002420:	6118      	str	r0, [r3, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8002422:	691a      	ldr	r2, [r3, #16]
 8002424:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002428:	611a      	str	r2, [r3, #16]
 800242a:	4770      	bx	lr
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800242c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002430:	e7e5      	b.n	80023fe <FLASH_Erase_Sector+0x12>
 8002432:	bf00      	nop
 8002434:	40023c00 	.word	0x40023c00

08002438 <FLASH_FlushCaches>:
  * @retval None
  */
void FLASH_FlushCaches(void)
{
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 8002438:	4b14      	ldr	r3, [pc, #80]	; (800248c <FLASH_FlushCaches+0x54>)
 800243a:	681a      	ldr	r2, [r3, #0]
 800243c:	0591      	lsls	r1, r2, #22
 800243e:	d50f      	bpl.n	8002460 <FLASH_FlushCaches+0x28>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8002440:	681a      	ldr	r2, [r3, #0]
 8002442:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002446:	601a      	str	r2, [r3, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8002448:	681a      	ldr	r2, [r3, #0]
 800244a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800244e:	601a      	str	r2, [r3, #0]
 8002450:	681a      	ldr	r2, [r3, #0]
 8002452:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002456:	601a      	str	r2, [r3, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002458:	681a      	ldr	r2, [r3, #0]
 800245a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800245e:	601a      	str	r2, [r3, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8002460:	4b0a      	ldr	r3, [pc, #40]	; (800248c <FLASH_FlushCaches+0x54>)
 8002462:	681a      	ldr	r2, [r3, #0]
 8002464:	0552      	lsls	r2, r2, #21
 8002466:	d50f      	bpl.n	8002488 <FLASH_FlushCaches+0x50>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8002468:	681a      	ldr	r2, [r3, #0]
 800246a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800246e:	601a      	str	r2, [r3, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8002470:	681a      	ldr	r2, [r3, #0]
 8002472:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002476:	601a      	str	r2, [r3, #0]
 8002478:	681a      	ldr	r2, [r3, #0]
 800247a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800247e:	601a      	str	r2, [r3, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8002480:	681a      	ldr	r2, [r3, #0]
 8002482:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002486:	601a      	str	r2, [r3, #0]
 8002488:	4770      	bx	lr
 800248a:	bf00      	nop
 800248c:	40023c00 	.word	0x40023c00

08002490 <HAL_FLASHEx_Erase>:
{
 8002490:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  __HAL_LOCK(&pFlash);
 8002494:	4e23      	ldr	r6, [pc, #140]	; (8002524 <HAL_FLASHEx_Erase+0x94>)
 8002496:	7e33      	ldrb	r3, [r6, #24]
 8002498:	2b01      	cmp	r3, #1
{
 800249a:	4604      	mov	r4, r0
 800249c:	4688      	mov	r8, r1
  __HAL_LOCK(&pFlash);
 800249e:	d03f      	beq.n	8002520 <HAL_FLASHEx_Erase+0x90>
 80024a0:	2301      	movs	r3, #1
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80024a2:	f24c 3050 	movw	r0, #50000	; 0xc350
  __HAL_LOCK(&pFlash);
 80024a6:	7633      	strb	r3, [r6, #24]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80024a8:	f7ff ff1c 	bl	80022e4 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 80024ac:	4605      	mov	r5, r0
 80024ae:	b9a8      	cbnz	r0, 80024dc <HAL_FLASHEx_Erase+0x4c>
    *SectorError = 0xFFFFFFFFU;
 80024b0:	f04f 33ff 	mov.w	r3, #4294967295
 80024b4:	f8c8 3000 	str.w	r3, [r8]
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80024b8:	6823      	ldr	r3, [r4, #0]
 80024ba:	2b01      	cmp	r3, #1
 80024bc:	d113      	bne.n	80024e6 <HAL_FLASHEx_Erase+0x56>
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 80024be:	7c20      	ldrb	r0, [r4, #16]
 80024c0:	f7ff ff82 	bl	80023c8 <FLASH_MassErase.isra.0>
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80024c4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80024c8:	f7ff ff0c 	bl	80022e4 <FLASH_WaitForLastOperation>
      FLASH->CR &= (~FLASH_MER_BIT);
 80024cc:	4a16      	ldr	r2, [pc, #88]	; (8002528 <HAL_FLASHEx_Erase+0x98>)
 80024ce:	6913      	ldr	r3, [r2, #16]
 80024d0:	f023 0304 	bic.w	r3, r3, #4
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80024d4:	4605      	mov	r5, r0
      FLASH->CR &= (~FLASH_MER_BIT);
 80024d6:	6113      	str	r3, [r2, #16]
    FLASH_FlushCaches();    
 80024d8:	f7ff ffae 	bl	8002438 <FLASH_FlushCaches>
  __HAL_UNLOCK(&pFlash);
 80024dc:	2300      	movs	r3, #0
 80024de:	7633      	strb	r3, [r6, #24]
}
 80024e0:	4628      	mov	r0, r5
 80024e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80024e6:	68a7      	ldr	r7, [r4, #8]
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 80024e8:	f8df 903c 	ldr.w	r9, [pc, #60]	; 8002528 <HAL_FLASHEx_Erase+0x98>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80024ec:	68e3      	ldr	r3, [r4, #12]
 80024ee:	68a2      	ldr	r2, [r4, #8]
 80024f0:	4413      	add	r3, r2
 80024f2:	429f      	cmp	r7, r3
 80024f4:	d2f0      	bcs.n	80024d8 <HAL_FLASHEx_Erase+0x48>
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 80024f6:	7c21      	ldrb	r1, [r4, #16]
 80024f8:	4638      	mov	r0, r7
 80024fa:	f7ff ff77 	bl	80023ec <FLASH_Erase_Sector>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80024fe:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002502:	f7ff feef 	bl	80022e4 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8002506:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800250a:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 800250e:	f8c9 3010 	str.w	r3, [r9, #16]
        if(status != HAL_OK) 
 8002512:	b118      	cbz	r0, 800251c <HAL_FLASHEx_Erase+0x8c>
          *SectorError = index;
 8002514:	f8c8 7000 	str.w	r7, [r8]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002518:	4605      	mov	r5, r0
          break;
 800251a:	e7dd      	b.n	80024d8 <HAL_FLASHEx_Erase+0x48>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800251c:	3701      	adds	r7, #1
 800251e:	e7e5      	b.n	80024ec <HAL_FLASHEx_Erase+0x5c>
  __HAL_LOCK(&pFlash);
 8002520:	2502      	movs	r5, #2
 8002522:	e7dd      	b.n	80024e0 <HAL_FLASHEx_Erase+0x50>
 8002524:	200000b4 	.word	0x200000b4
 8002528:	40023c00 	.word	0x40023c00

0800252c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800252c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002530:	4604      	mov	r4, r0
 8002532:	b918      	cbnz	r0, 800253c <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 8002534:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 8002536:	b002      	add	sp, #8
 8002538:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800253c:	6803      	ldr	r3, [r0, #0]
 800253e:	07dd      	lsls	r5, r3, #31
 8002540:	d410      	bmi.n	8002564 <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002542:	6823      	ldr	r3, [r4, #0]
 8002544:	0798      	lsls	r0, r3, #30
 8002546:	d458      	bmi.n	80025fa <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002548:	6823      	ldr	r3, [r4, #0]
 800254a:	071a      	lsls	r2, r3, #28
 800254c:	f100 809a 	bmi.w	8002684 <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002550:	6823      	ldr	r3, [r4, #0]
 8002552:	075b      	lsls	r3, r3, #29
 8002554:	f100 80b8 	bmi.w	80026c8 <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002558:	69a2      	ldr	r2, [r4, #24]
 800255a:	2a00      	cmp	r2, #0
 800255c:	f040 8119 	bne.w	8002792 <HAL_RCC_OscConfig+0x266>
  return HAL_OK;
 8002560:	2000      	movs	r0, #0
 8002562:	e7e8      	b.n	8002536 <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002564:	4ba6      	ldr	r3, [pc, #664]	; (8002800 <HAL_RCC_OscConfig+0x2d4>)
 8002566:	689a      	ldr	r2, [r3, #8]
 8002568:	f002 020c 	and.w	r2, r2, #12
 800256c:	2a04      	cmp	r2, #4
 800256e:	d007      	beq.n	8002580 <HAL_RCC_OscConfig+0x54>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002570:	689a      	ldr	r2, [r3, #8]
 8002572:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002576:	2a08      	cmp	r2, #8
 8002578:	d10a      	bne.n	8002590 <HAL_RCC_OscConfig+0x64>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	0259      	lsls	r1, r3, #9
 800257e:	d507      	bpl.n	8002590 <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002580:	4b9f      	ldr	r3, [pc, #636]	; (8002800 <HAL_RCC_OscConfig+0x2d4>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	039a      	lsls	r2, r3, #14
 8002586:	d5dc      	bpl.n	8002542 <HAL_RCC_OscConfig+0x16>
 8002588:	6863      	ldr	r3, [r4, #4]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d1d9      	bne.n	8002542 <HAL_RCC_OscConfig+0x16>
 800258e:	e7d1      	b.n	8002534 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002590:	6863      	ldr	r3, [r4, #4]
 8002592:	4d9b      	ldr	r5, [pc, #620]	; (8002800 <HAL_RCC_OscConfig+0x2d4>)
 8002594:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002598:	d111      	bne.n	80025be <HAL_RCC_OscConfig+0x92>
 800259a:	682b      	ldr	r3, [r5, #0]
 800259c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025a0:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80025a2:	f7ff fda3 	bl	80020ec <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025a6:	4d96      	ldr	r5, [pc, #600]	; (8002800 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 80025a8:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025aa:	682b      	ldr	r3, [r5, #0]
 80025ac:	039b      	lsls	r3, r3, #14
 80025ae:	d4c8      	bmi.n	8002542 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025b0:	f7ff fd9c 	bl	80020ec <HAL_GetTick>
 80025b4:	1b80      	subs	r0, r0, r6
 80025b6:	2864      	cmp	r0, #100	; 0x64
 80025b8:	d9f7      	bls.n	80025aa <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 80025ba:	2003      	movs	r0, #3
 80025bc:	e7bb      	b.n	8002536 <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025be:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80025c2:	d104      	bne.n	80025ce <HAL_RCC_OscConfig+0xa2>
 80025c4:	682b      	ldr	r3, [r5, #0]
 80025c6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025ca:	602b      	str	r3, [r5, #0]
 80025cc:	e7e5      	b.n	800259a <HAL_RCC_OscConfig+0x6e>
 80025ce:	682a      	ldr	r2, [r5, #0]
 80025d0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80025d4:	602a      	str	r2, [r5, #0]
 80025d6:	682a      	ldr	r2, [r5, #0]
 80025d8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80025dc:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d1df      	bne.n	80025a2 <HAL_RCC_OscConfig+0x76>
        tickstart = HAL_GetTick();
 80025e2:	f7ff fd83 	bl	80020ec <HAL_GetTick>
 80025e6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025e8:	682b      	ldr	r3, [r5, #0]
 80025ea:	039f      	lsls	r7, r3, #14
 80025ec:	d5a9      	bpl.n	8002542 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025ee:	f7ff fd7d 	bl	80020ec <HAL_GetTick>
 80025f2:	1b80      	subs	r0, r0, r6
 80025f4:	2864      	cmp	r0, #100	; 0x64
 80025f6:	d9f7      	bls.n	80025e8 <HAL_RCC_OscConfig+0xbc>
 80025f8:	e7df      	b.n	80025ba <HAL_RCC_OscConfig+0x8e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80025fa:	4b81      	ldr	r3, [pc, #516]	; (8002800 <HAL_RCC_OscConfig+0x2d4>)
 80025fc:	689a      	ldr	r2, [r3, #8]
 80025fe:	f012 0f0c 	tst.w	r2, #12
 8002602:	d007      	beq.n	8002614 <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002604:	689a      	ldr	r2, [r3, #8]
 8002606:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800260a:	2a08      	cmp	r2, #8
 800260c:	d111      	bne.n	8002632 <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	025e      	lsls	r6, r3, #9
 8002612:	d40e      	bmi.n	8002632 <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002614:	4b7a      	ldr	r3, [pc, #488]	; (8002800 <HAL_RCC_OscConfig+0x2d4>)
 8002616:	681a      	ldr	r2, [r3, #0]
 8002618:	0795      	lsls	r5, r2, #30
 800261a:	d502      	bpl.n	8002622 <HAL_RCC_OscConfig+0xf6>
 800261c:	68e2      	ldr	r2, [r4, #12]
 800261e:	2a01      	cmp	r2, #1
 8002620:	d188      	bne.n	8002534 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002622:	681a      	ldr	r2, [r3, #0]
 8002624:	6921      	ldr	r1, [r4, #16]
 8002626:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 800262a:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 800262e:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002630:	e78a      	b.n	8002548 <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002632:	68e2      	ldr	r2, [r4, #12]
 8002634:	4b73      	ldr	r3, [pc, #460]	; (8002804 <HAL_RCC_OscConfig+0x2d8>)
 8002636:	b1b2      	cbz	r2, 8002666 <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 8002638:	2201      	movs	r2, #1
 800263a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800263c:	f7ff fd56 	bl	80020ec <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002640:	4d6f      	ldr	r5, [pc, #444]	; (8002800 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8002642:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002644:	682b      	ldr	r3, [r5, #0]
 8002646:	0798      	lsls	r0, r3, #30
 8002648:	d507      	bpl.n	800265a <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800264a:	682b      	ldr	r3, [r5, #0]
 800264c:	6922      	ldr	r2, [r4, #16]
 800264e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002652:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8002656:	602b      	str	r3, [r5, #0]
 8002658:	e776      	b.n	8002548 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800265a:	f7ff fd47 	bl	80020ec <HAL_GetTick>
 800265e:	1b80      	subs	r0, r0, r6
 8002660:	2802      	cmp	r0, #2
 8002662:	d9ef      	bls.n	8002644 <HAL_RCC_OscConfig+0x118>
 8002664:	e7a9      	b.n	80025ba <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 8002666:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002668:	f7ff fd40 	bl	80020ec <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800266c:	4d64      	ldr	r5, [pc, #400]	; (8002800 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 800266e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002670:	682b      	ldr	r3, [r5, #0]
 8002672:	0799      	lsls	r1, r3, #30
 8002674:	f57f af68 	bpl.w	8002548 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002678:	f7ff fd38 	bl	80020ec <HAL_GetTick>
 800267c:	1b80      	subs	r0, r0, r6
 800267e:	2802      	cmp	r0, #2
 8002680:	d9f6      	bls.n	8002670 <HAL_RCC_OscConfig+0x144>
 8002682:	e79a      	b.n	80025ba <HAL_RCC_OscConfig+0x8e>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002684:	6962      	ldr	r2, [r4, #20]
 8002686:	4b60      	ldr	r3, [pc, #384]	; (8002808 <HAL_RCC_OscConfig+0x2dc>)
 8002688:	b17a      	cbz	r2, 80026aa <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 800268a:	2201      	movs	r2, #1
 800268c:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800268e:	f7ff fd2d 	bl	80020ec <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002692:	4d5b      	ldr	r5, [pc, #364]	; (8002800 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8002694:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002696:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8002698:	079f      	lsls	r7, r3, #30
 800269a:	f53f af59 	bmi.w	8002550 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800269e:	f7ff fd25 	bl	80020ec <HAL_GetTick>
 80026a2:	1b80      	subs	r0, r0, r6
 80026a4:	2802      	cmp	r0, #2
 80026a6:	d9f6      	bls.n	8002696 <HAL_RCC_OscConfig+0x16a>
 80026a8:	e787      	b.n	80025ba <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 80026aa:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80026ac:	f7ff fd1e 	bl	80020ec <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026b0:	4d53      	ldr	r5, [pc, #332]	; (8002800 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 80026b2:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026b4:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80026b6:	0798      	lsls	r0, r3, #30
 80026b8:	f57f af4a 	bpl.w	8002550 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026bc:	f7ff fd16 	bl	80020ec <HAL_GetTick>
 80026c0:	1b80      	subs	r0, r0, r6
 80026c2:	2802      	cmp	r0, #2
 80026c4:	d9f6      	bls.n	80026b4 <HAL_RCC_OscConfig+0x188>
 80026c6:	e778      	b.n	80025ba <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026c8:	4b4d      	ldr	r3, [pc, #308]	; (8002800 <HAL_RCC_OscConfig+0x2d4>)
 80026ca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80026cc:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 80026d0:	d128      	bne.n	8002724 <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 80026d2:	9201      	str	r2, [sp, #4]
 80026d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80026d6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80026da:	641a      	str	r2, [r3, #64]	; 0x40
 80026dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026e2:	9301      	str	r3, [sp, #4]
 80026e4:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80026e6:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026e8:	4d48      	ldr	r5, [pc, #288]	; (800280c <HAL_RCC_OscConfig+0x2e0>)
 80026ea:	682b      	ldr	r3, [r5, #0]
 80026ec:	05d9      	lsls	r1, r3, #23
 80026ee:	d51b      	bpl.n	8002728 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026f0:	68a3      	ldr	r3, [r4, #8]
 80026f2:	4d43      	ldr	r5, [pc, #268]	; (8002800 <HAL_RCC_OscConfig+0x2d4>)
 80026f4:	2b01      	cmp	r3, #1
 80026f6:	d127      	bne.n	8002748 <HAL_RCC_OscConfig+0x21c>
 80026f8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80026fa:	f043 0301 	orr.w	r3, r3, #1
 80026fe:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8002700:	f7ff fcf4 	bl	80020ec <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002704:	4d3e      	ldr	r5, [pc, #248]	; (8002800 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8002706:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002708:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800270c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800270e:	079b      	lsls	r3, r3, #30
 8002710:	d539      	bpl.n	8002786 <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 8002712:	2e00      	cmp	r6, #0
 8002714:	f43f af20 	beq.w	8002558 <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002718:	4a39      	ldr	r2, [pc, #228]	; (8002800 <HAL_RCC_OscConfig+0x2d4>)
 800271a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800271c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002720:	6413      	str	r3, [r2, #64]	; 0x40
 8002722:	e719      	b.n	8002558 <HAL_RCC_OscConfig+0x2c>
    FlagStatus       pwrclkchanged = RESET;
 8002724:	2600      	movs	r6, #0
 8002726:	e7df      	b.n	80026e8 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002728:	682b      	ldr	r3, [r5, #0]
 800272a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800272e:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8002730:	f7ff fcdc 	bl	80020ec <HAL_GetTick>
 8002734:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002736:	682b      	ldr	r3, [r5, #0]
 8002738:	05da      	lsls	r2, r3, #23
 800273a:	d4d9      	bmi.n	80026f0 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800273c:	f7ff fcd6 	bl	80020ec <HAL_GetTick>
 8002740:	1bc0      	subs	r0, r0, r7
 8002742:	2802      	cmp	r0, #2
 8002744:	d9f7      	bls.n	8002736 <HAL_RCC_OscConfig+0x20a>
 8002746:	e738      	b.n	80025ba <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002748:	2b05      	cmp	r3, #5
 800274a:	d104      	bne.n	8002756 <HAL_RCC_OscConfig+0x22a>
 800274c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800274e:	f043 0304 	orr.w	r3, r3, #4
 8002752:	672b      	str	r3, [r5, #112]	; 0x70
 8002754:	e7d0      	b.n	80026f8 <HAL_RCC_OscConfig+0x1cc>
 8002756:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8002758:	f022 0201 	bic.w	r2, r2, #1
 800275c:	672a      	str	r2, [r5, #112]	; 0x70
 800275e:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8002760:	f022 0204 	bic.w	r2, r2, #4
 8002764:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002766:	2b00      	cmp	r3, #0
 8002768:	d1ca      	bne.n	8002700 <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 800276a:	f7ff fcbf 	bl	80020ec <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800276e:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8002772:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002774:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002776:	0798      	lsls	r0, r3, #30
 8002778:	d5cb      	bpl.n	8002712 <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800277a:	f7ff fcb7 	bl	80020ec <HAL_GetTick>
 800277e:	1bc0      	subs	r0, r0, r7
 8002780:	4540      	cmp	r0, r8
 8002782:	d9f7      	bls.n	8002774 <HAL_RCC_OscConfig+0x248>
 8002784:	e719      	b.n	80025ba <HAL_RCC_OscConfig+0x8e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002786:	f7ff fcb1 	bl	80020ec <HAL_GetTick>
 800278a:	1bc0      	subs	r0, r0, r7
 800278c:	4540      	cmp	r0, r8
 800278e:	d9bd      	bls.n	800270c <HAL_RCC_OscConfig+0x1e0>
 8002790:	e713      	b.n	80025ba <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002792:	4d1b      	ldr	r5, [pc, #108]	; (8002800 <HAL_RCC_OscConfig+0x2d4>)
 8002794:	68ab      	ldr	r3, [r5, #8]
 8002796:	f003 030c 	and.w	r3, r3, #12
 800279a:	2b08      	cmp	r3, #8
 800279c:	f43f aeca 	beq.w	8002534 <HAL_RCC_OscConfig+0x8>
 80027a0:	4e1b      	ldr	r6, [pc, #108]	; (8002810 <HAL_RCC_OscConfig+0x2e4>)
 80027a2:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027a4:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 80027a6:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027a8:	d134      	bne.n	8002814 <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 80027aa:	f7ff fc9f 	bl	80020ec <HAL_GetTick>
 80027ae:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027b0:	682b      	ldr	r3, [r5, #0]
 80027b2:	0199      	lsls	r1, r3, #6
 80027b4:	d41e      	bmi.n	80027f4 <HAL_RCC_OscConfig+0x2c8>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80027b6:	6a22      	ldr	r2, [r4, #32]
 80027b8:	69e3      	ldr	r3, [r4, #28]
 80027ba:	4313      	orrs	r3, r2
 80027bc:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80027be:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80027c2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80027c4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80027c8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027ca:	4c0d      	ldr	r4, [pc, #52]	; (8002800 <HAL_RCC_OscConfig+0x2d4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80027cc:	0852      	lsrs	r2, r2, #1
 80027ce:	3a01      	subs	r2, #1
 80027d0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80027d4:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80027d6:	2301      	movs	r3, #1
 80027d8:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 80027da:	f7ff fc87 	bl	80020ec <HAL_GetTick>
 80027de:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027e0:	6823      	ldr	r3, [r4, #0]
 80027e2:	019a      	lsls	r2, r3, #6
 80027e4:	f53f aebc 	bmi.w	8002560 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027e8:	f7ff fc80 	bl	80020ec <HAL_GetTick>
 80027ec:	1b40      	subs	r0, r0, r5
 80027ee:	2802      	cmp	r0, #2
 80027f0:	d9f6      	bls.n	80027e0 <HAL_RCC_OscConfig+0x2b4>
 80027f2:	e6e2      	b.n	80025ba <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027f4:	f7ff fc7a 	bl	80020ec <HAL_GetTick>
 80027f8:	1bc0      	subs	r0, r0, r7
 80027fa:	2802      	cmp	r0, #2
 80027fc:	d9d8      	bls.n	80027b0 <HAL_RCC_OscConfig+0x284>
 80027fe:	e6dc      	b.n	80025ba <HAL_RCC_OscConfig+0x8e>
 8002800:	40023800 	.word	0x40023800
 8002804:	42470000 	.word	0x42470000
 8002808:	42470e80 	.word	0x42470e80
 800280c:	40007000 	.word	0x40007000
 8002810:	42470060 	.word	0x42470060
        tickstart = HAL_GetTick();
 8002814:	f7ff fc6a 	bl	80020ec <HAL_GetTick>
 8002818:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800281a:	682b      	ldr	r3, [r5, #0]
 800281c:	019b      	lsls	r3, r3, #6
 800281e:	f57f ae9f 	bpl.w	8002560 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002822:	f7ff fc63 	bl	80020ec <HAL_GetTick>
 8002826:	1b00      	subs	r0, r0, r4
 8002828:	2802      	cmp	r0, #2
 800282a:	d9f6      	bls.n	800281a <HAL_RCC_OscConfig+0x2ee>
 800282c:	e6c5      	b.n	80025ba <HAL_RCC_OscConfig+0x8e>
 800282e:	bf00      	nop

08002830 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002830:	4913      	ldr	r1, [pc, #76]	; (8002880 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8002832:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002834:	688b      	ldr	r3, [r1, #8]
 8002836:	f003 030c 	and.w	r3, r3, #12
 800283a:	2b04      	cmp	r3, #4
 800283c:	d003      	beq.n	8002846 <HAL_RCC_GetSysClockFreq+0x16>
 800283e:	2b08      	cmp	r3, #8
 8002840:	d003      	beq.n	800284a <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002842:	4810      	ldr	r0, [pc, #64]	; (8002884 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8002844:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8002846:	4810      	ldr	r0, [pc, #64]	; (8002888 <HAL_RCC_GetSysClockFreq+0x58>)
 8002848:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800284a:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800284c:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800284e:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002850:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002854:	bf14      	ite	ne
 8002856:	480c      	ldrne	r0, [pc, #48]	; (8002888 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002858:	480a      	ldreq	r0, [pc, #40]	; (8002884 <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800285a:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800285e:	bf18      	it	ne
 8002860:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002862:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002866:	fba1 0100 	umull	r0, r1, r1, r0
 800286a:	f7fd fcbd 	bl	80001e8 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800286e:	4b04      	ldr	r3, [pc, #16]	; (8002880 <HAL_RCC_GetSysClockFreq+0x50>)
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8002876:	3301      	adds	r3, #1
 8002878:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 800287a:	fbb0 f0f3 	udiv	r0, r0, r3
 800287e:	bd08      	pop	{r3, pc}
 8002880:	40023800 	.word	0x40023800
 8002884:	00f42400 	.word	0x00f42400
 8002888:	017d7840 	.word	0x017d7840

0800288c <HAL_RCC_ClockConfig>:
{
 800288c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002890:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8002892:	4604      	mov	r4, r0
 8002894:	b910      	cbnz	r0, 800289c <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8002896:	2001      	movs	r0, #1
 8002898:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800289c:	4b44      	ldr	r3, [pc, #272]	; (80029b0 <HAL_RCC_ClockConfig+0x124>)
 800289e:	681a      	ldr	r2, [r3, #0]
 80028a0:	f002 020f 	and.w	r2, r2, #15
 80028a4:	428a      	cmp	r2, r1
 80028a6:	d328      	bcc.n	80028fa <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028a8:	6821      	ldr	r1, [r4, #0]
 80028aa:	078f      	lsls	r7, r1, #30
 80028ac:	d42d      	bmi.n	800290a <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028ae:	07c8      	lsls	r0, r1, #31
 80028b0:	d440      	bmi.n	8002934 <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80028b2:	4b3f      	ldr	r3, [pc, #252]	; (80029b0 <HAL_RCC_ClockConfig+0x124>)
 80028b4:	681a      	ldr	r2, [r3, #0]
 80028b6:	f002 020f 	and.w	r2, r2, #15
 80028ba:	4295      	cmp	r5, r2
 80028bc:	d366      	bcc.n	800298c <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028be:	6822      	ldr	r2, [r4, #0]
 80028c0:	0751      	lsls	r1, r2, #29
 80028c2:	d46c      	bmi.n	800299e <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028c4:	0713      	lsls	r3, r2, #28
 80028c6:	d507      	bpl.n	80028d8 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80028c8:	4a3a      	ldr	r2, [pc, #232]	; (80029b4 <HAL_RCC_ClockConfig+0x128>)
 80028ca:	6921      	ldr	r1, [r4, #16]
 80028cc:	6893      	ldr	r3, [r2, #8]
 80028ce:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80028d2:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80028d6:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80028d8:	f7ff ffaa 	bl	8002830 <HAL_RCC_GetSysClockFreq>
 80028dc:	4b35      	ldr	r3, [pc, #212]	; (80029b4 <HAL_RCC_ClockConfig+0x128>)
 80028de:	4a36      	ldr	r2, [pc, #216]	; (80029b8 <HAL_RCC_ClockConfig+0x12c>)
 80028e0:	689b      	ldr	r3, [r3, #8]
 80028e2:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80028e6:	5cd3      	ldrb	r3, [r2, r3]
 80028e8:	40d8      	lsrs	r0, r3
 80028ea:	4b34      	ldr	r3, [pc, #208]	; (80029bc <HAL_RCC_ClockConfig+0x130>)
 80028ec:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80028ee:	2000      	movs	r0, #0
 80028f0:	f7ff fbb2 	bl	8002058 <HAL_InitTick>
  return HAL_OK;
 80028f4:	2000      	movs	r0, #0
 80028f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028fa:	b2ca      	uxtb	r2, r1
 80028fc:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f003 030f 	and.w	r3, r3, #15
 8002904:	4299      	cmp	r1, r3
 8002906:	d1c6      	bne.n	8002896 <HAL_RCC_ClockConfig+0xa>
 8002908:	e7ce      	b.n	80028a8 <HAL_RCC_ClockConfig+0x1c>
 800290a:	4b2a      	ldr	r3, [pc, #168]	; (80029b4 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800290c:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002910:	bf1e      	ittt	ne
 8002912:	689a      	ldrne	r2, [r3, #8]
 8002914:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8002918:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800291a:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800291c:	bf42      	ittt	mi
 800291e:	689a      	ldrmi	r2, [r3, #8]
 8002920:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8002924:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002926:	689a      	ldr	r2, [r3, #8]
 8002928:	68a0      	ldr	r0, [r4, #8]
 800292a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800292e:	4302      	orrs	r2, r0
 8002930:	609a      	str	r2, [r3, #8]
 8002932:	e7bc      	b.n	80028ae <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002934:	6862      	ldr	r2, [r4, #4]
 8002936:	4b1f      	ldr	r3, [pc, #124]	; (80029b4 <HAL_RCC_ClockConfig+0x128>)
 8002938:	2a01      	cmp	r2, #1
 800293a:	d11d      	bne.n	8002978 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002942:	d0a8      	beq.n	8002896 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002944:	4e1b      	ldr	r6, [pc, #108]	; (80029b4 <HAL_RCC_ClockConfig+0x128>)
 8002946:	68b3      	ldr	r3, [r6, #8]
 8002948:	f023 0303 	bic.w	r3, r3, #3
 800294c:	4313      	orrs	r3, r2
 800294e:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8002950:	f7ff fbcc 	bl	80020ec <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002954:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8002958:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800295a:	68b3      	ldr	r3, [r6, #8]
 800295c:	6862      	ldr	r2, [r4, #4]
 800295e:	f003 030c 	and.w	r3, r3, #12
 8002962:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002966:	d0a4      	beq.n	80028b2 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002968:	f7ff fbc0 	bl	80020ec <HAL_GetTick>
 800296c:	1bc0      	subs	r0, r0, r7
 800296e:	4540      	cmp	r0, r8
 8002970:	d9f3      	bls.n	800295a <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 8002972:	2003      	movs	r0, #3
}
 8002974:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002978:	1e91      	subs	r1, r2, #2
 800297a:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800297c:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800297e:	d802      	bhi.n	8002986 <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002980:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002984:	e7dd      	b.n	8002942 <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002986:	f013 0f02 	tst.w	r3, #2
 800298a:	e7da      	b.n	8002942 <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800298c:	b2ea      	uxtb	r2, r5
 800298e:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f003 030f 	and.w	r3, r3, #15
 8002996:	429d      	cmp	r5, r3
 8002998:	f47f af7d 	bne.w	8002896 <HAL_RCC_ClockConfig+0xa>
 800299c:	e78f      	b.n	80028be <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800299e:	4905      	ldr	r1, [pc, #20]	; (80029b4 <HAL_RCC_ClockConfig+0x128>)
 80029a0:	68e0      	ldr	r0, [r4, #12]
 80029a2:	688b      	ldr	r3, [r1, #8]
 80029a4:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80029a8:	4303      	orrs	r3, r0
 80029aa:	608b      	str	r3, [r1, #8]
 80029ac:	e78a      	b.n	80028c4 <HAL_RCC_ClockConfig+0x38>
 80029ae:	bf00      	nop
 80029b0:	40023c00 	.word	0x40023c00
 80029b4:	40023800 	.word	0x40023800
 80029b8:	08003ad8 	.word	0x08003ad8
 80029bc:	20000008 	.word	0x20000008

080029c0 <main>:

void Error_Handler(void);
void SystemClock_Config(void);

int main(void)
{
 80029c0:	b590      	push	{r4, r7, lr}
 80029c2:	b099      	sub	sp, #100	; 0x64
 80029c4:	af02      	add	r7, sp, #8

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80029c6:	f7ff fb6b 	bl	80020a0 <HAL_Init>

	/* Configure the system clock */
	SystemClock_Config();
 80029ca:	f000 f8cf 	bl	8002b6c <_Z18SystemClock_Configv>
	//													      0x08008000
	// First Flash Sector = 2
	// Second Flash Sector = 3
	// Size of Each Sector in KByte = 16 KB
	// Desired EEPROM Size = 1 KB
	MAteeqEmulatedEEPROM mateeqEmulatedEEPROMstatic(0x08008000, 2, 3, 16, MAteeqEmulatedEEPROM::EMULATED_EEPROM_SIZE_1KB);
 80029ce:	f107 001c 	add.w	r0, r7, #28
 80029d2:	2301      	movs	r3, #1
 80029d4:	9301      	str	r3, [sp, #4]
 80029d6:	2310      	movs	r3, #16
 80029d8:	9300      	str	r3, [sp, #0]
 80029da:	2303      	movs	r3, #3
 80029dc:	2202      	movs	r2, #2
 80029de:	4960      	ldr	r1, [pc, #384]	; (8002b60 <main+0x1a0>)
 80029e0:	f7fe fd06 	bl	80013f0 <_ZN20MAteeqEmulatedEEPROMC1EjhhtNS_20EMULATED_EEPROM_SIZEE>
	bool isStaticInit = mateeqEmulatedEEPROMstatic.Init();
 80029e4:	f107 031c 	add.w	r3, r7, #28
 80029e8:	4618      	mov	r0, r3
 80029ea:	f7fe fd8e 	bl	800150a <_ZN20MAteeqEmulatedEEPROM4InitEv>
 80029ee:	4603      	mov	r3, r0
 80029f0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	char charStatic[4];
	if (isStaticInit == true)
 80029f4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d03b      	beq.n	8002a74 <main+0xb4>
	{
		mateeqEmulatedEEPROMstatic.PutChar(0, 'M');           		// Put char in address 0
 80029fc:	f107 031c 	add.w	r3, r7, #28
 8002a00:	224d      	movs	r2, #77	; 0x4d
 8002a02:	2100      	movs	r1, #0
 8002a04:	4618      	mov	r0, r3
 8002a06:	f7fe fdb4 	bl	8001572 <_ZN20MAteeqEmulatedEEPROM7PutCharEjh>
		charStatic[0] = mateeqEmulatedEEPROMstatic.GetChar(0);   	// Get char From address 0
 8002a0a:	f107 031c 	add.w	r3, r7, #28
 8002a0e:	2100      	movs	r1, #0
 8002a10:	4618      	mov	r0, r3
 8002a12:	f7fe fd92 	bl	800153a <_ZN20MAteeqEmulatedEEPROM7GetCharEj>
 8002a16:	4603      	mov	r3, r0
 8002a18:	763b      	strb	r3, [r7, #24]

		mateeqEmulatedEEPROMstatic.PutChar(1, 'O');           		// Put char in address 1
 8002a1a:	f107 031c 	add.w	r3, r7, #28
 8002a1e:	224f      	movs	r2, #79	; 0x4f
 8002a20:	2101      	movs	r1, #1
 8002a22:	4618      	mov	r0, r3
 8002a24:	f7fe fda5 	bl	8001572 <_ZN20MAteeqEmulatedEEPROM7PutCharEjh>
		charStatic[1] = mateeqEmulatedEEPROMstatic.GetChar(1);   	// Get char From address 1
 8002a28:	f107 031c 	add.w	r3, r7, #28
 8002a2c:	2101      	movs	r1, #1
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f7fe fd83 	bl	800153a <_ZN20MAteeqEmulatedEEPROM7GetCharEj>
 8002a34:	4603      	mov	r3, r0
 8002a36:	767b      	strb	r3, [r7, #25]

		mateeqEmulatedEEPROMstatic.PutChar(2, 'H');           		// Put char in address 2
 8002a38:	f107 031c 	add.w	r3, r7, #28
 8002a3c:	2248      	movs	r2, #72	; 0x48
 8002a3e:	2102      	movs	r1, #2
 8002a40:	4618      	mov	r0, r3
 8002a42:	f7fe fd96 	bl	8001572 <_ZN20MAteeqEmulatedEEPROM7PutCharEjh>
		charStatic[2] = mateeqEmulatedEEPROMstatic.GetChar(2);   	// Get char From address 2
 8002a46:	f107 031c 	add.w	r3, r7, #28
 8002a4a:	2102      	movs	r1, #2
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	f7fe fd74 	bl	800153a <_ZN20MAteeqEmulatedEEPROM7GetCharEj>
 8002a52:	4603      	mov	r3, r0
 8002a54:	76bb      	strb	r3, [r7, #26]

		mateeqEmulatedEEPROMstatic.PutChar(3, 'A');           		// Put char in address 3
 8002a56:	f107 031c 	add.w	r3, r7, #28
 8002a5a:	2241      	movs	r2, #65	; 0x41
 8002a5c:	2103      	movs	r1, #3
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f7fe fd87 	bl	8001572 <_ZN20MAteeqEmulatedEEPROM7PutCharEjh>
		charStatic[3] = mateeqEmulatedEEPROMstatic.GetChar(3);   	// Get char From address 3
 8002a64:	f107 031c 	add.w	r3, r7, #28
 8002a68:	2103      	movs	r1, #3
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f7fe fd65 	bl	800153a <_ZN20MAteeqEmulatedEEPROM7GetCharEj>
 8002a70:	4603      	mov	r3, r0
 8002a72:	76fb      	strb	r3, [r7, #27]
	//													      0x08020000
	// First Flash Sector = 5
	// Second Flash Sector = 6
	// Size of Each Sector in KByte = 128 KB
	// Desired EEPROM Size = 4 KB
	MAteeqEmulatedEEPROM* mateeqEmulatedEEPROMpointer = new MAteeqEmulatedEEPROM(0x08020000, 5, 6, 128, MAteeqEmulatedEEPROM::EMULATED_EEPROM_SIZE_4KB);
 8002a74:	202c      	movs	r0, #44	; 0x2c
 8002a76:	f000 f96e 	bl	8002d56 <_Znwj>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	461c      	mov	r4, r3
 8002a7e:	2304      	movs	r3, #4
 8002a80:	9301      	str	r3, [sp, #4]
 8002a82:	2380      	movs	r3, #128	; 0x80
 8002a84:	9300      	str	r3, [sp, #0]
 8002a86:	2306      	movs	r3, #6
 8002a88:	2205      	movs	r2, #5
 8002a8a:	4936      	ldr	r1, [pc, #216]	; (8002b64 <main+0x1a4>)
 8002a8c:	4620      	mov	r0, r4
 8002a8e:	f7fe fcaf 	bl	80013f0 <_ZN20MAteeqEmulatedEEPROMC1EjhhtNS_20EMULATED_EEPROM_SIZEE>
 8002a92:	653c      	str	r4, [r7, #80]	; 0x50
	bool isPointerInit = mateeqEmulatedEEPROMpointer->Init();
 8002a94:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8002a96:	f7fe fd38 	bl	800150a <_ZN20MAteeqEmulatedEEPROM4InitEv>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	char charPointer[5];
	if (isPointerInit == true)
 8002aa0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d036      	beq.n	8002b16 <main+0x156>
	{
		mateeqEmulatedEEPROMpointer->PutChar(0, 'A');            	// Put char in address 0
 8002aa8:	2241      	movs	r2, #65	; 0x41
 8002aaa:	2100      	movs	r1, #0
 8002aac:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8002aae:	f7fe fd60 	bl	8001572 <_ZN20MAteeqEmulatedEEPROM7PutCharEjh>
		charPointer[0] = mateeqEmulatedEEPROMpointer->GetChar(0);   // Get char From address 0
 8002ab2:	2100      	movs	r1, #0
 8002ab4:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8002ab6:	f7fe fd40 	bl	800153a <_ZN20MAteeqEmulatedEEPROM7GetCharEj>
 8002aba:	4603      	mov	r3, r0
 8002abc:	743b      	strb	r3, [r7, #16]

		mateeqEmulatedEEPROMpointer->PutChar(1, 'T');            	// Put char in address 1
 8002abe:	2254      	movs	r2, #84	; 0x54
 8002ac0:	2101      	movs	r1, #1
 8002ac2:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8002ac4:	f7fe fd55 	bl	8001572 <_ZN20MAteeqEmulatedEEPROM7PutCharEjh>
		charPointer[1] = mateeqEmulatedEEPROMpointer->GetChar(1);   // Get char From address 1
 8002ac8:	2101      	movs	r1, #1
 8002aca:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8002acc:	f7fe fd35 	bl	800153a <_ZN20MAteeqEmulatedEEPROM7GetCharEj>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	747b      	strb	r3, [r7, #17]

		mateeqEmulatedEEPROMpointer->PutChar(2, 'E');            	// Put char in address 2
 8002ad4:	2245      	movs	r2, #69	; 0x45
 8002ad6:	2102      	movs	r1, #2
 8002ad8:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8002ada:	f7fe fd4a 	bl	8001572 <_ZN20MAteeqEmulatedEEPROM7PutCharEjh>
		charPointer[2] = mateeqEmulatedEEPROMpointer->GetChar(2);   // Get char From address 2
 8002ade:	2102      	movs	r1, #2
 8002ae0:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8002ae2:	f7fe fd2a 	bl	800153a <_ZN20MAteeqEmulatedEEPROM7GetCharEj>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	74bb      	strb	r3, [r7, #18]

		mateeqEmulatedEEPROMpointer->PutChar(3, 'E');            	// Put char in address 3
 8002aea:	2245      	movs	r2, #69	; 0x45
 8002aec:	2103      	movs	r1, #3
 8002aee:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8002af0:	f7fe fd3f 	bl	8001572 <_ZN20MAteeqEmulatedEEPROM7PutCharEjh>
		charPointer[3] = mateeqEmulatedEEPROMpointer->GetChar(3);   // Get char From address 3
 8002af4:	2103      	movs	r1, #3
 8002af6:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8002af8:	f7fe fd1f 	bl	800153a <_ZN20MAteeqEmulatedEEPROM7GetCharEj>
 8002afc:	4603      	mov	r3, r0
 8002afe:	74fb      	strb	r3, [r7, #19]

		mateeqEmulatedEEPROMpointer->PutChar(4, 'Q');            	// Put char in address 4
 8002b00:	2251      	movs	r2, #81	; 0x51
 8002b02:	2104      	movs	r1, #4
 8002b04:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8002b06:	f7fe fd34 	bl	8001572 <_ZN20MAteeqEmulatedEEPROM7PutCharEjh>
		charPointer[4] = mateeqEmulatedEEPROMpointer->GetChar(4);   // Get char From address 4
 8002b0a:	2104      	movs	r1, #4
 8002b0c:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8002b0e:	f7fe fd14 	bl	800153a <_ZN20MAteeqEmulatedEEPROM7GetCharEj>
 8002b12:	4603      	mov	r3, r0
 8002b14:	753b      	strb	r3, [r7, #20]
	}


	// ******************* Define String and Store it, then restore it ***************************
	char ateeqString[16] = "Msc. Eng. Ateeq";
 8002b16:	4b14      	ldr	r3, [pc, #80]	; (8002b68 <main+0x1a8>)
 8002b18:	463c      	mov	r4, r7
 8002b1a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002b1c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	mateeqEmulatedEEPROMpointer->MemcpyToEEPROMwithChecksum(10, ateeqString, sizeof(ateeqString));           // Store at Address 10
 8002b20:	463a      	mov	r2, r7
 8002b22:	2310      	movs	r3, #16
 8002b24:	210a      	movs	r1, #10
 8002b26:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8002b28:	f7fe fd49 	bl	80015be <_ZN20MAteeqEmulatedEEPROM26MemcpyToEEPROMwithChecksumEjPcj>

	char* ateeqStringRestore = new char();
 8002b2c:	2001      	movs	r0, #1
 8002b2e:	f000 f912 	bl	8002d56 <_Znwj>
 8002b32:	4603      	mov	r3, r0
 8002b34:	2200      	movs	r2, #0
 8002b36:	701a      	strb	r2, [r3, #0]
 8002b38:	64bb      	str	r3, [r7, #72]	; 0x48
	mateeqEmulatedEEPROMpointer->MemcpyFromEEPROMwithChecksum(ateeqStringRestore, 10, sizeof(ateeqString)); // Restore From Address 10
 8002b3a:	2310      	movs	r3, #16
 8002b3c:	220a      	movs	r2, #10
 8002b3e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8002b40:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8002b42:	f7fe fd72 	bl	800162a <_ZN20MAteeqEmulatedEEPROM28MemcpyFromEEPROMwithChecksumEPcjj>



	while (1)
 8002b46:	e7fe      	b.n	8002b46 <main+0x186>
	MAteeqEmulatedEEPROM* mateeqEmulatedEEPROMpointer = new MAteeqEmulatedEEPROM(0x08020000, 5, 6, 128, MAteeqEmulatedEEPROM::EMULATED_EEPROM_SIZE_4KB);
 8002b48:	4620      	mov	r0, r4
 8002b4a:	f000 f902 	bl	8002d52 <_ZdlPv>
 8002b4e:	e7ff      	b.n	8002b50 <main+0x190>
	MAteeqEmulatedEEPROM mateeqEmulatedEEPROMstatic(0x08008000, 2, 3, 16, MAteeqEmulatedEEPROM::EMULATED_EEPROM_SIZE_1KB);
 8002b50:	f107 031c 	add.w	r3, r7, #28
 8002b54:	4618      	mov	r0, r3
 8002b56:	f7fe fcb9 	bl	80014cc <_ZN20MAteeqEmulatedEEPROMD1Ev>
 8002b5a:	f000 f90d 	bl	8002d78 <__cxa_end_cleanup>
 8002b5e:	bf00      	nop
 8002b60:	08008000 	.word	0x08008000
 8002b64:	08020000 	.word	0x08020000
 8002b68:	08003ac8 	.word	0x08003ac8

08002b6c <_Z18SystemClock_Configv>:

	}
}

void SystemClock_Config(void)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b094      	sub	sp, #80	; 0x50
 8002b70:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8002b72:	f107 0320 	add.w	r3, r7, #32
 8002b76:	2230      	movs	r2, #48	; 0x30
 8002b78:	2100      	movs	r1, #0
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f000 fe4a 	bl	8003814 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8002b80:	f107 030c 	add.w	r3, r7, #12
 8002b84:	2200      	movs	r2, #0
 8002b86:	601a      	str	r2, [r3, #0]
 8002b88:	605a      	str	r2, [r3, #4]
 8002b8a:	609a      	str	r2, [r3, #8]
 8002b8c:	60da      	str	r2, [r3, #12]
 8002b8e:	611a      	str	r2, [r3, #16]

	/**Configure the main internal regulator output voltage*/
	__HAL_RCC_PWR_CLK_ENABLE();
 8002b90:	2300      	movs	r3, #0
 8002b92:	60bb      	str	r3, [r7, #8]
 8002b94:	4a2e      	ldr	r2, [pc, #184]	; (8002c50 <_Z18SystemClock_Configv+0xe4>)
 8002b96:	4b2e      	ldr	r3, [pc, #184]	; (8002c50 <_Z18SystemClock_Configv+0xe4>)
 8002b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b9e:	6413      	str	r3, [r2, #64]	; 0x40
 8002ba0:	4b2b      	ldr	r3, [pc, #172]	; (8002c50 <_Z18SystemClock_Configv+0xe4>)
 8002ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ba8:	60bb      	str	r3, [r7, #8]
 8002baa:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8002bac:	2300      	movs	r3, #0
 8002bae:	607b      	str	r3, [r7, #4]
 8002bb0:	4a28      	ldr	r2, [pc, #160]	; (8002c54 <_Z18SystemClock_Configv+0xe8>)
 8002bb2:	4b28      	ldr	r3, [pc, #160]	; (8002c54 <_Z18SystemClock_Configv+0xe8>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002bba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002bbe:	6013      	str	r3, [r2, #0]
 8002bc0:	4b24      	ldr	r3, [pc, #144]	; (8002c54 <_Z18SystemClock_Configv+0xe8>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002bc8:	607b      	str	r3, [r7, #4]
 8002bca:	687b      	ldr	r3, [r7, #4]

	/**Initializes the CPU, AHB and APB busses clocks*/
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002bcc:	2302      	movs	r3, #2
 8002bce:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002bd4:	2310      	movs	r3, #16
 8002bd6:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002bd8:	2302      	movs	r3, #2
 8002bda:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 16;
 8002be0:	2310      	movs	r3, #16
 8002be2:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 336;
 8002be4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8002be8:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8002bea:	2304      	movs	r3, #4
 8002bec:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8002bee:	2304      	movs	r3, #4
 8002bf0:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002bf2:	f107 0320 	add.w	r3, r7, #32
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f7ff fc98 	bl	800252c <HAL_RCC_OscConfig>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	bf14      	ite	ne
 8002c02:	2301      	movne	r3, #1
 8002c04:	2300      	moveq	r3, #0
 8002c06:	b2db      	uxtb	r3, r3
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d001      	beq.n	8002c10 <_Z18SystemClock_Configv+0xa4>
	{
		Error_Handler();
 8002c0c:	f000 f824 	bl	8002c58 <_Z13Error_Handlerv>
	}
	/**Initializes the CPU, AHB and APB busses clocks*/
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002c10:	230f      	movs	r3, #15
 8002c12:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002c14:	2302      	movs	r3, #2
 8002c16:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002c1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c20:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002c22:	2300      	movs	r3, #0
 8002c24:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002c26:	f107 030c 	add.w	r3, r7, #12
 8002c2a:	2102      	movs	r1, #2
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f7ff fe2d 	bl	800288c <HAL_RCC_ClockConfig>
 8002c32:	4603      	mov	r3, r0
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	bf14      	ite	ne
 8002c38:	2301      	movne	r3, #1
 8002c3a:	2300      	moveq	r3, #0
 8002c3c:	b2db      	uxtb	r3, r3
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d001      	beq.n	8002c46 <_Z18SystemClock_Configv+0xda>
	{
		Error_Handler();
 8002c42:	f000 f809 	bl	8002c58 <_Z13Error_Handlerv>
	}
}
 8002c46:	bf00      	nop
 8002c48:	3750      	adds	r7, #80	; 0x50
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}
 8002c4e:	bf00      	nop
 8002c50:	40023800 	.word	0x40023800
 8002c54:	40007000 	.word	0x40007000

08002c58 <_Z13Error_Handlerv>:

void Error_Handler(void)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	af00      	add	r7, sp, #0

}
 8002c5c:	bf00      	nop
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c64:	4770      	bx	lr
	...

08002c68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c68:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c6a:	4b0c      	ldr	r3, [pc, #48]	; (8002c9c <HAL_MspInit+0x34>)
 8002c6c:	2100      	movs	r1, #0
 8002c6e:	9100      	str	r1, [sp, #0]
 8002c70:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002c72:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002c76:	645a      	str	r2, [r3, #68]	; 0x44
 8002c78:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002c7a:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8002c7e:	9200      	str	r2, [sp, #0]
 8002c80:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c82:	9101      	str	r1, [sp, #4]
 8002c84:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c86:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002c8a:	641a      	str	r2, [r3, #64]	; 0x40
 8002c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c92:	9301      	str	r3, [sp, #4]
 8002c94:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c96:	b002      	add	sp, #8
 8002c98:	4770      	bx	lr
 8002c9a:	bf00      	nop
 8002c9c:	40023800 	.word	0x40023800

08002ca0 <NMI_Handler>:
 8002ca0:	4770      	bx	lr

08002ca2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ca2:	e7fe      	b.n	8002ca2 <HardFault_Handler>

08002ca4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ca4:	e7fe      	b.n	8002ca4 <MemManage_Handler>

08002ca6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002ca6:	e7fe      	b.n	8002ca6 <BusFault_Handler>

08002ca8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ca8:	e7fe      	b.n	8002ca8 <UsageFault_Handler>

08002caa <SVC_Handler>:
 8002caa:	4770      	bx	lr

08002cac <DebugMon_Handler>:
 8002cac:	4770      	bx	lr

08002cae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002cae:	4770      	bx	lr

08002cb0 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002cb0:	f7ff ba10 	b.w	80020d4 <HAL_IncTick>

08002cb4 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002cb4:	490f      	ldr	r1, [pc, #60]	; (8002cf4 <SystemInit+0x40>)
 8002cb6:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8002cba:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002cbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002cc2:	4b0d      	ldr	r3, [pc, #52]	; (8002cf8 <SystemInit+0x44>)
 8002cc4:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002cc6:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 8002cc8:	f042 0201 	orr.w	r2, r2, #1
 8002ccc:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8002cce:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002cd0:	681a      	ldr	r2, [r3, #0]
 8002cd2:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8002cd6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002cda:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8002cdc:	4a07      	ldr	r2, [pc, #28]	; (8002cfc <SystemInit+0x48>)
 8002cde:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002ce0:	681a      	ldr	r2, [r3, #0]
 8002ce2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002ce6:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002ce8:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002cea:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002cee:	608b      	str	r3, [r1, #8]
 8002cf0:	4770      	bx	lr
 8002cf2:	bf00      	nop
 8002cf4:	e000ed00 	.word	0xe000ed00
 8002cf8:	40023800 	.word	0x40023800
 8002cfc:	24003010 	.word	0x24003010

08002d00 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002d00:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002d38 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002d04:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002d06:	e003      	b.n	8002d10 <LoopCopyDataInit>

08002d08 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002d08:	4b0c      	ldr	r3, [pc, #48]	; (8002d3c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002d0a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002d0c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002d0e:	3104      	adds	r1, #4

08002d10 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002d10:	480b      	ldr	r0, [pc, #44]	; (8002d40 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002d12:	4b0c      	ldr	r3, [pc, #48]	; (8002d44 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002d14:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002d16:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002d18:	d3f6      	bcc.n	8002d08 <CopyDataInit>
  ldr  r2, =_sbss
 8002d1a:	4a0b      	ldr	r2, [pc, #44]	; (8002d48 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002d1c:	e002      	b.n	8002d24 <LoopFillZerobss>

08002d1e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002d1e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002d20:	f842 3b04 	str.w	r3, [r2], #4

08002d24 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002d24:	4b09      	ldr	r3, [pc, #36]	; (8002d4c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002d26:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002d28:	d3f9      	bcc.n	8002d1e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002d2a:	f7ff ffc3 	bl	8002cb4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002d2e:	f000 fd3d 	bl	80037ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002d32:	f7ff fe45 	bl	80029c0 <main>
  bx  lr    
 8002d36:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002d38:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8002d3c:	08003e30 	.word	0x08003e30
  ldr  r0, =_sdata
 8002d40:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002d44:	20000078 	.word	0x20000078
  ldr  r2, =_sbss
 8002d48:	20000078 	.word	0x20000078
  ldr  r3, = _ebss
 8002d4c:	200000d8 	.word	0x200000d8

08002d50 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002d50:	e7fe      	b.n	8002d50 <ADC_IRQHandler>

08002d52 <_ZdlPv>:
 8002d52:	f000 bd57 	b.w	8003804 <free>

08002d56 <_Znwj>:
 8002d56:	b510      	push	{r4, lr}
 8002d58:	2800      	cmp	r0, #0
 8002d5a:	bf14      	ite	ne
 8002d5c:	4604      	movne	r4, r0
 8002d5e:	2401      	moveq	r4, #1
 8002d60:	4620      	mov	r0, r4
 8002d62:	f000 fd47 	bl	80037f4 <malloc>
 8002d66:	b930      	cbnz	r0, 8002d76 <_Znwj+0x20>
 8002d68:	f000 fb52 	bl	8003410 <_ZSt15get_new_handlerv>
 8002d6c:	b908      	cbnz	r0, 8002d72 <_Znwj+0x1c>
 8002d6e:	f000 fd15 	bl	800379c <abort>
 8002d72:	4780      	blx	r0
 8002d74:	e7f4      	b.n	8002d60 <_Znwj+0xa>
 8002d76:	bd10      	pop	{r4, pc}

08002d78 <__cxa_end_cleanup>:
 8002d78:	b41e      	push	{r1, r2, r3, r4}
 8002d7a:	f000 f89c 	bl	8002eb6 <__gnu_end_cleanup>
 8002d7e:	bc1e      	pop	{r1, r2, r3, r4}
 8002d80:	f7fe f92c 	bl	8000fdc <_Unwind_Resume>

08002d84 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
 8002d84:	7803      	ldrb	r3, [r0, #0]
 8002d86:	2b47      	cmp	r3, #71	; 0x47
 8002d88:	d117      	bne.n	8002dba <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8002d8a:	7843      	ldrb	r3, [r0, #1]
 8002d8c:	2b4e      	cmp	r3, #78	; 0x4e
 8002d8e:	d114      	bne.n	8002dba <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8002d90:	7883      	ldrb	r3, [r0, #2]
 8002d92:	2b55      	cmp	r3, #85	; 0x55
 8002d94:	d111      	bne.n	8002dba <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8002d96:	78c3      	ldrb	r3, [r0, #3]
 8002d98:	2b43      	cmp	r3, #67	; 0x43
 8002d9a:	d10e      	bne.n	8002dba <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8002d9c:	7903      	ldrb	r3, [r0, #4]
 8002d9e:	2b43      	cmp	r3, #67	; 0x43
 8002da0:	d10b      	bne.n	8002dba <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8002da2:	7943      	ldrb	r3, [r0, #5]
 8002da4:	2b2b      	cmp	r3, #43	; 0x2b
 8002da6:	d108      	bne.n	8002dba <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8002da8:	7983      	ldrb	r3, [r0, #6]
 8002daa:	2b2b      	cmp	r3, #43	; 0x2b
 8002dac:	d105      	bne.n	8002dba <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8002dae:	79c0      	ldrb	r0, [r0, #7]
 8002db0:	2801      	cmp	r0, #1
 8002db2:	bf8c      	ite	hi
 8002db4:	2000      	movhi	r0, #0
 8002db6:	2001      	movls	r0, #1
 8002db8:	4770      	bx	lr
 8002dba:	2000      	movs	r0, #0
 8002dbc:	4770      	bx	lr
	...

08002dc0 <__cxa_type_match>:
 8002dc0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8002dc4:	461e      	mov	r6, r3
 8002dc6:	7803      	ldrb	r3, [r0, #0]
 8002dc8:	2b47      	cmp	r3, #71	; 0x47
 8002dca:	460d      	mov	r5, r1
 8002dcc:	4602      	mov	r2, r0
 8002dce:	79c1      	ldrb	r1, [r0, #7]
 8002dd0:	d148      	bne.n	8002e64 <__cxa_type_match+0xa4>
 8002dd2:	7843      	ldrb	r3, [r0, #1]
 8002dd4:	2b4e      	cmp	r3, #78	; 0x4e
 8002dd6:	d145      	bne.n	8002e64 <__cxa_type_match+0xa4>
 8002dd8:	7883      	ldrb	r3, [r0, #2]
 8002dda:	2b55      	cmp	r3, #85	; 0x55
 8002ddc:	d142      	bne.n	8002e64 <__cxa_type_match+0xa4>
 8002dde:	78c3      	ldrb	r3, [r0, #3]
 8002de0:	2b43      	cmp	r3, #67	; 0x43
 8002de2:	d13f      	bne.n	8002e64 <__cxa_type_match+0xa4>
 8002de4:	7903      	ldrb	r3, [r0, #4]
 8002de6:	2b46      	cmp	r3, #70	; 0x46
 8002de8:	d13c      	bne.n	8002e64 <__cxa_type_match+0xa4>
 8002dea:	7943      	ldrb	r3, [r0, #5]
 8002dec:	2b4f      	cmp	r3, #79	; 0x4f
 8002dee:	d139      	bne.n	8002e64 <__cxa_type_match+0xa4>
 8002df0:	7983      	ldrb	r3, [r0, #6]
 8002df2:	2b52      	cmp	r3, #82	; 0x52
 8002df4:	d136      	bne.n	8002e64 <__cxa_type_match+0xa4>
 8002df6:	2900      	cmp	r1, #0
 8002df8:	d134      	bne.n	8002e64 <__cxa_type_match+0xa4>
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	4608      	mov	r0, r1
 8002dfe:	2400      	movs	r4, #0
 8002e00:	9401      	str	r4, [sp, #4]
 8002e02:	bb3b      	cbnz	r3, 8002e54 <__cxa_type_match+0x94>
 8002e04:	bb40      	cbnz	r0, 8002e58 <__cxa_type_match+0x98>
 8002e06:	2901      	cmp	r1, #1
 8002e08:	bf0a      	itet	eq
 8002e0a:	f852 3c20 	ldreq.w	r3, [r2, #-32]
 8002e0e:	f1a2 0320 	subne.w	r3, r2, #32
 8002e12:	3b78      	subeq	r3, #120	; 0x78
 8002e14:	2901      	cmp	r1, #1
 8002e16:	bf08      	it	eq
 8002e18:	f852 2c20 	ldreq.w	r2, [r2, #-32]
 8002e1c:	681c      	ldr	r4, [r3, #0]
 8002e1e:	bf18      	it	ne
 8002e20:	3258      	addne	r2, #88	; 0x58
 8002e22:	9201      	str	r2, [sp, #4]
 8002e24:	6823      	ldr	r3, [r4, #0]
 8002e26:	4620      	mov	r0, r4
 8002e28:	689b      	ldr	r3, [r3, #8]
 8002e2a:	4798      	blx	r3
 8002e2c:	b1b0      	cbz	r0, 8002e5c <__cxa_type_match+0x9c>
 8002e2e:	9b01      	ldr	r3, [sp, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	9301      	str	r3, [sp, #4]
 8002e34:	2702      	movs	r7, #2
 8002e36:	682b      	ldr	r3, [r5, #0]
 8002e38:	aa01      	add	r2, sp, #4
 8002e3a:	f8d3 8010 	ldr.w	r8, [r3, #16]
 8002e3e:	4621      	mov	r1, r4
 8002e40:	2301      	movs	r3, #1
 8002e42:	4628      	mov	r0, r5
 8002e44:	47c0      	blx	r8
 8002e46:	b158      	cbz	r0, 8002e60 <__cxa_type_match+0xa0>
 8002e48:	9b01      	ldr	r3, [sp, #4]
 8002e4a:	6033      	str	r3, [r6, #0]
 8002e4c:	4638      	mov	r0, r7
 8002e4e:	b002      	add	sp, #8
 8002e50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002e54:	4c07      	ldr	r4, [pc, #28]	; (8002e74 <__cxa_type_match+0xb4>)
 8002e56:	e7e5      	b.n	8002e24 <__cxa_type_match+0x64>
 8002e58:	4c07      	ldr	r4, [pc, #28]	; (8002e78 <__cxa_type_match+0xb8>)
 8002e5a:	e7e3      	b.n	8002e24 <__cxa_type_match+0x64>
 8002e5c:	2701      	movs	r7, #1
 8002e5e:	e7ea      	b.n	8002e36 <__cxa_type_match+0x76>
 8002e60:	4607      	mov	r7, r0
 8002e62:	e7f3      	b.n	8002e4c <__cxa_type_match+0x8c>
 8002e64:	4610      	mov	r0, r2
 8002e66:	f7ff ff8d 	bl	8002d84 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 8002e6a:	f080 0001 	eor.w	r0, r0, #1
 8002e6e:	b2c0      	uxtb	r0, r0
 8002e70:	2300      	movs	r3, #0
 8002e72:	e7c4      	b.n	8002dfe <__cxa_type_match+0x3e>
 8002e74:	08003b5c 	.word	0x08003b5c
 8002e78:	08003b64 	.word	0x08003b64

08002e7c <__cxa_begin_cleanup>:
 8002e7c:	b510      	push	{r4, lr}
 8002e7e:	4604      	mov	r4, r0
 8002e80:	f000 fc86 	bl	8003790 <__cxa_get_globals>
 8002e84:	4602      	mov	r2, r0
 8002e86:	4620      	mov	r0, r4
 8002e88:	f1a4 0120 	sub.w	r1, r4, #32
 8002e8c:	f7ff ff7a 	bl	8002d84 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 8002e90:	b160      	cbz	r0, 8002eac <__cxa_begin_cleanup+0x30>
 8002e92:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8002e96:	3301      	adds	r3, #1
 8002e98:	2b01      	cmp	r3, #1
 8002e9a:	f844 3c04 	str.w	r3, [r4, #-4]
 8002e9e:	d103      	bne.n	8002ea8 <__cxa_begin_cleanup+0x2c>
 8002ea0:	6893      	ldr	r3, [r2, #8]
 8002ea2:	f844 3c08 	str.w	r3, [r4, #-8]
 8002ea6:	6091      	str	r1, [r2, #8]
 8002ea8:	2001      	movs	r0, #1
 8002eaa:	bd10      	pop	{r4, pc}
 8002eac:	6893      	ldr	r3, [r2, #8]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d0f9      	beq.n	8002ea6 <__cxa_begin_cleanup+0x2a>
 8002eb2:	f000 fc55 	bl	8003760 <_ZSt9terminatev>

08002eb6 <__gnu_end_cleanup>:
 8002eb6:	b510      	push	{r4, lr}
 8002eb8:	f000 fc6a 	bl	8003790 <__cxa_get_globals>
 8002ebc:	6882      	ldr	r2, [r0, #8]
 8002ebe:	4601      	mov	r1, r0
 8002ec0:	b90a      	cbnz	r2, 8002ec6 <__gnu_end_cleanup+0x10>
 8002ec2:	f000 fc4d 	bl	8003760 <_ZSt9terminatev>
 8002ec6:	f102 0420 	add.w	r4, r2, #32
 8002eca:	4620      	mov	r0, r4
 8002ecc:	f7ff ff5a 	bl	8002d84 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 8002ed0:	b140      	cbz	r0, 8002ee4 <__gnu_end_cleanup+0x2e>
 8002ed2:	69d3      	ldr	r3, [r2, #28]
 8002ed4:	3b01      	subs	r3, #1
 8002ed6:	61d3      	str	r3, [r2, #28]
 8002ed8:	b913      	cbnz	r3, 8002ee0 <__gnu_end_cleanup+0x2a>
 8002eda:	6990      	ldr	r0, [r2, #24]
 8002edc:	6088      	str	r0, [r1, #8]
 8002ede:	6193      	str	r3, [r2, #24]
 8002ee0:	4620      	mov	r0, r4
 8002ee2:	bd10      	pop	{r4, pc}
 8002ee4:	6088      	str	r0, [r1, #8]
 8002ee6:	e7fb      	b.n	8002ee0 <__gnu_end_cleanup+0x2a>

08002ee8 <_ZL12read_uleb128PKhPm>:
 8002ee8:	b570      	push	{r4, r5, r6, lr}
 8002eea:	2300      	movs	r3, #0
 8002eec:	eba0 06c0 	sub.w	r6, r0, r0, lsl #3
 8002ef0:	ebc0 02c0 	rsb	r2, r0, r0, lsl #3
 8002ef4:	f810 5b01 	ldrb.w	r5, [r0], #1
 8002ef8:	1994      	adds	r4, r2, r6
 8002efa:	f005 027f 	and.w	r2, r5, #127	; 0x7f
 8002efe:	40a2      	lsls	r2, r4
 8002f00:	4313      	orrs	r3, r2
 8002f02:	062a      	lsls	r2, r5, #24
 8002f04:	d4f4      	bmi.n	8002ef0 <_ZL12read_uleb128PKhPm+0x8>
 8002f06:	600b      	str	r3, [r1, #0]
 8002f08:	bd70      	pop	{r4, r5, r6, pc}

08002f0a <_ZL12read_sleb128PKhPl>:
 8002f0a:	b530      	push	{r4, r5, lr}
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	461a      	mov	r2, r3
 8002f10:	f810 4b01 	ldrb.w	r4, [r0], #1
 8002f14:	f004 057f 	and.w	r5, r4, #127	; 0x7f
 8002f18:	4095      	lsls	r5, r2
 8002f1a:	432b      	orrs	r3, r5
 8002f1c:	0625      	lsls	r5, r4, #24
 8002f1e:	f102 0207 	add.w	r2, r2, #7
 8002f22:	d4f5      	bmi.n	8002f10 <_ZL12read_sleb128PKhPl+0x6>
 8002f24:	2a1f      	cmp	r2, #31
 8002f26:	d806      	bhi.n	8002f36 <_ZL12read_sleb128PKhPl+0x2c>
 8002f28:	0664      	lsls	r4, r4, #25
 8002f2a:	bf42      	ittt	mi
 8002f2c:	f04f 34ff 	movmi.w	r4, #4294967295
 8002f30:	fa04 f202 	lslmi.w	r2, r4, r2
 8002f34:	4313      	orrmi	r3, r2
 8002f36:	600b      	str	r3, [r1, #0]
 8002f38:	bd30      	pop	{r4, r5, pc}

08002f3a <_ZL28read_encoded_value_with_basehjPKhPj>:
 8002f3a:	2850      	cmp	r0, #80	; 0x50
 8002f3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002f3e:	4605      	mov	r5, r0
 8002f40:	460e      	mov	r6, r1
 8002f42:	4614      	mov	r4, r2
 8002f44:	461f      	mov	r7, r3
 8002f46:	d107      	bne.n	8002f58 <_ZL28read_encoded_value_with_basehjPKhPj+0x1e>
 8002f48:	1cd0      	adds	r0, r2, #3
 8002f4a:	f020 0003 	bic.w	r0, r0, #3
 8002f4e:	f850 3b04 	ldr.w	r3, [r0], #4
 8002f52:	603b      	str	r3, [r7, #0]
 8002f54:	b003      	add	sp, #12
 8002f56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f58:	f000 030f 	and.w	r3, r0, #15
 8002f5c:	2b0c      	cmp	r3, #12
 8002f5e:	d82e      	bhi.n	8002fbe <_ZL28read_encoded_value_with_basehjPKhPj+0x84>
 8002f60:	e8df f003 	tbb	[pc, r3]
 8002f64:	251d0725 	.word	0x251d0725
 8002f68:	2d2d2d29 	.word	0x2d2d2d29
 8002f6c:	2521182d 	.word	0x2521182d
 8002f70:	29          	.byte	0x29
 8002f71:	00          	.byte	0x00
 8002f72:	a901      	add	r1, sp, #4
 8002f74:	4620      	mov	r0, r4
 8002f76:	f7ff ffb7 	bl	8002ee8 <_ZL12read_uleb128PKhPm>
 8002f7a:	9b01      	ldr	r3, [sp, #4]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d0e8      	beq.n	8002f52 <_ZL28read_encoded_value_with_basehjPKhPj+0x18>
 8002f80:	f005 0270 	and.w	r2, r5, #112	; 0x70
 8002f84:	2a10      	cmp	r2, #16
 8002f86:	bf08      	it	eq
 8002f88:	4626      	moveq	r6, r4
 8002f8a:	4433      	add	r3, r6
 8002f8c:	062a      	lsls	r2, r5, #24
 8002f8e:	bf48      	it	mi
 8002f90:	681b      	ldrmi	r3, [r3, #0]
 8002f92:	e7de      	b.n	8002f52 <_ZL28read_encoded_value_with_basehjPKhPj+0x18>
 8002f94:	a901      	add	r1, sp, #4
 8002f96:	4620      	mov	r0, r4
 8002f98:	f7ff ffb7 	bl	8002f0a <_ZL12read_sleb128PKhPl>
 8002f9c:	e7ed      	b.n	8002f7a <_ZL28read_encoded_value_with_basehjPKhPj+0x40>
 8002f9e:	4620      	mov	r0, r4
 8002fa0:	f830 3b02 	ldrh.w	r3, [r0], #2
 8002fa4:	e7ea      	b.n	8002f7c <_ZL28read_encoded_value_with_basehjPKhPj+0x42>
 8002fa6:	4620      	mov	r0, r4
 8002fa8:	f930 3b02 	ldrsh.w	r3, [r0], #2
 8002fac:	e7e6      	b.n	8002f7c <_ZL28read_encoded_value_with_basehjPKhPj+0x42>
 8002fae:	4620      	mov	r0, r4
 8002fb0:	f850 3b04 	ldr.w	r3, [r0], #4
 8002fb4:	e7e2      	b.n	8002f7c <_ZL28read_encoded_value_with_basehjPKhPj+0x42>
 8002fb6:	4620      	mov	r0, r4
 8002fb8:	f850 3b08 	ldr.w	r3, [r0], #8
 8002fbc:	e7de      	b.n	8002f7c <_ZL28read_encoded_value_with_basehjPKhPj+0x42>
 8002fbe:	f000 fbed 	bl	800379c <abort>

08002fc2 <_ZL21base_of_encoded_valuehP15_Unwind_Context>:
 8002fc2:	b508      	push	{r3, lr}
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	2bff      	cmp	r3, #255	; 0xff
 8002fc8:	4608      	mov	r0, r1
 8002fca:	d007      	beq.n	8002fdc <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x1a>
 8002fcc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002fd0:	2b20      	cmp	r3, #32
 8002fd2:	d00d      	beq.n	8002ff0 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x2e>
 8002fd4:	d804      	bhi.n	8002fe0 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x1e>
 8002fd6:	b10b      	cbz	r3, 8002fdc <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x1a>
 8002fd8:	2b10      	cmp	r3, #16
 8002fda:	d107      	bne.n	8002fec <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x2a>
 8002fdc:	2000      	movs	r0, #0
 8002fde:	bd08      	pop	{r3, pc}
 8002fe0:	2b40      	cmp	r3, #64	; 0x40
 8002fe2:	d00d      	beq.n	8003000 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x3e>
 8002fe4:	2b50      	cmp	r3, #80	; 0x50
 8002fe6:	d0f9      	beq.n	8002fdc <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x1a>
 8002fe8:	2b30      	cmp	r3, #48	; 0x30
 8002fea:	d005      	beq.n	8002ff8 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x36>
 8002fec:	f000 fbd6 	bl	800379c <abort>
 8002ff0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8002ff4:	f7fe b9f2 	b.w	80013dc <_Unwind_GetTextRelBase>
 8002ff8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8002ffc:	f7fe b9f2 	b.w	80013e4 <_Unwind_GetDataRelBase>
 8003000:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8003004:	f7fe b9da 	b.w	80013bc <_Unwind_GetRegionStart>

08003008 <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>:
 8003008:	b570      	push	{r4, r5, r6, lr}
 800300a:	460c      	mov	r4, r1
 800300c:	4601      	mov	r1, r0
 800300e:	4620      	mov	r0, r4
 8003010:	4615      	mov	r5, r2
 8003012:	461e      	mov	r6, r3
 8003014:	f7ff ffd5 	bl	8002fc2 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 8003018:	4633      	mov	r3, r6
 800301a:	462a      	mov	r2, r5
 800301c:	4601      	mov	r1, r0
 800301e:	4620      	mov	r0, r4
 8003020:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8003024:	f7ff bf89 	b.w	8002f3a <_ZL28read_encoded_value_with_basehjPKhPj>

08003028 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>:
 8003028:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800302a:	460e      	mov	r6, r1
 800302c:	4614      	mov	r4, r2
 800302e:	4605      	mov	r5, r0
 8003030:	b328      	cbz	r0, 800307e <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x56>
 8003032:	f7fe f9c3 	bl	80013bc <_Unwind_GetRegionStart>
 8003036:	6020      	str	r0, [r4, #0]
 8003038:	7831      	ldrb	r1, [r6, #0]
 800303a:	29ff      	cmp	r1, #255	; 0xff
 800303c:	f106 0201 	add.w	r2, r6, #1
 8003040:	d01e      	beq.n	8003080 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x58>
 8003042:	1d23      	adds	r3, r4, #4
 8003044:	4628      	mov	r0, r5
 8003046:	f7ff ffdf 	bl	8003008 <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 800304a:	4602      	mov	r2, r0
 800304c:	7813      	ldrb	r3, [r2, #0]
 800304e:	7523      	strb	r3, [r4, #20]
 8003050:	2bff      	cmp	r3, #255	; 0xff
 8003052:	f102 0001 	add.w	r0, r2, #1
 8003056:	d015      	beq.n	8003084 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x5c>
 8003058:	2310      	movs	r3, #16
 800305a:	7523      	strb	r3, [r4, #20]
 800305c:	a901      	add	r1, sp, #4
 800305e:	f7ff ff43 	bl	8002ee8 <_ZL12read_uleb128PKhPm>
 8003062:	9b01      	ldr	r3, [sp, #4]
 8003064:	4403      	add	r3, r0
 8003066:	60e3      	str	r3, [r4, #12]
 8003068:	7803      	ldrb	r3, [r0, #0]
 800306a:	7563      	strb	r3, [r4, #21]
 800306c:	a901      	add	r1, sp, #4
 800306e:	3001      	adds	r0, #1
 8003070:	f7ff ff3a 	bl	8002ee8 <_ZL12read_uleb128PKhPm>
 8003074:	9b01      	ldr	r3, [sp, #4]
 8003076:	4403      	add	r3, r0
 8003078:	6123      	str	r3, [r4, #16]
 800307a:	b002      	add	sp, #8
 800307c:	bd70      	pop	{r4, r5, r6, pc}
 800307e:	e7da      	b.n	8003036 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0xe>
 8003080:	6060      	str	r0, [r4, #4]
 8003082:	e7e3      	b.n	800304c <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x24>
 8003084:	2300      	movs	r3, #0
 8003086:	e7ee      	b.n	8003066 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x3e>

08003088 <_Unwind_GetGR>:
 8003088:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800308a:	ab03      	add	r3, sp, #12
 800308c:	9300      	str	r3, [sp, #0]
 800308e:	2300      	movs	r3, #0
 8003090:	460a      	mov	r2, r1
 8003092:	4619      	mov	r1, r3
 8003094:	f7fd fbfc 	bl	8000890 <_Unwind_VRS_Get>
 8003098:	9803      	ldr	r0, [sp, #12]
 800309a:	b005      	add	sp, #20
 800309c:	f85d fb04 	ldr.w	pc, [sp], #4

080030a0 <__gxx_personality_v0>:
 80030a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80030a4:	b091      	sub	sp, #68	; 0x44
 80030a6:	2300      	movs	r3, #0
 80030a8:	9304      	str	r3, [sp, #16]
 80030aa:	f000 0303 	and.w	r3, r0, #3
 80030ae:	2b01      	cmp	r3, #1
 80030b0:	4607      	mov	r7, r0
 80030b2:	460c      	mov	r4, r1
 80030b4:	4616      	mov	r6, r2
 80030b6:	d011      	beq.n	80030dc <__gxx_personality_v0+0x3c>
 80030b8:	d303      	bcc.n	80030c2 <__gxx_personality_v0+0x22>
 80030ba:	2b02      	cmp	r3, #2
 80030bc:	d003      	beq.n	80030c6 <__gxx_personality_v0+0x26>
 80030be:	f000 fb6d 	bl	800379c <abort>
 80030c2:	0702      	lsls	r2, r0, #28
 80030c4:	d51a      	bpl.n	80030fc <__gxx_personality_v0+0x5c>
 80030c6:	4631      	mov	r1, r6
 80030c8:	4620      	mov	r0, r4
 80030ca:	f7fe f963 	bl	8001394 <__gnu_unwind_frame>
 80030ce:	b118      	cbz	r0, 80030d8 <__gxx_personality_v0+0x38>
 80030d0:	2009      	movs	r0, #9
 80030d2:	b011      	add	sp, #68	; 0x44
 80030d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80030d8:	2008      	movs	r0, #8
 80030da:	e7fa      	b.n	80030d2 <__gxx_personality_v0+0x32>
 80030dc:	f000 0508 	and.w	r5, r0, #8
 80030e0:	f005 08ff 	and.w	r8, r5, #255	; 0xff
 80030e4:	bb85      	cbnz	r5, 8003148 <__gxx_personality_v0+0xa8>
 80030e6:	f8d1 9020 	ldr.w	r9, [r1, #32]
 80030ea:	4610      	mov	r0, r2
 80030ec:	210d      	movs	r1, #13
 80030ee:	f7ff ffcb 	bl	8003088 <_Unwind_GetGR>
 80030f2:	4581      	cmp	r9, r0
 80030f4:	f040 8140 	bne.w	8003378 <__gxx_personality_v0+0x2d8>
 80030f8:	2506      	movs	r5, #6
 80030fa:	e000      	b.n	80030fe <__gxx_personality_v0+0x5e>
 80030fc:	2501      	movs	r5, #1
 80030fe:	ab10      	add	r3, sp, #64	; 0x40
 8003100:	f007 0708 	and.w	r7, r7, #8
 8003104:	f843 4d2c 	str.w	r4, [r3, #-44]!
 8003108:	9300      	str	r3, [sp, #0]
 800310a:	2300      	movs	r3, #0
 800310c:	433d      	orrs	r5, r7
 800310e:	220c      	movs	r2, #12
 8003110:	4619      	mov	r1, r3
 8003112:	4630      	mov	r0, r6
 8003114:	f7fd fbe2 	bl	80008dc <_Unwind_VRS_Set>
 8003118:	2d06      	cmp	r5, #6
 800311a:	f040 8139 	bne.w	8003390 <__gxx_personality_v0+0x2f0>
 800311e:	f8d4 8030 	ldr.w	r8, [r4, #48]	; 0x30
 8003122:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 8003124:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8003126:	f1b8 0f00 	cmp.w	r8, #0
 800312a:	bf0c      	ite	eq
 800312c:	f04f 0a01 	moveq.w	sl, #1
 8003130:	f04f 0a03 	movne.w	sl, #3
 8003134:	f015 0508 	ands.w	r5, r5, #8
 8003138:	f000 80ce 	beq.w	80032d8 <__gxx_personality_v0+0x238>
 800313c:	f1ba 0f01 	cmp.w	sl, #1
 8003140:	f040 80c6 	bne.w	80032d0 <__gxx_personality_v0+0x230>
 8003144:	f000 fb0c 	bl	8003760 <_ZSt9terminatev>
 8003148:	2502      	movs	r5, #2
 800314a:	e7d8      	b.n	80030fe <__gxx_personality_v0+0x5e>
 800314c:	9a07      	ldr	r2, [sp, #28]
 800314e:	4413      	add	r3, r2
 8003150:	429f      	cmp	r7, r3
 8003152:	f080 8137 	bcs.w	80033c4 <__gxx_personality_v0+0x324>
 8003156:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800315a:	f1b8 0f00 	cmp.w	r8, #0
 800315e:	d001      	beq.n	8003164 <__gxx_personality_v0+0xc4>
 8003160:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003162:	4498      	add	r8, r3
 8003164:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8003166:	b117      	cbz	r7, 800316e <__gxx_personality_v0+0xce>
 8003168:	1e78      	subs	r0, r7, #1
 800316a:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 800316c:	4407      	add	r7, r0
 800316e:	f1b8 0f00 	cmp.w	r8, #0
 8003172:	d0a8      	beq.n	80030c6 <__gxx_personality_v0+0x26>
 8003174:	2f00      	cmp	r7, #0
 8003176:	f000 80a1 	beq.w	80032bc <__gxx_personality_v0+0x21c>
 800317a:	f015 0308 	ands.w	r3, r5, #8
 800317e:	9302      	str	r3, [sp, #8]
 8003180:	d036      	beq.n	80031f0 <__gxx_personality_v0+0x150>
 8003182:	2347      	movs	r3, #71	; 0x47
 8003184:	7023      	strb	r3, [r4, #0]
 8003186:	234e      	movs	r3, #78	; 0x4e
 8003188:	7063      	strb	r3, [r4, #1]
 800318a:	2355      	movs	r3, #85	; 0x55
 800318c:	70a3      	strb	r3, [r4, #2]
 800318e:	2343      	movs	r3, #67	; 0x43
 8003190:	70e3      	strb	r3, [r4, #3]
 8003192:	2346      	movs	r3, #70	; 0x46
 8003194:	7123      	strb	r3, [r4, #4]
 8003196:	234f      	movs	r3, #79	; 0x4f
 8003198:	7163      	strb	r3, [r4, #5]
 800319a:	2352      	movs	r3, #82	; 0x52
 800319c:	71a3      	strb	r3, [r4, #6]
 800319e:	2300      	movs	r3, #0
 80031a0:	71e3      	strb	r3, [r4, #7]
 80031a2:	f04f 0a00 	mov.w	sl, #0
 80031a6:	f06f 0b03 	mvn.w	fp, #3
 80031aa:	a907      	add	r1, sp, #28
 80031ac:	4638      	mov	r0, r7
 80031ae:	f7ff feac 	bl	8002f0a <_ZL12read_sleb128PKhPl>
 80031b2:	a908      	add	r1, sp, #32
 80031b4:	9003      	str	r0, [sp, #12]
 80031b6:	f7ff fea8 	bl	8002f0a <_ZL12read_sleb128PKhPl>
 80031ba:	9a07      	ldr	r2, [sp, #28]
 80031bc:	2a00      	cmp	r2, #0
 80031be:	d076      	beq.n	80032ae <__gxx_personality_v0+0x20e>
 80031c0:	dd3d      	ble.n	800323e <__gxx_personality_v0+0x19e>
 80031c2:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 80031c6:	28ff      	cmp	r0, #255	; 0xff
 80031c8:	d035      	beq.n	8003236 <__gxx_personality_v0+0x196>
 80031ca:	f000 0307 	and.w	r3, r0, #7
 80031ce:	2b04      	cmp	r3, #4
 80031d0:	f63f af75 	bhi.w	80030be <__gxx_personality_v0+0x1e>
 80031d4:	a101      	add	r1, pc, #4	; (adr r1, 80031dc <__gxx_personality_v0+0x13c>)
 80031d6:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80031da:	bf00      	nop
 80031dc:	0800323b 	.word	0x0800323b
 80031e0:	080030bf 	.word	0x080030bf
 80031e4:	08003203 	.word	0x08003203
 80031e8:	0800323b 	.word	0x0800323b
 80031ec:	08003233 	.word	0x08003233
 80031f0:	79e3      	ldrb	r3, [r4, #7]
 80031f2:	2b01      	cmp	r3, #1
 80031f4:	bf0c      	ite	eq
 80031f6:	f854 3c20 	ldreq.w	r3, [r4, #-32]
 80031fa:	f104 0358 	addne.w	r3, r4, #88	; 0x58
 80031fe:	9304      	str	r3, [sp, #16]
 8003200:	e7cf      	b.n	80031a2 <__gxx_personality_v0+0x102>
 8003202:	2702      	movs	r7, #2
 8003204:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003206:	ab09      	add	r3, sp, #36	; 0x24
 8003208:	fb07 1212 	mls	r2, r7, r2, r1
 800320c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800320e:	f7ff fe94 	bl	8002f3a <_ZL28read_encoded_value_with_basehjPKhPj>
 8003212:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003214:	b369      	cbz	r1, 8003272 <__gxx_personality_v0+0x1d2>
 8003216:	b12c      	cbz	r4, 8003224 <__gxx_personality_v0+0x184>
 8003218:	ab04      	add	r3, sp, #16
 800321a:	2200      	movs	r2, #0
 800321c:	4620      	mov	r0, r4
 800321e:	f7ff fdcf 	bl	8002dc0 <__cxa_type_match>
 8003222:	bb30      	cbnz	r0, 8003272 <__gxx_personality_v0+0x1d2>
 8003224:	9f08      	ldr	r7, [sp, #32]
 8003226:	2f00      	cmp	r7, #0
 8003228:	d044      	beq.n	80032b4 <__gxx_personality_v0+0x214>
 800322a:	9b03      	ldr	r3, [sp, #12]
 800322c:	443b      	add	r3, r7
 800322e:	461f      	mov	r7, r3
 8003230:	e7bb      	b.n	80031aa <__gxx_personality_v0+0x10a>
 8003232:	2708      	movs	r7, #8
 8003234:	e7e6      	b.n	8003204 <__gxx_personality_v0+0x164>
 8003236:	2700      	movs	r7, #0
 8003238:	e7e4      	b.n	8003204 <__gxx_personality_v0+0x164>
 800323a:	2704      	movs	r7, #4
 800323c:	e7e2      	b.n	8003204 <__gxx_personality_v0+0x164>
 800323e:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8003240:	3201      	adds	r2, #1
 8003242:	b36c      	cbz	r4, 80032a0 <__gxx_personality_v0+0x200>
 8003244:	9b02      	ldr	r3, [sp, #8]
 8003246:	bb5b      	cbnz	r3, 80032a0 <__gxx_personality_v0+0x200>
 8003248:	9b04      	ldr	r3, [sp, #16]
 800324a:	9306      	str	r3, [sp, #24]
 800324c:	fb0b 7202 	mla	r2, fp, r2, r7
 8003250:	1f17      	subs	r7, r2, #4
 8003252:	f857 1f04 	ldr.w	r1, [r7, #4]!
 8003256:	b141      	cbz	r1, 800326a <__gxx_personality_v0+0x1ca>
 8003258:	ab06      	add	r3, sp, #24
 800325a:	2200      	movs	r2, #0
 800325c:	4439      	add	r1, r7
 800325e:	4620      	mov	r0, r4
 8003260:	f7ff fdae 	bl	8002dc0 <__cxa_type_match>
 8003264:	2800      	cmp	r0, #0
 8003266:	d0f4      	beq.n	8003252 <__gxx_personality_v0+0x1b2>
 8003268:	2101      	movs	r1, #1
 800326a:	f081 0101 	eor.w	r1, r1, #1
 800326e:	2900      	cmp	r1, #0
 8003270:	d0d8      	beq.n	8003224 <__gxx_personality_v0+0x184>
 8003272:	9f07      	ldr	r7, [sp, #28]
 8003274:	f04f 0a03 	mov.w	sl, #3
 8003278:	07eb      	lsls	r3, r5, #31
 800327a:	d527      	bpl.n	80032cc <__gxx_personality_v0+0x22c>
 800327c:	f1ba 0f02 	cmp.w	sl, #2
 8003280:	f43f af21 	beq.w	80030c6 <__gxx_personality_v0+0x26>
 8003284:	210d      	movs	r1, #13
 8003286:	4630      	mov	r0, r6
 8003288:	9d04      	ldr	r5, [sp, #16]
 800328a:	f7ff fefd 	bl	8003088 <_Unwind_GetGR>
 800328e:	6265      	str	r5, [r4, #36]	; 0x24
 8003290:	6220      	str	r0, [r4, #32]
 8003292:	62a7      	str	r7, [r4, #40]	; 0x28
 8003294:	f8c4 902c 	str.w	r9, [r4, #44]	; 0x2c
 8003298:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
 800329c:	2006      	movs	r0, #6
 800329e:	e718      	b.n	80030d2 <__gxx_personality_v0+0x32>
 80032a0:	fb0b f202 	mul.w	r2, fp, r2
 80032a4:	58b9      	ldr	r1, [r7, r2]
 80032a6:	fab1 f181 	clz	r1, r1
 80032aa:	0949      	lsrs	r1, r1, #5
 80032ac:	e7df      	b.n	800326e <__gxx_personality_v0+0x1ce>
 80032ae:	f04f 0a01 	mov.w	sl, #1
 80032b2:	e7b7      	b.n	8003224 <__gxx_personality_v0+0x184>
 80032b4:	f1ba 0f00 	cmp.w	sl, #0
 80032b8:	f43f af05 	beq.w	80030c6 <__gxx_personality_v0+0x26>
 80032bc:	f04f 0a02 	mov.w	sl, #2
 80032c0:	e7da      	b.n	8003278 <__gxx_personality_v0+0x1d8>
 80032c2:	2700      	movs	r7, #0
 80032c4:	46b8      	mov	r8, r7
 80032c6:	f04f 0a01 	mov.w	sl, #1
 80032ca:	e7d5      	b.n	8003278 <__gxx_personality_v0+0x1d8>
 80032cc:	4649      	mov	r1, r9
 80032ce:	e731      	b.n	8003134 <__gxx_personality_v0+0x94>
 80032d0:	2f00      	cmp	r7, #0
 80032d2:	da23      	bge.n	800331c <__gxx_personality_v0+0x27c>
 80032d4:	f000 fa56 	bl	8003784 <_ZSt10unexpectedv>
 80032d8:	f1ba 0f01 	cmp.w	sl, #1
 80032dc:	d102      	bne.n	80032e4 <__gxx_personality_v0+0x244>
 80032de:	4620      	mov	r0, r4
 80032e0:	f000 f9c8 	bl	8003674 <__cxa_call_terminate>
 80032e4:	2f00      	cmp	r7, #0
 80032e6:	da19      	bge.n	800331c <__gxx_personality_v0+0x27c>
 80032e8:	aa0a      	add	r2, sp, #40	; 0x28
 80032ea:	4630      	mov	r0, r6
 80032ec:	f7ff fe9c 	bl	8003028 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
 80032f0:	4631      	mov	r1, r6
 80032f2:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 80032f6:	f7ff fe64 	bl	8002fc2 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 80032fa:	f06f 0303 	mvn.w	r3, #3
 80032fe:	fb07 3203 	mla	r2, r7, r3, r3
 8003302:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003304:	900c      	str	r0, [sp, #48]	; 0x30
 8003306:	4413      	add	r3, r2
 8003308:	f853 2025 	ldr.w	r2, [r3, r5, lsl #2]
 800330c:	b10a      	cbz	r2, 8003312 <__gxx_personality_v0+0x272>
 800330e:	3501      	adds	r5, #1
 8003310:	e7fa      	b.n	8003308 <__gxx_personality_v0+0x268>
 8003312:	2204      	movs	r2, #4
 8003314:	62a5      	str	r5, [r4, #40]	; 0x28
 8003316:	62e0      	str	r0, [r4, #44]	; 0x2c
 8003318:	6322      	str	r2, [r4, #48]	; 0x30
 800331a:	6363      	str	r3, [r4, #52]	; 0x34
 800331c:	ab10      	add	r3, sp, #64	; 0x40
 800331e:	4630      	mov	r0, r6
 8003320:	f843 4d1c 	str.w	r4, [r3, #-28]!
 8003324:	9300      	str	r3, [sp, #0]
 8003326:	2300      	movs	r3, #0
 8003328:	461a      	mov	r2, r3
 800332a:	4619      	mov	r1, r3
 800332c:	f7fd fad6 	bl	80008dc <_Unwind_VRS_Set>
 8003330:	ab10      	add	r3, sp, #64	; 0x40
 8003332:	2201      	movs	r2, #1
 8003334:	f843 7d20 	str.w	r7, [r3, #-32]!
 8003338:	9300      	str	r3, [sp, #0]
 800333a:	2300      	movs	r3, #0
 800333c:	4619      	mov	r1, r3
 800333e:	4630      	mov	r0, r6
 8003340:	f7fd facc 	bl	80008dc <_Unwind_VRS_Set>
 8003344:	210f      	movs	r1, #15
 8003346:	4630      	mov	r0, r6
 8003348:	f7ff fe9e 	bl	8003088 <_Unwind_GetGR>
 800334c:	ab10      	add	r3, sp, #64	; 0x40
 800334e:	f000 0001 	and.w	r0, r0, #1
 8003352:	ea40 0008 	orr.w	r0, r0, r8
 8003356:	f843 0d24 	str.w	r0, [r3, #-36]!
 800335a:	9300      	str	r3, [sp, #0]
 800335c:	2300      	movs	r3, #0
 800335e:	220f      	movs	r2, #15
 8003360:	4619      	mov	r1, r3
 8003362:	4630      	mov	r0, r6
 8003364:	f7fd faba 	bl	80008dc <_Unwind_VRS_Set>
 8003368:	f1ba 0f02 	cmp.w	sl, #2
 800336c:	d102      	bne.n	8003374 <__gxx_personality_v0+0x2d4>
 800336e:	4620      	mov	r0, r4
 8003370:	f7ff fd84 	bl	8002e7c <__cxa_begin_cleanup>
 8003374:	2007      	movs	r0, #7
 8003376:	e6ac      	b.n	80030d2 <__gxx_personality_v0+0x32>
 8003378:	aa10      	add	r2, sp, #64	; 0x40
 800337a:	4643      	mov	r3, r8
 800337c:	f842 4d2c 	str.w	r4, [r2, #-44]!
 8003380:	4641      	mov	r1, r8
 8003382:	9200      	str	r2, [sp, #0]
 8003384:	4630      	mov	r0, r6
 8003386:	220c      	movs	r2, #12
 8003388:	f045 0502 	orr.w	r5, r5, #2
 800338c:	f7fd faa6 	bl	80008dc <_Unwind_VRS_Set>
 8003390:	4630      	mov	r0, r6
 8003392:	f7fe f819 	bl	80013c8 <_Unwind_GetLanguageSpecificData>
 8003396:	4681      	mov	r9, r0
 8003398:	2800      	cmp	r0, #0
 800339a:	f43f ae94 	beq.w	80030c6 <__gxx_personality_v0+0x26>
 800339e:	aa0a      	add	r2, sp, #40	; 0x28
 80033a0:	4601      	mov	r1, r0
 80033a2:	4630      	mov	r0, r6
 80033a4:	f7ff fe40 	bl	8003028 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
 80033a8:	4631      	mov	r1, r6
 80033aa:	4680      	mov	r8, r0
 80033ac:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 80033b0:	f7ff fe07 	bl	8002fc2 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 80033b4:	210f      	movs	r1, #15
 80033b6:	900c      	str	r0, [sp, #48]	; 0x30
 80033b8:	4630      	mov	r0, r6
 80033ba:	f7ff fe65 	bl	8003088 <_Unwind_GetGR>
 80033be:	f020 0001 	bic.w	r0, r0, #1
 80033c2:	1e47      	subs	r7, r0, #1
 80033c4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80033c6:	4598      	cmp	r8, r3
 80033c8:	f4bf af7b 	bcs.w	80032c2 <__gxx_personality_v0+0x222>
 80033cc:	4642      	mov	r2, r8
 80033ce:	ab06      	add	r3, sp, #24
 80033d0:	f89d 103d 	ldrb.w	r1, [sp, #61]	; 0x3d
 80033d4:	2000      	movs	r0, #0
 80033d6:	f7ff fe17 	bl	8003008 <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 80033da:	ab07      	add	r3, sp, #28
 80033dc:	4602      	mov	r2, r0
 80033de:	f89d 103d 	ldrb.w	r1, [sp, #61]	; 0x3d
 80033e2:	2000      	movs	r0, #0
 80033e4:	f7ff fe10 	bl	8003008 <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 80033e8:	ab08      	add	r3, sp, #32
 80033ea:	4602      	mov	r2, r0
 80033ec:	f89d 103d 	ldrb.w	r1, [sp, #61]	; 0x3d
 80033f0:	2000      	movs	r0, #0
 80033f2:	f7ff fe09 	bl	8003008 <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 80033f6:	a909      	add	r1, sp, #36	; 0x24
 80033f8:	f7ff fd76 	bl	8002ee8 <_ZL12read_uleb128PKhPm>
 80033fc:	9a06      	ldr	r2, [sp, #24]
 80033fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003400:	4413      	add	r3, r2
 8003402:	429f      	cmp	r7, r3
 8003404:	4680      	mov	r8, r0
 8003406:	f4bf aea1 	bcs.w	800314c <__gxx_personality_v0+0xac>
 800340a:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
 800340e:	e7d9      	b.n	80033c4 <__gxx_personality_v0+0x324>

08003410 <_ZSt15get_new_handlerv>:
 8003410:	4b02      	ldr	r3, [pc, #8]	; (800341c <_ZSt15get_new_handlerv+0xc>)
 8003412:	6818      	ldr	r0, [r3, #0]
 8003414:	f3bf 8f5b 	dmb	ish
 8003418:	4770      	bx	lr
 800341a:	bf00      	nop
 800341c:	20000094 	.word	0x20000094

08003420 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
 8003420:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8003422:	2310      	movs	r3, #16
 8003424:	9302      	str	r3, [sp, #8]
 8003426:	6803      	ldr	r3, [r0, #0]
 8003428:	2400      	movs	r4, #0
 800342a:	4615      	mov	r5, r2
 800342c:	699e      	ldr	r6, [r3, #24]
 800342e:	9400      	str	r4, [sp, #0]
 8003430:	466b      	mov	r3, sp
 8003432:	f88d 4004 	strb.w	r4, [sp, #4]
 8003436:	9403      	str	r4, [sp, #12]
 8003438:	6812      	ldr	r2, [r2, #0]
 800343a:	47b0      	blx	r6
 800343c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003440:	f003 0306 	and.w	r3, r3, #6
 8003444:	2b06      	cmp	r3, #6
 8003446:	bf03      	ittte	eq
 8003448:	9b00      	ldreq	r3, [sp, #0]
 800344a:	602b      	streq	r3, [r5, #0]
 800344c:	2001      	moveq	r0, #1
 800344e:	4620      	movne	r0, r4
 8003450:	b004      	add	sp, #16
 8003452:	bd70      	pop	{r4, r5, r6, pc}

08003454 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
 8003454:	9800      	ldr	r0, [sp, #0]
 8003456:	4290      	cmp	r0, r2
 8003458:	bf0c      	ite	eq
 800345a:	2006      	moveq	r0, #6
 800345c:	2001      	movne	r0, #1
 800345e:	4770      	bx	lr

08003460 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
 8003460:	b510      	push	{r4, lr}
 8003462:	4b03      	ldr	r3, [pc, #12]	; (8003470 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
 8003464:	6003      	str	r3, [r0, #0]
 8003466:	4604      	mov	r4, r0
 8003468:	f000 f84b 	bl	8003502 <_ZNSt9type_infoD1Ev>
 800346c:	4620      	mov	r0, r4
 800346e:	bd10      	pop	{r4, pc}
 8003470:	08003b20 	.word	0x08003b20

08003474 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
 8003474:	b510      	push	{r4, lr}
 8003476:	4604      	mov	r4, r0
 8003478:	f7ff fff2 	bl	8003460 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 800347c:	4620      	mov	r0, r4
 800347e:	2108      	movs	r1, #8
 8003480:	f000 f98a 	bl	8003798 <_ZdlPvj>
 8003484:	4620      	mov	r0, r4
 8003486:	bd10      	pop	{r4, pc}

08003488 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
 8003488:	b538      	push	{r3, r4, r5, lr}
 800348a:	4615      	mov	r5, r2
 800348c:	461c      	mov	r4, r3
 800348e:	f000 f83b 	bl	8003508 <_ZNKSt9type_infoeqERKS_>
 8003492:	b120      	cbz	r0, 800349e <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
 8003494:	2308      	movs	r3, #8
 8003496:	60e3      	str	r3, [r4, #12]
 8003498:	2306      	movs	r3, #6
 800349a:	6025      	str	r5, [r4, #0]
 800349c:	7123      	strb	r3, [r4, #4]
 800349e:	bd38      	pop	{r3, r4, r5, pc}

080034a0 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
 80034a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80034a4:	4605      	mov	r5, r0
 80034a6:	460c      	mov	r4, r1
 80034a8:	4616      	mov	r6, r2
 80034aa:	461f      	mov	r7, r3
 80034ac:	f000 f82c 	bl	8003508 <_ZNKSt9type_infoeqERKS_>
 80034b0:	b948      	cbnz	r0, 80034c6 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 80034b2:	2f03      	cmp	r7, #3
 80034b4:	d807      	bhi.n	80034c6 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 80034b6:	6823      	ldr	r3, [r4, #0]
 80034b8:	4632      	mov	r2, r6
 80034ba:	4629      	mov	r1, r5
 80034bc:	4620      	mov	r0, r4
 80034be:	695b      	ldr	r3, [r3, #20]
 80034c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80034c4:	4718      	bx	r3
 80034c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080034ca <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
 80034ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80034ce:	9e06      	ldr	r6, [sp, #24]
 80034d0:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80034d2:	4698      	mov	r8, r3
 80034d4:	9b08      	ldr	r3, [sp, #32]
 80034d6:	429e      	cmp	r6, r3
 80034d8:	4607      	mov	r7, r0
 80034da:	4615      	mov	r5, r2
 80034dc:	d103      	bne.n	80034e6 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x1c>
 80034de:	9907      	ldr	r1, [sp, #28]
 80034e0:	f000 f812 	bl	8003508 <_ZNKSt9type_infoeqERKS_>
 80034e4:	b958      	cbnz	r0, 80034fe <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x34>
 80034e6:	4641      	mov	r1, r8
 80034e8:	4638      	mov	r0, r7
 80034ea:	f000 f80d 	bl	8003508 <_ZNKSt9type_infoeqERKS_>
 80034ee:	b118      	cbz	r0, 80034f8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x2e>
 80034f0:	2301      	movs	r3, #1
 80034f2:	6026      	str	r6, [r4, #0]
 80034f4:	7125      	strb	r5, [r4, #4]
 80034f6:	71a3      	strb	r3, [r4, #6]
 80034f8:	2000      	movs	r0, #0
 80034fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80034fe:	7165      	strb	r5, [r4, #5]
 8003500:	e7fa      	b.n	80034f8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x2e>

08003502 <_ZNSt9type_infoD1Ev>:
 8003502:	4770      	bx	lr

08003504 <_ZNKSt9type_info14__is_pointer_pEv>:
 8003504:	2000      	movs	r0, #0
 8003506:	4770      	bx	lr

08003508 <_ZNKSt9type_infoeqERKS_>:
 8003508:	4281      	cmp	r1, r0
 800350a:	b508      	push	{r3, lr}
 800350c:	d00e      	beq.n	800352c <_ZNKSt9type_infoeqERKS_+0x24>
 800350e:	6840      	ldr	r0, [r0, #4]
 8003510:	7803      	ldrb	r3, [r0, #0]
 8003512:	2b2a      	cmp	r3, #42	; 0x2a
 8003514:	d00c      	beq.n	8003530 <_ZNKSt9type_infoeqERKS_+0x28>
 8003516:	6849      	ldr	r1, [r1, #4]
 8003518:	780b      	ldrb	r3, [r1, #0]
 800351a:	2b2a      	cmp	r3, #42	; 0x2a
 800351c:	bf08      	it	eq
 800351e:	3101      	addeq	r1, #1
 8003520:	f7fc fe58 	bl	80001d4 <strcmp>
 8003524:	fab0 f080 	clz	r0, r0
 8003528:	0940      	lsrs	r0, r0, #5
 800352a:	bd08      	pop	{r3, pc}
 800352c:	2001      	movs	r0, #1
 800352e:	bd08      	pop	{r3, pc}
 8003530:	2000      	movs	r0, #0
 8003532:	bd08      	pop	{r3, pc}

08003534 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
 8003534:	b510      	push	{r4, lr}
 8003536:	4b03      	ldr	r3, [pc, #12]	; (8003544 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
 8003538:	6003      	str	r3, [r0, #0]
 800353a:	4604      	mov	r4, r0
 800353c:	f7ff ff90 	bl	8003460 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 8003540:	4620      	mov	r0, r4
 8003542:	bd10      	pop	{r4, pc}
 8003544:	08003bec 	.word	0x08003bec

08003548 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
 8003548:	b510      	push	{r4, lr}
 800354a:	4604      	mov	r4, r0
 800354c:	f7ff fff2 	bl	8003534 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
 8003550:	4620      	mov	r0, r4
 8003552:	210c      	movs	r1, #12
 8003554:	f000 f920 	bl	8003798 <_ZdlPvj>
 8003558:	4620      	mov	r0, r4
 800355a:	bd10      	pop	{r4, pc}

0800355c <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 800355c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003560:	9e06      	ldr	r6, [sp, #24]
 8003562:	4296      	cmp	r6, r2
 8003564:	4680      	mov	r8, r0
 8003566:	460f      	mov	r7, r1
 8003568:	4614      	mov	r4, r2
 800356a:	461d      	mov	r5, r3
 800356c:	d103      	bne.n	8003576 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x1a>
 800356e:	4619      	mov	r1, r3
 8003570:	f7ff ffca 	bl	8003508 <_ZNKSt9type_infoeqERKS_>
 8003574:	b958      	cbnz	r0, 800358e <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x32>
 8003576:	f8d8 0008 	ldr.w	r0, [r8, #8]
 800357a:	6803      	ldr	r3, [r0, #0]
 800357c:	9606      	str	r6, [sp, #24]
 800357e:	6a1e      	ldr	r6, [r3, #32]
 8003580:	4622      	mov	r2, r4
 8003582:	462b      	mov	r3, r5
 8003584:	4639      	mov	r1, r7
 8003586:	46b4      	mov	ip, r6
 8003588:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800358c:	4760      	bx	ip
 800358e:	2006      	movs	r0, #6
 8003590:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003594 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 8003594:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003598:	460e      	mov	r6, r1
 800359a:	4619      	mov	r1, r3
 800359c:	4683      	mov	fp, r0
 800359e:	4617      	mov	r7, r2
 80035a0:	4699      	mov	r9, r3
 80035a2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80035a4:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 80035a8:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 80035ac:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80035ae:	f7ff ffab 	bl	8003508 <_ZNKSt9type_infoeqERKS_>
 80035b2:	b190      	cbz	r0, 80035da <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x46>
 80035b4:	2e00      	cmp	r6, #0
 80035b6:	602c      	str	r4, [r5, #0]
 80035b8:	712f      	strb	r7, [r5, #4]
 80035ba:	db09      	blt.n	80035d0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3c>
 80035bc:	4434      	add	r4, r6
 80035be:	45a0      	cmp	r8, r4
 80035c0:	bf0c      	ite	eq
 80035c2:	2406      	moveq	r4, #6
 80035c4:	2401      	movne	r4, #1
 80035c6:	71ac      	strb	r4, [r5, #6]
 80035c8:	2000      	movs	r0, #0
 80035ca:	b001      	add	sp, #4
 80035cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80035d0:	3602      	adds	r6, #2
 80035d2:	d1f9      	bne.n	80035c8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x34>
 80035d4:	2301      	movs	r3, #1
 80035d6:	71ab      	strb	r3, [r5, #6]
 80035d8:	e7f6      	b.n	80035c8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x34>
 80035da:	4544      	cmp	r4, r8
 80035dc:	d104      	bne.n	80035e8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 80035de:	4651      	mov	r1, sl
 80035e0:	4658      	mov	r0, fp
 80035e2:	f7ff ff91 	bl	8003508 <_ZNKSt9type_infoeqERKS_>
 80035e6:	b988      	cbnz	r0, 800360c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x78>
 80035e8:	f8db 0008 	ldr.w	r0, [fp, #8]
 80035ec:	6803      	ldr	r3, [r0, #0]
 80035ee:	950d      	str	r5, [sp, #52]	; 0x34
 80035f0:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 80035f4:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
 80035f8:	940a      	str	r4, [sp, #40]	; 0x28
 80035fa:	69dc      	ldr	r4, [r3, #28]
 80035fc:	463a      	mov	r2, r7
 80035fe:	464b      	mov	r3, r9
 8003600:	4631      	mov	r1, r6
 8003602:	46a4      	mov	ip, r4
 8003604:	b001      	add	sp, #4
 8003606:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800360a:	4760      	bx	ip
 800360c:	716f      	strb	r7, [r5, #5]
 800360e:	e7db      	b.n	80035c8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x34>

08003610 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 8003610:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003614:	4604      	mov	r4, r0
 8003616:	460d      	mov	r5, r1
 8003618:	4616      	mov	r6, r2
 800361a:	461f      	mov	r7, r3
 800361c:	f7ff ff34 	bl	8003488 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 8003620:	b948      	cbnz	r0, 8003636 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
 8003622:	68a0      	ldr	r0, [r4, #8]
 8003624:	6803      	ldr	r3, [r0, #0]
 8003626:	699c      	ldr	r4, [r3, #24]
 8003628:	4632      	mov	r2, r6
 800362a:	463b      	mov	r3, r7
 800362c:	4629      	mov	r1, r5
 800362e:	46a4      	mov	ip, r4
 8003630:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003634:	4760      	bx	ip
 8003636:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800363a <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
 800363a:	7803      	ldrb	r3, [r0, #0]
 800363c:	2b47      	cmp	r3, #71	; 0x47
 800363e:	d117      	bne.n	8003670 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8003640:	7843      	ldrb	r3, [r0, #1]
 8003642:	2b4e      	cmp	r3, #78	; 0x4e
 8003644:	d114      	bne.n	8003670 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8003646:	7883      	ldrb	r3, [r0, #2]
 8003648:	2b55      	cmp	r3, #85	; 0x55
 800364a:	d111      	bne.n	8003670 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 800364c:	78c3      	ldrb	r3, [r0, #3]
 800364e:	2b43      	cmp	r3, #67	; 0x43
 8003650:	d10e      	bne.n	8003670 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8003652:	7903      	ldrb	r3, [r0, #4]
 8003654:	2b43      	cmp	r3, #67	; 0x43
 8003656:	d10b      	bne.n	8003670 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8003658:	7943      	ldrb	r3, [r0, #5]
 800365a:	2b2b      	cmp	r3, #43	; 0x2b
 800365c:	d108      	bne.n	8003670 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 800365e:	7983      	ldrb	r3, [r0, #6]
 8003660:	2b2b      	cmp	r3, #43	; 0x2b
 8003662:	d105      	bne.n	8003670 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8003664:	79c0      	ldrb	r0, [r0, #7]
 8003666:	2801      	cmp	r0, #1
 8003668:	bf8c      	ite	hi
 800366a:	2000      	movhi	r0, #0
 800366c:	2001      	movls	r0, #1
 800366e:	4770      	bx	lr
 8003670:	2000      	movs	r0, #0
 8003672:	4770      	bx	lr

08003674 <__cxa_call_terminate>:
 8003674:	b510      	push	{r4, lr}
 8003676:	4604      	mov	r4, r0
 8003678:	b148      	cbz	r0, 800368e <__cxa_call_terminate+0x1a>
 800367a:	f000 f83b 	bl	80036f4 <__cxa_begin_catch>
 800367e:	4620      	mov	r0, r4
 8003680:	f7ff ffdb 	bl	800363a <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 8003684:	b118      	cbz	r0, 800368e <__cxa_call_terminate+0x1a>
 8003686:	f854 0c14 	ldr.w	r0, [r4, #-20]
 800368a:	f000 f85d 	bl	8003748 <_ZN10__cxxabiv111__terminateEPFvvE>
 800368e:	f000 f867 	bl	8003760 <_ZSt9terminatev>

08003692 <__cxa_call_unexpected>:
 8003692:	b538      	push	{r3, r4, r5, lr}
 8003694:	4602      	mov	r2, r0
 8003696:	f7ff ffd0 	bl	800363a <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 800369a:	b140      	cbz	r0, 80036ae <__cxa_call_unexpected+0x1c>
 800369c:	f852 4c18 	ldr.w	r4, [r2, #-24]
 80036a0:	2500      	movs	r5, #0
 80036a2:	4610      	mov	r0, r2
 80036a4:	f000 f826 	bl	80036f4 <__cxa_begin_catch>
 80036a8:	b125      	cbz	r5, 80036b4 <__cxa_call_unexpected+0x22>
 80036aa:	f000 f86b 	bl	8003784 <_ZSt10unexpectedv>
 80036ae:	4604      	mov	r4, r0
 80036b0:	2501      	movs	r5, #1
 80036b2:	e7f6      	b.n	80036a2 <__cxa_call_unexpected+0x10>
 80036b4:	4620      	mov	r0, r4
 80036b6:	f000 f858 	bl	800376a <_ZN10__cxxabiv112__unexpectedEPFvvE>

080036ba <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
 80036ba:	7803      	ldrb	r3, [r0, #0]
 80036bc:	2b47      	cmp	r3, #71	; 0x47
 80036be:	d117      	bne.n	80036f0 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80036c0:	7843      	ldrb	r3, [r0, #1]
 80036c2:	2b4e      	cmp	r3, #78	; 0x4e
 80036c4:	d114      	bne.n	80036f0 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80036c6:	7883      	ldrb	r3, [r0, #2]
 80036c8:	2b55      	cmp	r3, #85	; 0x55
 80036ca:	d111      	bne.n	80036f0 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80036cc:	78c3      	ldrb	r3, [r0, #3]
 80036ce:	2b43      	cmp	r3, #67	; 0x43
 80036d0:	d10e      	bne.n	80036f0 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80036d2:	7903      	ldrb	r3, [r0, #4]
 80036d4:	2b43      	cmp	r3, #67	; 0x43
 80036d6:	d10b      	bne.n	80036f0 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80036d8:	7943      	ldrb	r3, [r0, #5]
 80036da:	2b2b      	cmp	r3, #43	; 0x2b
 80036dc:	d108      	bne.n	80036f0 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80036de:	7983      	ldrb	r3, [r0, #6]
 80036e0:	2b2b      	cmp	r3, #43	; 0x2b
 80036e2:	d105      	bne.n	80036f0 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80036e4:	79c0      	ldrb	r0, [r0, #7]
 80036e6:	2801      	cmp	r0, #1
 80036e8:	bf8c      	ite	hi
 80036ea:	2000      	movhi	r0, #0
 80036ec:	2001      	movls	r0, #1
 80036ee:	4770      	bx	lr
 80036f0:	2000      	movs	r0, #0
 80036f2:	4770      	bx	lr

080036f4 <__cxa_begin_catch>:
 80036f4:	b538      	push	{r3, r4, r5, lr}
 80036f6:	4605      	mov	r5, r0
 80036f8:	f000 f84a 	bl	8003790 <__cxa_get_globals>
 80036fc:	4601      	mov	r1, r0
 80036fe:	6802      	ldr	r2, [r0, #0]
 8003700:	4628      	mov	r0, r5
 8003702:	f1a5 0420 	sub.w	r4, r5, #32
 8003706:	f7ff ffd8 	bl	80036ba <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 800370a:	b930      	cbnz	r0, 800371a <__cxa_begin_catch+0x26>
 800370c:	b10a      	cbz	r2, 8003712 <__cxa_begin_catch+0x1e>
 800370e:	f000 f827 	bl	8003760 <_ZSt9terminatev>
 8003712:	600c      	str	r4, [r1, #0]
 8003714:	4614      	mov	r4, r2
 8003716:	4620      	mov	r0, r4
 8003718:	bd38      	pop	{r3, r4, r5, pc}
 800371a:	f855 3c0c 	ldr.w	r3, [r5, #-12]
 800371e:	2b00      	cmp	r3, #0
 8003720:	bfb4      	ite	lt
 8003722:	f1c3 0301 	rsblt	r3, r3, #1
 8003726:	3301      	addge	r3, #1
 8003728:	f845 3c0c 	str.w	r3, [r5, #-12]
 800372c:	684b      	ldr	r3, [r1, #4]
 800372e:	42a2      	cmp	r2, r4
 8003730:	f103 33ff 	add.w	r3, r3, #4294967295
 8003734:	604b      	str	r3, [r1, #4]
 8003736:	4628      	mov	r0, r5
 8003738:	bf1c      	itt	ne
 800373a:	f845 2c10 	strne.w	r2, [r5, #-16]
 800373e:	600c      	strne	r4, [r1, #0]
 8003740:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 8003742:	f7fd f89d 	bl	8000880 <_Unwind_Complete>
 8003746:	e7e6      	b.n	8003716 <__cxa_begin_catch+0x22>

08003748 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8003748:	b508      	push	{r3, lr}
 800374a:	4780      	blx	r0
 800374c:	f000 f826 	bl	800379c <abort>

08003750 <_ZSt13get_terminatev>:
 8003750:	4b02      	ldr	r3, [pc, #8]	; (800375c <_ZSt13get_terminatev+0xc>)
 8003752:	6818      	ldr	r0, [r3, #0]
 8003754:	f3bf 8f5b 	dmb	ish
 8003758:	4770      	bx	lr
 800375a:	bf00      	nop
 800375c:	2000000c 	.word	0x2000000c

08003760 <_ZSt9terminatev>:
 8003760:	b508      	push	{r3, lr}
 8003762:	f7ff fff5 	bl	8003750 <_ZSt13get_terminatev>
 8003766:	f7ff ffef 	bl	8003748 <_ZN10__cxxabiv111__terminateEPFvvE>

0800376a <_ZN10__cxxabiv112__unexpectedEPFvvE>:
 800376a:	b508      	push	{r3, lr}
 800376c:	4780      	blx	r0
 800376e:	f7ff fff7 	bl	8003760 <_ZSt9terminatev>
	...

08003774 <_ZSt14get_unexpectedv>:
 8003774:	4b02      	ldr	r3, [pc, #8]	; (8003780 <_ZSt14get_unexpectedv+0xc>)
 8003776:	6818      	ldr	r0, [r3, #0]
 8003778:	f3bf 8f5b 	dmb	ish
 800377c:	4770      	bx	lr
 800377e:	bf00      	nop
 8003780:	20000010 	.word	0x20000010

08003784 <_ZSt10unexpectedv>:
 8003784:	b508      	push	{r3, lr}
 8003786:	f7ff fff5 	bl	8003774 <_ZSt14get_unexpectedv>
 800378a:	f7ff ffee 	bl	800376a <_ZN10__cxxabiv112__unexpectedEPFvvE>
	...

08003790 <__cxa_get_globals>:
 8003790:	4800      	ldr	r0, [pc, #0]	; (8003794 <__cxa_get_globals+0x4>)
 8003792:	4770      	bx	lr
 8003794:	20000098 	.word	0x20000098

08003798 <_ZdlPvj>:
 8003798:	f7ff badb 	b.w	8002d52 <_ZdlPv>

0800379c <abort>:
 800379c:	b508      	push	{r3, lr}
 800379e:	2006      	movs	r0, #6
 80037a0:	f000 f924 	bl	80039ec <raise>
 80037a4:	2001      	movs	r0, #1
 80037a6:	f000 f969 	bl	8003a7c <_exit>
	...

080037ac <__libc_init_array>:
 80037ac:	b570      	push	{r4, r5, r6, lr}
 80037ae:	4e0d      	ldr	r6, [pc, #52]	; (80037e4 <__libc_init_array+0x38>)
 80037b0:	4c0d      	ldr	r4, [pc, #52]	; (80037e8 <__libc_init_array+0x3c>)
 80037b2:	1ba4      	subs	r4, r4, r6
 80037b4:	10a4      	asrs	r4, r4, #2
 80037b6:	2500      	movs	r5, #0
 80037b8:	42a5      	cmp	r5, r4
 80037ba:	d109      	bne.n	80037d0 <__libc_init_array+0x24>
 80037bc:	4e0b      	ldr	r6, [pc, #44]	; (80037ec <__libc_init_array+0x40>)
 80037be:	4c0c      	ldr	r4, [pc, #48]	; (80037f0 <__libc_init_array+0x44>)
 80037c0:	f000 f95e 	bl	8003a80 <_init>
 80037c4:	1ba4      	subs	r4, r4, r6
 80037c6:	10a4      	asrs	r4, r4, #2
 80037c8:	2500      	movs	r5, #0
 80037ca:	42a5      	cmp	r5, r4
 80037cc:	d105      	bne.n	80037da <__libc_init_array+0x2e>
 80037ce:	bd70      	pop	{r4, r5, r6, pc}
 80037d0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80037d4:	4798      	blx	r3
 80037d6:	3501      	adds	r5, #1
 80037d8:	e7ee      	b.n	80037b8 <__libc_init_array+0xc>
 80037da:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80037de:	4798      	blx	r3
 80037e0:	3501      	adds	r5, #1
 80037e2:	e7f2      	b.n	80037ca <__libc_init_array+0x1e>
 80037e4:	08003e28 	.word	0x08003e28
 80037e8:	08003e28 	.word	0x08003e28
 80037ec:	08003e28 	.word	0x08003e28
 80037f0:	08003e2c 	.word	0x08003e2c

080037f4 <malloc>:
 80037f4:	4b02      	ldr	r3, [pc, #8]	; (8003800 <malloc+0xc>)
 80037f6:	4601      	mov	r1, r0
 80037f8:	6818      	ldr	r0, [r3, #0]
 80037fa:	f000 b861 	b.w	80038c0 <_malloc_r>
 80037fe:	bf00      	nop
 8003800:	20000014 	.word	0x20000014

08003804 <free>:
 8003804:	4b02      	ldr	r3, [pc, #8]	; (8003810 <free+0xc>)
 8003806:	4601      	mov	r1, r0
 8003808:	6818      	ldr	r0, [r3, #0]
 800380a:	f000 b80b 	b.w	8003824 <_free_r>
 800380e:	bf00      	nop
 8003810:	20000014 	.word	0x20000014

08003814 <memset>:
 8003814:	4402      	add	r2, r0
 8003816:	4603      	mov	r3, r0
 8003818:	4293      	cmp	r3, r2
 800381a:	d100      	bne.n	800381e <memset+0xa>
 800381c:	4770      	bx	lr
 800381e:	f803 1b01 	strb.w	r1, [r3], #1
 8003822:	e7f9      	b.n	8003818 <memset+0x4>

08003824 <_free_r>:
 8003824:	b538      	push	{r3, r4, r5, lr}
 8003826:	4605      	mov	r5, r0
 8003828:	2900      	cmp	r1, #0
 800382a:	d045      	beq.n	80038b8 <_free_r+0x94>
 800382c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003830:	1f0c      	subs	r4, r1, #4
 8003832:	2b00      	cmp	r3, #0
 8003834:	bfb8      	it	lt
 8003836:	18e4      	addlt	r4, r4, r3
 8003838:	f000 f8f4 	bl	8003a24 <__malloc_lock>
 800383c:	4a1f      	ldr	r2, [pc, #124]	; (80038bc <_free_r+0x98>)
 800383e:	6813      	ldr	r3, [r2, #0]
 8003840:	4610      	mov	r0, r2
 8003842:	b933      	cbnz	r3, 8003852 <_free_r+0x2e>
 8003844:	6063      	str	r3, [r4, #4]
 8003846:	6014      	str	r4, [r2, #0]
 8003848:	4628      	mov	r0, r5
 800384a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800384e:	f000 b8ea 	b.w	8003a26 <__malloc_unlock>
 8003852:	42a3      	cmp	r3, r4
 8003854:	d90c      	bls.n	8003870 <_free_r+0x4c>
 8003856:	6821      	ldr	r1, [r4, #0]
 8003858:	1862      	adds	r2, r4, r1
 800385a:	4293      	cmp	r3, r2
 800385c:	bf04      	itt	eq
 800385e:	681a      	ldreq	r2, [r3, #0]
 8003860:	685b      	ldreq	r3, [r3, #4]
 8003862:	6063      	str	r3, [r4, #4]
 8003864:	bf04      	itt	eq
 8003866:	1852      	addeq	r2, r2, r1
 8003868:	6022      	streq	r2, [r4, #0]
 800386a:	6004      	str	r4, [r0, #0]
 800386c:	e7ec      	b.n	8003848 <_free_r+0x24>
 800386e:	4613      	mov	r3, r2
 8003870:	685a      	ldr	r2, [r3, #4]
 8003872:	b10a      	cbz	r2, 8003878 <_free_r+0x54>
 8003874:	42a2      	cmp	r2, r4
 8003876:	d9fa      	bls.n	800386e <_free_r+0x4a>
 8003878:	6819      	ldr	r1, [r3, #0]
 800387a:	1858      	adds	r0, r3, r1
 800387c:	42a0      	cmp	r0, r4
 800387e:	d10b      	bne.n	8003898 <_free_r+0x74>
 8003880:	6820      	ldr	r0, [r4, #0]
 8003882:	4401      	add	r1, r0
 8003884:	1858      	adds	r0, r3, r1
 8003886:	4282      	cmp	r2, r0
 8003888:	6019      	str	r1, [r3, #0]
 800388a:	d1dd      	bne.n	8003848 <_free_r+0x24>
 800388c:	6810      	ldr	r0, [r2, #0]
 800388e:	6852      	ldr	r2, [r2, #4]
 8003890:	605a      	str	r2, [r3, #4]
 8003892:	4401      	add	r1, r0
 8003894:	6019      	str	r1, [r3, #0]
 8003896:	e7d7      	b.n	8003848 <_free_r+0x24>
 8003898:	d902      	bls.n	80038a0 <_free_r+0x7c>
 800389a:	230c      	movs	r3, #12
 800389c:	602b      	str	r3, [r5, #0]
 800389e:	e7d3      	b.n	8003848 <_free_r+0x24>
 80038a0:	6820      	ldr	r0, [r4, #0]
 80038a2:	1821      	adds	r1, r4, r0
 80038a4:	428a      	cmp	r2, r1
 80038a6:	bf04      	itt	eq
 80038a8:	6811      	ldreq	r1, [r2, #0]
 80038aa:	6852      	ldreq	r2, [r2, #4]
 80038ac:	6062      	str	r2, [r4, #4]
 80038ae:	bf04      	itt	eq
 80038b0:	1809      	addeq	r1, r1, r0
 80038b2:	6021      	streq	r1, [r4, #0]
 80038b4:	605c      	str	r4, [r3, #4]
 80038b6:	e7c7      	b.n	8003848 <_free_r+0x24>
 80038b8:	bd38      	pop	{r3, r4, r5, pc}
 80038ba:	bf00      	nop
 80038bc:	200000a4 	.word	0x200000a4

080038c0 <_malloc_r>:
 80038c0:	b570      	push	{r4, r5, r6, lr}
 80038c2:	1ccd      	adds	r5, r1, #3
 80038c4:	f025 0503 	bic.w	r5, r5, #3
 80038c8:	3508      	adds	r5, #8
 80038ca:	2d0c      	cmp	r5, #12
 80038cc:	bf38      	it	cc
 80038ce:	250c      	movcc	r5, #12
 80038d0:	2d00      	cmp	r5, #0
 80038d2:	4606      	mov	r6, r0
 80038d4:	db01      	blt.n	80038da <_malloc_r+0x1a>
 80038d6:	42a9      	cmp	r1, r5
 80038d8:	d903      	bls.n	80038e2 <_malloc_r+0x22>
 80038da:	230c      	movs	r3, #12
 80038dc:	6033      	str	r3, [r6, #0]
 80038de:	2000      	movs	r0, #0
 80038e0:	bd70      	pop	{r4, r5, r6, pc}
 80038e2:	f000 f89f 	bl	8003a24 <__malloc_lock>
 80038e6:	4a23      	ldr	r2, [pc, #140]	; (8003974 <_malloc_r+0xb4>)
 80038e8:	6814      	ldr	r4, [r2, #0]
 80038ea:	4621      	mov	r1, r4
 80038ec:	b991      	cbnz	r1, 8003914 <_malloc_r+0x54>
 80038ee:	4c22      	ldr	r4, [pc, #136]	; (8003978 <_malloc_r+0xb8>)
 80038f0:	6823      	ldr	r3, [r4, #0]
 80038f2:	b91b      	cbnz	r3, 80038fc <_malloc_r+0x3c>
 80038f4:	4630      	mov	r0, r6
 80038f6:	f000 f841 	bl	800397c <_sbrk_r>
 80038fa:	6020      	str	r0, [r4, #0]
 80038fc:	4629      	mov	r1, r5
 80038fe:	4630      	mov	r0, r6
 8003900:	f000 f83c 	bl	800397c <_sbrk_r>
 8003904:	1c43      	adds	r3, r0, #1
 8003906:	d126      	bne.n	8003956 <_malloc_r+0x96>
 8003908:	230c      	movs	r3, #12
 800390a:	6033      	str	r3, [r6, #0]
 800390c:	4630      	mov	r0, r6
 800390e:	f000 f88a 	bl	8003a26 <__malloc_unlock>
 8003912:	e7e4      	b.n	80038de <_malloc_r+0x1e>
 8003914:	680b      	ldr	r3, [r1, #0]
 8003916:	1b5b      	subs	r3, r3, r5
 8003918:	d41a      	bmi.n	8003950 <_malloc_r+0x90>
 800391a:	2b0b      	cmp	r3, #11
 800391c:	d90f      	bls.n	800393e <_malloc_r+0x7e>
 800391e:	600b      	str	r3, [r1, #0]
 8003920:	50cd      	str	r5, [r1, r3]
 8003922:	18cc      	adds	r4, r1, r3
 8003924:	4630      	mov	r0, r6
 8003926:	f000 f87e 	bl	8003a26 <__malloc_unlock>
 800392a:	f104 000b 	add.w	r0, r4, #11
 800392e:	1d23      	adds	r3, r4, #4
 8003930:	f020 0007 	bic.w	r0, r0, #7
 8003934:	1ac3      	subs	r3, r0, r3
 8003936:	d01b      	beq.n	8003970 <_malloc_r+0xb0>
 8003938:	425a      	negs	r2, r3
 800393a:	50e2      	str	r2, [r4, r3]
 800393c:	bd70      	pop	{r4, r5, r6, pc}
 800393e:	428c      	cmp	r4, r1
 8003940:	bf0d      	iteet	eq
 8003942:	6863      	ldreq	r3, [r4, #4]
 8003944:	684b      	ldrne	r3, [r1, #4]
 8003946:	6063      	strne	r3, [r4, #4]
 8003948:	6013      	streq	r3, [r2, #0]
 800394a:	bf18      	it	ne
 800394c:	460c      	movne	r4, r1
 800394e:	e7e9      	b.n	8003924 <_malloc_r+0x64>
 8003950:	460c      	mov	r4, r1
 8003952:	6849      	ldr	r1, [r1, #4]
 8003954:	e7ca      	b.n	80038ec <_malloc_r+0x2c>
 8003956:	1cc4      	adds	r4, r0, #3
 8003958:	f024 0403 	bic.w	r4, r4, #3
 800395c:	42a0      	cmp	r0, r4
 800395e:	d005      	beq.n	800396c <_malloc_r+0xac>
 8003960:	1a21      	subs	r1, r4, r0
 8003962:	4630      	mov	r0, r6
 8003964:	f000 f80a 	bl	800397c <_sbrk_r>
 8003968:	3001      	adds	r0, #1
 800396a:	d0cd      	beq.n	8003908 <_malloc_r+0x48>
 800396c:	6025      	str	r5, [r4, #0]
 800396e:	e7d9      	b.n	8003924 <_malloc_r+0x64>
 8003970:	bd70      	pop	{r4, r5, r6, pc}
 8003972:	bf00      	nop
 8003974:	200000a4 	.word	0x200000a4
 8003978:	200000a8 	.word	0x200000a8

0800397c <_sbrk_r>:
 800397c:	b538      	push	{r3, r4, r5, lr}
 800397e:	4c06      	ldr	r4, [pc, #24]	; (8003998 <_sbrk_r+0x1c>)
 8003980:	2300      	movs	r3, #0
 8003982:	4605      	mov	r5, r0
 8003984:	4608      	mov	r0, r1
 8003986:	6023      	str	r3, [r4, #0]
 8003988:	f000 f86a 	bl	8003a60 <_sbrk>
 800398c:	1c43      	adds	r3, r0, #1
 800398e:	d102      	bne.n	8003996 <_sbrk_r+0x1a>
 8003990:	6823      	ldr	r3, [r4, #0]
 8003992:	b103      	cbz	r3, 8003996 <_sbrk_r+0x1a>
 8003994:	602b      	str	r3, [r5, #0]
 8003996:	bd38      	pop	{r3, r4, r5, pc}
 8003998:	200000d4 	.word	0x200000d4

0800399c <_raise_r>:
 800399c:	291f      	cmp	r1, #31
 800399e:	b538      	push	{r3, r4, r5, lr}
 80039a0:	4604      	mov	r4, r0
 80039a2:	460d      	mov	r5, r1
 80039a4:	d904      	bls.n	80039b0 <_raise_r+0x14>
 80039a6:	2316      	movs	r3, #22
 80039a8:	6003      	str	r3, [r0, #0]
 80039aa:	f04f 30ff 	mov.w	r0, #4294967295
 80039ae:	bd38      	pop	{r3, r4, r5, pc}
 80039b0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80039b2:	b112      	cbz	r2, 80039ba <_raise_r+0x1e>
 80039b4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80039b8:	b94b      	cbnz	r3, 80039ce <_raise_r+0x32>
 80039ba:	4620      	mov	r0, r4
 80039bc:	f000 f830 	bl	8003a20 <_getpid_r>
 80039c0:	462a      	mov	r2, r5
 80039c2:	4601      	mov	r1, r0
 80039c4:	4620      	mov	r0, r4
 80039c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80039ca:	f000 b817 	b.w	80039fc <_kill_r>
 80039ce:	2b01      	cmp	r3, #1
 80039d0:	d00a      	beq.n	80039e8 <_raise_r+0x4c>
 80039d2:	1c59      	adds	r1, r3, #1
 80039d4:	d103      	bne.n	80039de <_raise_r+0x42>
 80039d6:	2316      	movs	r3, #22
 80039d8:	6003      	str	r3, [r0, #0]
 80039da:	2001      	movs	r0, #1
 80039dc:	bd38      	pop	{r3, r4, r5, pc}
 80039de:	2400      	movs	r4, #0
 80039e0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80039e4:	4628      	mov	r0, r5
 80039e6:	4798      	blx	r3
 80039e8:	2000      	movs	r0, #0
 80039ea:	bd38      	pop	{r3, r4, r5, pc}

080039ec <raise>:
 80039ec:	4b02      	ldr	r3, [pc, #8]	; (80039f8 <raise+0xc>)
 80039ee:	4601      	mov	r1, r0
 80039f0:	6818      	ldr	r0, [r3, #0]
 80039f2:	f7ff bfd3 	b.w	800399c <_raise_r>
 80039f6:	bf00      	nop
 80039f8:	20000014 	.word	0x20000014

080039fc <_kill_r>:
 80039fc:	b538      	push	{r3, r4, r5, lr}
 80039fe:	4c07      	ldr	r4, [pc, #28]	; (8003a1c <_kill_r+0x20>)
 8003a00:	2300      	movs	r3, #0
 8003a02:	4605      	mov	r5, r0
 8003a04:	4608      	mov	r0, r1
 8003a06:	4611      	mov	r1, r2
 8003a08:	6023      	str	r3, [r4, #0]
 8003a0a:	f000 f821 	bl	8003a50 <_kill>
 8003a0e:	1c43      	adds	r3, r0, #1
 8003a10:	d102      	bne.n	8003a18 <_kill_r+0x1c>
 8003a12:	6823      	ldr	r3, [r4, #0]
 8003a14:	b103      	cbz	r3, 8003a18 <_kill_r+0x1c>
 8003a16:	602b      	str	r3, [r5, #0]
 8003a18:	bd38      	pop	{r3, r4, r5, pc}
 8003a1a:	bf00      	nop
 8003a1c:	200000d4 	.word	0x200000d4

08003a20 <_getpid_r>:
 8003a20:	f000 b80e 	b.w	8003a40 <_getpid>

08003a24 <__malloc_lock>:
 8003a24:	4770      	bx	lr

08003a26 <__malloc_unlock>:
 8003a26:	4770      	bx	lr

08003a28 <memcpy>:
 8003a28:	b510      	push	{r4, lr}
 8003a2a:	1e43      	subs	r3, r0, #1
 8003a2c:	440a      	add	r2, r1
 8003a2e:	4291      	cmp	r1, r2
 8003a30:	d100      	bne.n	8003a34 <memcpy+0xc>
 8003a32:	bd10      	pop	{r4, pc}
 8003a34:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003a38:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003a3c:	e7f7      	b.n	8003a2e <memcpy+0x6>
	...

08003a40 <_getpid>:
 8003a40:	4b02      	ldr	r3, [pc, #8]	; (8003a4c <_getpid+0xc>)
 8003a42:	2258      	movs	r2, #88	; 0x58
 8003a44:	601a      	str	r2, [r3, #0]
 8003a46:	f04f 30ff 	mov.w	r0, #4294967295
 8003a4a:	4770      	bx	lr
 8003a4c:	200000d4 	.word	0x200000d4

08003a50 <_kill>:
 8003a50:	4b02      	ldr	r3, [pc, #8]	; (8003a5c <_kill+0xc>)
 8003a52:	2258      	movs	r2, #88	; 0x58
 8003a54:	601a      	str	r2, [r3, #0]
 8003a56:	f04f 30ff 	mov.w	r0, #4294967295
 8003a5a:	4770      	bx	lr
 8003a5c:	200000d4 	.word	0x200000d4

08003a60 <_sbrk>:
 8003a60:	4b04      	ldr	r3, [pc, #16]	; (8003a74 <_sbrk+0x14>)
 8003a62:	6819      	ldr	r1, [r3, #0]
 8003a64:	4602      	mov	r2, r0
 8003a66:	b909      	cbnz	r1, 8003a6c <_sbrk+0xc>
 8003a68:	4903      	ldr	r1, [pc, #12]	; (8003a78 <_sbrk+0x18>)
 8003a6a:	6019      	str	r1, [r3, #0]
 8003a6c:	6818      	ldr	r0, [r3, #0]
 8003a6e:	4402      	add	r2, r0
 8003a70:	601a      	str	r2, [r3, #0]
 8003a72:	4770      	bx	lr
 8003a74:	200000ac 	.word	0x200000ac
 8003a78:	200000d8 	.word	0x200000d8

08003a7c <_exit>:
 8003a7c:	e7fe      	b.n	8003a7c <_exit>
	...

08003a80 <_init>:
 8003a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a82:	bf00      	nop
 8003a84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a86:	bc08      	pop	{r3}
 8003a88:	469e      	mov	lr, r3
 8003a8a:	4770      	bx	lr

08003a8c <_fini>:
 8003a8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a8e:	bf00      	nop
 8003a90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a92:	bc08      	pop	{r3}
 8003a94:	469e      	mov	lr, r3
 8003a96:	4770      	bx	lr
